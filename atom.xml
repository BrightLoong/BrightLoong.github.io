<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BrightLoong&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://brightloong.github.io/"/>
  <updated>2018-04-22T11:32:35.540Z</updated>
  <id>https://brightloong.github.io/</id>
  
  <author>
    <name>BrightLoong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式——装饰器模式</title>
    <link href="https://brightloong.github.io/2019/10/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2019/10/15/设计模式——装饰器模式/</id>
    <published>2019-10-15T09:43:58.000Z</published>
    <updated>2018-04-22T11:32:35.540Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/decorator/decorator.jpg" alt="decorator"></p><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一. 概述"></a>一. 概述</h3><p><code>装饰器模式（Decorator）</code>,动态地给一个对象添加一些额外的职责，就增加功能来说，装饰器模式比生成子类更为灵活；它允许向一个现有的对象添加新的功能，同时又不改变其结构。<a id="more"></a></p><blockquote><p>装饰器模式属于结构型模式。</p></blockquote><h3 id="二-UML类图解析"><a href="#二-UML类图解析" class="headerlink" title="二. UML类图解析"></a>二. UML类图解析</h3><p>装饰器模式的UML类图如下：</p><p><img src="https://brightloong.github.io/images/design-pattern/decorator/decorator.png" alt="decorator"></p><ul><li>Component：接口，定义一个抽象接口，真实对象和装饰对象具有相同的接口，以便动态的添加职责。</li><li>ConcreteComponent：具体的对象。</li><li>Decorator：装饰类，继承了Component,从外类来扩展Component类的功能，并且持有一个构建引用，进行请求转发。</li><li>ConcreteDecorator：具体装饰类，用于给实际对象添加职责。</li></ul><h3 id="三-代码实现"><a href="#三-代码实现" class="headerlink" title="三. 代码实现"></a>三. 代码实现</h3><p>现在考虑这样一个场景，现在有一个煎饼摊，人们去买煎饼（Pancake）,有些人要加火腿（Ham）的，有些人要加鸡蛋（Egg）的，有些人要加生菜（Lettuce）的，当然土豪可能有啥全给加上^_^。用上述的装饰器模式来进行编码。</p><h4 id="1-定义煎饼接口IPancake"><a href="#1-定义煎饼接口IPancake" class="headerlink" title="1. 定义煎饼接口IPancake"></a>1. 定义煎饼接口IPancake</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个煎饼接口</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPancake</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义烹饪的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-定义具体的煎饼Pancake"><a href="#2-定义具体的煎饼Pancake" class="headerlink" title="2. 定义具体的煎饼Pancake"></a>2. 定义具体的煎饼Pancake</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体的煎饼对象，可用其他装饰类进行动态扩展。</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pancake</span> <span class="keyword">implements</span> <span class="title">IPancake</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"的煎饼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-定义抽象装饰类PancakeDecorator"><a href="#3-定义抽象装饰类PancakeDecorator" class="headerlink" title="3. 定义抽象装饰类PancakeDecorator"></a>3. 定义抽象装饰类PancakeDecorator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现接口的抽象装饰类，建议设置成abstract.</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="class"><span class="keyword">class</span> <span class="title">PancakeDecorator</span> <span class="keyword">implements</span> <span class="title">IPancake</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***/</span></span><br><span class="line">    <span class="keyword">private</span> IPancake pancake;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PancakeDecorator</span><span class="params">(IPancake pancake)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pancake = pancake;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.pancake != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pancake.cook();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-具体装饰类EggDecorator"><a href="#4-具体装饰类EggDecorator" class="headerlink" title="4. 具体装饰类EggDecorator"></a>4. 具体装饰类EggDecorator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对煎饼加鸡蛋的装饰类，继承PancakeDecorator，覆盖cook操作</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EggDecorator</span> <span class="keyword">extends</span> <span class="title">PancakeDecorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EggDecorator</span><span class="params">(IPancake pancake)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 覆盖cook方法，加入自身的实现，并且调用父类的cook方法，也就是构造函数中</span></span><br><span class="line"><span class="comment">     * EggDecorator(IPancake pancake)，这里传入的pancake的cook操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加了一个鸡蛋，"</span>);</span><br><span class="line">        <span class="keyword">super</span>.cook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-具体装饰类HamDecorator"><a href="#5-具体装饰类HamDecorator" class="headerlink" title="5. 具体装饰类HamDecorator"></a>5. 具体装饰类HamDecorator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对煎饼加火腿的装饰类，继承PancakeDecorator，覆盖cook操作</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HamDecorator</span> <span class="keyword">extends</span> <span class="title">PancakeDecorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HamDecorator</span><span class="params">(IPancake pancake)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 覆盖cook方法，加入自身的实现，并且调用父类的cook方法，也就是构造函数中</span></span><br><span class="line"><span class="comment">     * EggDecorator(IPancake pancake)，这里传入的pancake的cook操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加了一根火腿，"</span>);</span><br><span class="line">        <span class="keyword">super</span>.cook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-具体装饰类LettuceDecorator"><a href="#6-具体装饰类LettuceDecorator" class="headerlink" title="6. 具体装饰类LettuceDecorator"></a>6. 具体装饰类LettuceDecorator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对煎饼加生菜的装饰类，继承PancakeDecorator，覆盖cook操作</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LettuceDecorator</span> <span class="keyword">extends</span> <span class="title">PancakeDecorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LettuceDecorator</span><span class="params">(IPancake pancake)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 覆盖cook方法，加入自身的实现，并且调用父类的cook方法，也就是构造函数中</span></span><br><span class="line"><span class="comment">     * EggDecorator(IPancake pancake)，这里传入的pancake的cook操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加了一颗生菜，"</span>);</span><br><span class="line">        <span class="keyword">super</span>.cook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-客户端调用以及结果"><a href="#7-客户端调用以及结果" class="headerlink" title="7. 客户端调用以及结果"></a>7. 客户端调用以及结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用客户端</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=========我是土豪都给我加上==========="</span>);</span><br><span class="line">        IPancake pancake = <span class="keyword">new</span> Pancake();</span><br><span class="line">        IPancake pancakeWithEgg = <span class="keyword">new</span> EggDecorator(pancake);</span><br><span class="line">        IPancake pancakeWithEggAndHam = <span class="keyword">new</span> HamDecorator(pancakeWithEgg);</span><br><span class="line">        IPancake panckeWithEggAndHamAndLettuce = <span class="keyword">new</span> LettuceDecorator(pancakeWithEggAndHam);</span><br><span class="line">        panckeWithEggAndHamAndLettuce.cook();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"==========我是程序猿，加两个鸡蛋补补=============="</span>);</span><br><span class="line">        IPancake pancake2 = <span class="keyword">new</span> Pancake();</span><br><span class="line">        IPancake pancakeWithEgg2 = <span class="keyword">new</span> EggDecorator(pancake2);</span><br><span class="line">        IPancake pancakeWithTwoEgg = <span class="keyword">new</span> EggDecorator(pancakeWithEgg2);</span><br><span class="line">        pancakeWithTwoEgg.cook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">=========我是土豪都给我加上===========</span><br><span class="line">加了一颗生菜，</span><br><span class="line">加了一根火腿，</span><br><span class="line">加了一个鸡蛋，</span><br><span class="line">的煎饼</span><br><span class="line">==========我是程序猿，加两个鸡蛋补补==============</span><br><span class="line">加了一个鸡蛋，</span><br><span class="line">加了一个鸡蛋，</span><br><span class="line">的煎饼</span><br></pre></td></tr></table></figure><h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h3><p>关于装饰器模式的使用，在我看来主要有一下几点需要注意的</p><ul><li>抽象装饰器和具体被装饰的对象实现同一个接口</li><li>抽象装饰器里面要持有接口对象，以便请求传递</li><li>具体装饰器覆盖抽象装饰器方法并用super进行调用，传递请求</li></ul><h4 id="1-适用场景"><a href="#1-适用场景" class="headerlink" title="1. 适用场景"></a>1. 适用场景</h4><ul><li>扩展一个类的功能。</li><li>动态添加功能，动态撤销。</li></ul><h4 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h4><ul><li>装饰类和被装饰类都只关心自身的核心业务，实现了解耦。</li><li>方便动态的扩展功能，且提供了比继承更多的灵活性。</li></ul><h4 id="3-缺点"><a href="#3-缺点" class="headerlink" title="3. 缺点"></a>3. 缺点</h4><ul><li>如果功能扩展过多，势必产生大量的类。</li><li>多层装饰比较复杂。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/decorator/decorator.jpg&quot; alt=&quot;decorator&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一. 概述&quot;&gt;&lt;/a&gt;一. 概述&lt;/h3&gt;&lt;p&gt;&lt;code&gt;装饰器模式（Decorator）&lt;/code&gt;,动态地给一个对象添加一些额外的职责，就增加功能来说，装饰器模式比生成子类更为灵活；它允许向一个现有的对象添加新的功能，同时又不改变其结构。
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——单例模式</title>
    <link href="https://brightloong.github.io/2018/04/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/04/15/设计模式——单例模式/</id>
    <published>2018-04-15T09:43:58.000Z</published>
    <updated>2018-04-16T14:55:59.385Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/Singleton/Singleton.jpg" alt="Singleton"></p><blockquote><p>单例模式属于创建模型。</p></blockquote><p>单例模式，是设计模式中比较简单而又最常用的模式之一。通过单例模式可以保证系统中，应用该模式的类只有一个类实例。<a id="more"></a>例如，一个系统中可以存在多个打印任务，但是只能有一个正在工作的任务；一个系统只能有一个窗口管理器或文件系统；一个系统只能有一个计时工具或ID(序号)生成器。</p><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>单例模式(<code>Singleton Pattern</code>)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p><p>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1. 饿汉式"></a>1. 饿汉式</h4><p>饿汉式提供了线程安全的单例，但是不支持懒加载，在第一次加载类到内存中时就会初始化（所以称之为饿汉，不管怎么样，先初始化了再说）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式单例模式.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 全局唯一实例. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-非线程安全懒汉式"><a href="#2-非线程安全懒汉式" class="headerlink" title="2. 非线程安全懒汉式"></a>2. 非线程安全懒汉式</h4><p>相对饿汉式，懒汉式提供了再需要时候初始化的方式，以下是非线程安全的实现方式，不建议使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非线程安全的懒汉式.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过懒加载的方式获取实例，但是非线程安全.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Singleton实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-低效的线程安全懒汉式——使用synchronized"><a href="#3-低效的线程安全懒汉式——使用synchronized" class="headerlink" title="3. 低效的线程安全懒汉式——使用synchronized"></a>3. 低效的线程安全懒汉式——使用synchronized</h4><p>使用synchronized进行同步，虽然保证了线程安全，但是并不高效，比较单例模式只有在第一次创建的时候会存在线程安全问题，而不需要在创建单例后在以后的每一次调用还要进行同步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 低效的线程安全的懒汉式.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 synchronized 关键字来保证线程安全，也是懒加载的方式来获取实例.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Singleton实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-双重校验锁线程安全懒汉式"><a href="#4-双重校验锁线程安全懒汉式" class="headerlink" title="4. 双重校验锁线程安全懒汉式"></a>4. 双重校验锁线程安全懒汉式</h4><p>相对上面的同步方法，双重校验使用同步块解决线程安全问题。两次检查instance == null，一次是在同步块外，一次是在同步快内。为什么在同步块内还要检验一次，因为可能会有多个线程一起进入同步块外的if，如果在同步块内不进行二次检验的话就会生成多个实例了。</p><blockquote><p>注：受限于Jdk5以前的Java内存模型，仍然会有bug，Java5及之后才能正常达到单例效果。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重校验锁线程安全懒汉式.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过'双重校验锁'来更高效的保证线程安全，也是懒加载的方式来获取实例.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Singleton实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-枚举式"><a href="#5-枚举式" class="headerlink" title="5. 枚举式"></a>5. 枚举式</h4><p><code>《Effective Java》</code>一书中推荐使用枚举来实现单例模式，该方式简单可自由序列化；保证只有一个实例（即使使用反射机制也无法多次实例化一个枚举量），但是不支持懒加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举方式的单例.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-静态内部类"><a href="#6-静态内部类" class="headerlink" title="6. 静态内部类"></a>6. 静态内部类</h4><p>使用JVM本身机制保证了线程安全问题，其只有显式通过调用getInstance方法时，才会装载SingletonHolder类，从而实例化instance；同时读取实例的时候不会进行同步，没有性能缺陷，也不依赖JDK版本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过使用静态内部类的方式来实现懒加载且线程安全的创建单例.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态内部类.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">SingletonHolder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过懒加载的方式获取Singleton唯一实例的方法.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Singleton实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是对单例模式的简单介绍，单例模式非常简单，其他的优缺点之类的不再赘述。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/Singleton/Singleton.jpg&quot; alt=&quot;Singleton&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;单例模式属于创建模型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单例模式，是设计模式中比较简单而又最常用的模式之一。通过单例模式可以保证系统中，应用该模式的类只有一个类实例。
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——命令模式</title>
    <link href="https://brightloong.github.io/2018/01/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/01/09/设计模式——命令模式/</id>
    <published>2018-01-09T09:46:21.000Z</published>
    <updated>2018-03-25T05:02:55.729Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/command/command.jpeg" alt="command"></p><h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h3><p><strong>命令模式</strong> ，将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对<code>请求排队</code>或<code>记录请求日志</code>，以及支持撤销的操作。<a id="more"></a></p><p>命令模式的特点是对命令进行了封装，将请求的具体操作封装成命令对象，用户无需知道具体需要执行什么样的操作逻辑，只用调用对应的命令即可，实现了用户请求和请求实现的解耦，方便扩展。</p><h3 id="二-模式结构解析"><a href="#二-模式结构解析" class="headerlink" title="二. 模式结构解析"></a>二. 模式结构解析</h3><h4 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://brightloong.github.io/images/design-pattern/command/command.png" alt="UML图"></p><ul><li>Client(客户端)：确定命令接收者，并创建具体的命令。</li><li>Invoker(命令发起者)：发起命令执行请求</li><li>ICommand(命令抽象接口)：声明的命令抽象接口，具有execute()方法。</li><li>ConcreteCommand(命令接口的具体实现)：实现命令接口，实现具体的execute()方法，负责调用命令接收者进行命令执行。</li><li>Receiver(命令接受者)：接收请求并执行，具体的请求实现，<u>这里的任何类都有可能成为一个命令接收者。</u></li></ul><h3 id="三-简单命令模式代码实现"><a href="#三-简单命令模式代码实现" class="headerlink" title="三. 简单命令模式代码实现"></a>三. 简单命令模式代码实现</h3><h4 id="1-ICommand命令接口定义"><a href="#1-ICommand命令接口定义" class="headerlink" title="1. ICommand命令接口定义"></a>1. ICommand命令接口定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-ConcreteCommand具体命令实现"><a href="#2-ConcreteCommand具体命令实现" class="headerlink" title="2. ConcreteCommand具体命令实现"></a>2. ConcreteCommand具体命令实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.ICommand;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.Receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.command.core.simple.ICommand#execute()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteCommand发送命令给接给命令接收者！"</span>);</span><br><span class="line">        receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Receiver具体的命令接收者实现"><a href="#3-Receiver具体的命令接收者实现" class="headerlink" title="3. Receiver具体的命令接收者实现"></a>3. Receiver具体的命令接收者实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Receiver接收到命令并执行！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Invoker命令调用者"><a href="#4-Invoker命令调用者" class="headerlink" title="4. Invoker命令调用者"></a>4. Invoker命令调用者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ICommand command;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the command</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICommand <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(ICommand command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"命令请求者Invoker发起命令！"</span>);</span><br><span class="line">        <span class="keyword">this</span>.command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Client客户端测试代码和结果"><a href="#5-Client客户端测试代码和结果" class="headerlink" title="5. Client客户端测试代码和结果"></a>5. Client客户端测试代码和结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.impl.ConcreteCommand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">        ICommand command = <span class="keyword">new</span> ConcreteCommand(receiver);</span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">        invoker.setCommand(command);</span><br><span class="line">        invoker.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令请求者Invoker发起命令！</span><br><span class="line">ConcreteCommand发送命令给接给命令接收者！</span><br><span class="line">Receiver接收到命令并执行！</span><br></pre></td></tr></table></figure><h3 id="四-宏命令的代码实现"><a href="#四-宏命令的代码实现" class="headerlink" title="四. 宏命令的代码实现"></a>四. 宏命令的代码实现</h3><p>宏命令，就是又多条命令组成一个命令，是一个命令的组合。实现如下</p><h4 id="1-新增宏命令抽象定义IMacroCommand"><a href="#1-新增宏命令抽象定义IMacroCommand" class="headerlink" title="1. 新增宏命令抽象定义IMacroCommand"></a>1. 新增宏命令抽象定义IMacroCommand</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.macro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.ICommand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMacroCommand</span> <span class="keyword">extends</span> <span class="title">ICommand</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ICommand command)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ICommand command)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-宏命令具体实现MacroCommandImpl"><a href="#2-宏命令具体实现MacroCommandImpl" class="headerlink" title="2. 宏命令具体实现MacroCommandImpl"></a>2. 宏命令具体实现MacroCommandImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.macro.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.macro.IMacroCommand;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.ICommand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacroCommandImpl</span> <span class="keyword">implements</span> <span class="title">IMacroCommand</span></span>&#123;</span><br><span class="line">    List&lt;ICommand&gt; commands = <span class="keyword">new</span> ArrayList&lt;ICommand&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.command.core.simple.ICommand#execute()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ICommand command : commands) &#123;</span><br><span class="line">            command.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.command.core.macro.IMacroCommand#add(brightloong.github.io.command.core.simple.ICommand)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ICommand command)</span> </span>&#123;</span><br><span class="line">        commands.add(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.command.core.macro.IMacroCommand#remove(brightloong.github.io.command.core.simple.ICommand)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ICommand command)</span> </span>&#123;</span><br><span class="line">        commands.remove(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Receiver新增方法"><a href="#3-Receiver新增方法" class="headerlink" title="3. Receiver新增方法"></a>3. Receiver新增方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Receiver接收到命令并执行！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大河向东流，天上的形象参北斗..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大吉大利，今晚吃鸡。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-新增命令PlayGameCommand和SingCommand"><a href="#4-新增命令PlayGameCommand和SingCommand" class="headerlink" title="4. 新增命令PlayGameCommand和SingCommand"></a>4. 新增命令PlayGameCommand和SingCommand</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.ICommand;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.Receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayGameCommand</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayGameCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.command.core.simple.ICommand#execute()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        receiver.playGame();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.ICommand;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.Receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingCommand</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.command.core.simple.ICommand#execute()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        receiver.sing();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-修改客户端Client以及输出结果展示"><a href="#5-修改客户端Client以及输出结果展示" class="headerlink" title="5. 修改客户端Client以及输出结果展示"></a>5. 修改客户端Client以及输出结果展示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.macro.IMacroCommand;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.macro.impl.MacroCommandImpl;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.impl.PlayGameCommand;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.impl.SingCommand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">        ICommand singCommand = <span class="keyword">new</span> SingCommand(receiver);</span><br><span class="line">        ICommand playGameCommand = <span class="keyword">new</span> PlayGameCommand(receiver);</span><br><span class="line">        </span><br><span class="line">        IMacroCommand macroCommand = <span class="keyword">new</span> MacroCommandImpl();</span><br><span class="line">        macroCommand.add(singCommand);</span><br><span class="line">        macroCommand.add(playGameCommand);</span><br><span class="line">        </span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">        invoker.setCommand(macroCommand);</span><br><span class="line">        </span><br><span class="line">        invoker.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令请求者Invoker发起命令！</span><br><span class="line">大河向东流，天上的形象参北斗...</span><br><span class="line">大吉大利，今晚吃鸡。</span><br></pre></td></tr></table></figure><h3 id="五-使用场景"><a href="#五-使用场景" class="headerlink" title="五. 使用场景"></a>五. 使用场景</h3><h4 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1. 应用场景"></a>1. 应用场景</h4><ul><li>使用命令模式作为”CallBack”在面向对象系统中的替代。”CallBack”讲的便是先将一个函数登记上，然后在以后调用此函数。</li><li>需要在不同的时间指定请求、将请求排队。一个命令对象和原先的请求发出者可以有不同的生命期。换言之，原先的请求发出者可能已经不在了，而命令对象本身仍然是活动的。这时命令的接收者可以是在本地，也可以在网络的另外一个地址。命令对象可以在串形化之后传送到另外一台机器上去。</li><li>系统需要支持命令的撤消(undo)。命令对象可以把状态存储起来，等到客户端需要撤销命令所产生的效果时，可以调用undo()方法，把命令所产生的效果撤销掉。命令对象还可以提供redo()方法，以供客户端在需要时，再重新实施命令效果。</li><li>如果一个系统要将系统中所有的数据更新到日志里，以便在系统崩溃时，可以根据日志里读回所有的数据更新命令，重新调用Execute()方法一条一条执行这些命令，从而恢复系统在崩溃前所做的数据更新。</li></ul><h4 id="2-具体场景"><a href="#2-具体场景" class="headerlink" title="2. 具体场景"></a>2. 具体场景</h4><ul><li><strong>Multi-level undo（多级undo操作）</strong> </li></ul><p>如果系统需要实现多级回退操作，这时如果所有用户的操作都以command对象的形式实现，系统可以简单地用stack来保存最近执行的命令，如果用户需要执行undo操作，系统只需简单地popup一个最近的 command对象然后执行它的undo()方法既可。</p><ul><li><strong>Transactional behavior（原子事务行为）</strong> </li></ul><p>借助command模式，可以简单地实现一个具有原子事务的行为。当一个事务失败时，往往需要回退到执行前的状态，可以借助command对象保存这种状态，简单地处理回退操作。</p><ul><li><strong>Progress bars（状态条）</strong></li></ul><p>假如系统需要按顺序执行一系列的命令操作，如果每个command对象都提供一个 getEstimatedDuration()方法，那么系统可以简单地评估执行状态并显示出合适的状态条。 </p><ul><li><strong>Wizards（导航）</strong> </li></ul><p>通常一个使用多个wizard页面来共同完成一个简单动作。一个自然的方法是使用一个command对象来封装wizard过程，该command对象在第一个wizard页面显示时被创建，每个wizard页面接收用户输入并设置到该command对象中，当最后一个wizard页面用户按下“Finish”按钮时，可以简单地触发一个事件调用execute()方法执行整个动作。通过这种方法，command类不包含任何跟用户界面有关的代码，可以分离用户界面与具体的处理逻辑。 </p><ul><li><strong>GUI buttons and menu items（GUI按钮与菜单条等等）</strong> </li></ul><p>Swing系统里，用户可以通过工具条按钮，菜单按钮执行命令，可以用command对象来封装命令的执行。</p><ul><li><strong>Thread pools（线程池）</strong></li></ul><p>通常一个典型的线程池实现类可能有一个名为addTask()的public方法，用来添加一项工作任务到任务队列中。该任务队列中的所有任务可以用command对象来封装，通常这些command对象会实现一个通用的接口比如java.lang.Runnable。</p><ul><li><strong>Macro recording（宏纪录）</strong></li></ul><p>可以用command对象来封装用户的一个操作，这样系统可以简单通过队列保存一系列的command对象的状态就可以记录用户的连续操作。这样通过执行队列中的command对象，就可以完成”Play back”操作了。</p><ul><li><strong>Networking</strong> </li></ul><p>通过网络发送command命令到其他机器上运行。</p><ul><li><strong>Parallel Processing（并发处理）</strong></li></ul><p>当一个调用共享某个资源并被多个线程并发处理时。</p><h3 id="六-优缺点"><a href="#六-优缺点" class="headerlink" title="六. 优缺点"></a>六. 优缺点</h3><h4 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h4><ul><li><strong>更松散的耦合</strong></li></ul><p>命令模式使得发起命令的对象——客户端，和具体实现命令的对象——接收者对象完全解耦，也就是说发起命令的对象完全不知道具体实现对象是谁，也不知道如何实现。</p><ul><li><strong>更动态的控制</strong></li></ul><p>命令模式把请求封装起来，可以动态地对它进行参数化、队列化和日志化等操作，从而使得系统更灵活。</p><ul><li><strong>很自然的复合命令</strong></li></ul><p>命令模式中的命令对象能够很容易地组合成复合命令，也就是宏命令，从而使系统操作更简单，功能更强大。</p><ul><li><strong>更好的扩展性</strong></li></ul><p>由于发起命令的对象和具体的实现完全解耦，因此扩展新的命令就很容易，只需要实现新的命令对象，然后在装配的时候，把具体的实现对象设置到命令对象中，然后就可以使用这个命令对象，已有的实现完全不用变化。</p><h4 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h4><ul><li>同样的和大部分设计模式一样，会增加系统的复杂性，这里主要指的是类的数量的增加。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.cnblogs.com/java-my-life/archive/2012/06/01/2526972.html" target="_blank" rel="noopener">http://www.cnblogs.com/java-my-life/archive/2012/06/01/2526972.html</a></li><li><a href="http://blog.csdn.net/zdsicecoco/article/details/51332440" target="_blank" rel="noopener">http://blog.csdn.net/zdsicecoco/article/details/51332440</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/command/command.jpeg&quot; alt=&quot;command&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一. 简介&quot;&gt;&lt;/a&gt;一. 简介&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;命令模式&lt;/strong&gt; ，将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对&lt;code&gt;请求排队&lt;/code&gt;或&lt;code&gt;记录请求日志&lt;/code&gt;，以及支持撤销的操作。
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——模板方法模式</title>
    <link href="https://brightloong.github.io/2018/01/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/01/09/设计模式——模板方法模式/</id>
    <published>2018-01-09T09:43:58.000Z</published>
    <updated>2018-01-10T02:33:44.527Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/templateMethod/template.jpg" alt="template"></p><blockquote><p>模板方法属于行为型模式</p></blockquote><a id="more"></a><h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h3><p><strong>模板方法模式：</strong>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该<code>算法的某些特定步骤</code>。</p><p>准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。</p><p>模板方法模式是基于集成的代码复用的模式。</p><h3 id="二-UML类图"><a href="#二-UML类图" class="headerlink" title="二. UML类图"></a>二. UML类图</h3><p><img src="https://brightloong.github.io/images/design-pattern/templateMethod/templateMethod.png" alt="UML图"></p><ul><li>AbstractTemplate(抽象模板)：<ul><li>templateMethod()：模板方法，可能实现了部分逻辑，并调用abstractMethod()方法，将其他实现延迟到子类中去实现。</li><li>abstractMethod()：抽象操作方法，子类集成并实现。</li></ul></li><li>ConcreteTemplate1(抽象模板具体实现1)：实现父类定义的一个或多个抽象方法(也可以不是抽象方法，可以是一个钩子方法，钩子方法可以让子类决定是否对算法的不同点进行挂钩)。</li><li>Client(客户端)：调用具体的模板实现</li></ul><h3 id="三-代码实现"><a href="#三-代码实现" class="headerlink" title="三. 代码实现"></a>三. 代码实现</h3><h4 id="1-AbstractTemplate抽象模板类"><a href="#1-AbstractTemplate抽象模板类" class="headerlink" title="1. AbstractTemplate抽象模板类"></a>1. AbstractTemplate抽象模板类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTemplate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMehtod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始连接，连接成功..."</span>);</span><br><span class="line">        abstracMethod();</span><br><span class="line">        System.out.println(<span class="string">"断开连接，释放资源..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstracMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-concreteTemplate1抽象模板类具体实现1"><a href="#2-concreteTemplate1抽象模板类具体实现1" class="headerlink" title="2. concreteTemplate1抽象模板类具体实现1"></a>2. concreteTemplate1抽象模板类具体实现1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteTemplate1</span> <span class="keyword">extends</span> <span class="title">AbstractTemplate</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.template.AbstractTemplate#abstracMethod()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abstracMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询用户表...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-concreteTemplate2抽象模板类具体实现2"><a href="#3-concreteTemplate2抽象模板类具体实现2" class="headerlink" title="3. concreteTemplate2抽象模板类具体实现2"></a>3. concreteTemplate2抽象模板类具体实现2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteTemplate2</span> <span class="keyword">extends</span> <span class="title">AbstractTemplate</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.template.AbstractTemplate#abstracMethod()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abstracMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询商品表..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Client客户端调用测试代码和结果"><a href="#4-Client客户端调用测试代码和结果" class="headerlink" title="4. Client客户端调用测试代码和结果"></a>4. Client客户端调用测试代码和结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractTemplate template = <span class="keyword">new</span> ConcreteTemplate1();</span><br><span class="line">        template.templateMehtod();</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">        AbstractTemplate template2 = <span class="keyword">new</span> ConcreteTemplate2();</span><br><span class="line">        template2.templateMehtod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开始连接，连接成功...</span><br><span class="line">查询用户表....</span><br><span class="line">断开连接，释放资源...</span><br><span class="line"></span><br><span class="line">开始连接，连接成功...</span><br><span class="line">查询商品表...</span><br><span class="line">断开连接，释放资源...</span><br></pre></td></tr></table></figure><h3 id="四-使用场景"><a href="#四-使用场景" class="headerlink" title="四. 使用场景"></a>四. 使用场景</h3><ul><li>某些方法中使用了相同的代码或者方法造成代码重复。</li><li>控制子类扩展，子类必须遵守一定的算法规则。</li><li>HttpServlet就是典型的应用，其中service()方法作为模板方法，而doPost()和doGet()等方法就是可以被子类实现的具体方法。</li></ul><h3 id="五-优缺点"><a href="#五-优缺点" class="headerlink" title="五. 优缺点"></a>五. 优缺点</h3><h4 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h4><ul><li>可以将公共代码行为进行提取，以达到复用的目的。</li><li>子类实现算法的某些细节，有助于算法的扩展。</li><li>通过一个父类调用子类实现的操作，通过子类扩展增加新的行为，符合“开放-封闭原则”。</li></ul><h4 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h4><ul><li>每个不同的实现都需要定义一个子类，这会导致类的个数的增加，设计更加抽象。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/templateMethod/template.jpg&quot; alt=&quot;template&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;模板方法属于行为型模式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>简介UML类图</title>
    <link href="https://brightloong.github.io/2017/10/18/%E7%AE%80%E4%BB%8BUML%E7%B1%BB%E5%9B%BE/"/>
    <id>https://brightloong.github.io/2017/10/18/简介UML类图/</id>
    <published>2017-10-18T08:56:32.000Z</published>
    <updated>2017-10-18T09:05:47.917Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/UML/title.png" alt="all"><br>UML全称<strong>Unified Modeling Language </strong>又称统一建模语言或标准建模语言。我们再学习各种框架或者设计模式之类的时候经常会看到UML类图，这里将UML类图一些基本点做一个记录。<a id="more"></a></p><blockquote><p>在文章中所涉及到的UML类图是使用<a href="https://staruml.en.softonic.com/" target="_blank" rel="noopener">starUML</a>工具创建，使用其他工具创建会有所不同。</p></blockquote><h3 id="总体印象"><a href="#总体印象" class="headerlink" title="总体印象"></a>总体印象</h3><p><img src="https://brightloong.github.io/images/UML/all.png" alt="all"></p><p>上面的UML类图基本展示了UML类图的大部分元素，以及类与类之间的关系，下面将对其一一进行解释。</p><h3 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h3><p><img src="https://brightloong.github.io/images/UML/note.png" alt="note"></p><p>UML类图注解的表示方法，如上右半部所示。</p><h3 id="类结构表示"><a href="#类结构表示" class="headerlink" title="类结构表示"></a>类结构表示</h3><p><img src="https://brightloong.github.io/images/UML/class.png" alt="class"><img src="https://brightloong.github.io/images/UML/interface.png" alt="interface"></p><p>类的表示方法如图，一般分为三层，从上到下依次为类名、属性和方法。接口表示和类的表示类似，只是在上面标明了是interface（这只是表示接口的一种方式，并且不同的工具展现方式可能不同，还有一种棒棒糖的形式，就是一个圆加一条竖线，并不常见，所以也不过多介绍），并且这里我隐藏了属性层。如果是抽象类，在使用starUML工具创建的时候类名会以斜线表示。关于类的表示有以下几点：</p><ul><li>+：public，-：private，#：protected</li><li>属性冒号后的内容表示属性的类型</li><li>方法冒号后的内容表示属性的返回值</li><li>类型说明并不是必须的</li></ul><h3 id="类关系表示"><a href="#类关系表示" class="headerlink" title="类关系表示"></a>类关系表示</h3><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p><img src="https://brightloong.github.io/images/UML/realization.png" alt="realization"></p><p>实现(Realization)，用一个带空心三角箭头的虚线来表示。用来表示接口和实现类的关系。比如：Plane(飞机)和Car(汽车)都实现了接口IVehicle(交通工具)。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p><img src="https://brightloong.github.io/images/UML/generalization.png" alt="Generalization"></p><p>继承(Generalization，也称为泛化关系)，用一个带空心三角箭头的实线来表示。表示父类与子类之间的关系。比如：Trunck(卡车)和Bus(公交车)都继承自父类Car(汽车)。</p><h4 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h4><p>关联(Association)，关联关系分为以下几种</p><ul><li>自关联：用一头带箭头的实线表示，自己指向自己</li><li>单向关联：用一头带箭头的实线表示，箭头指向被关联类</li><li>双向关联：用一条实线表示，或者使用双箭头</li></ul><p>关联关系表示类与类之间的联系，是同一层次上的关系，<strong>它不像依赖关系具有偶然性和临时性</strong>。一般情况是关联类引用被关联类作为全局变量。如下Human持有Name。</p><p>大多数的关联关系都是单向的。</p><p><img src="https://brightloong.github.io/images/UML/Association.png" alt="Association"></p><p><img src="https://brightloong.github.io/images/UML/DirectedAssociation.png" alt="DirectedAssociation"></p><h4 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h4><p><img src="https://brightloong.github.io/images/UML/aggregation.png" alt="class"></p><p>聚合(Aggregation)，用一头是空心菱形的直线表示(有些时候是一头为空心菱形，一头为箭头的实线)。聚合也是关联关系的一种，是<strong>整体和部分</strong>之间的关系，也就是has-a的关系(很多地方has-a，contains-a已经比较混乱，我理解上来看是has-a)，整体包含部分，但是部分脱离整体后依然可以单独存在。如上：Car(汽车)包含Engine(引擎)，但是Engine脱离了Car依然可以独立存在。</p><h4 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h4><p><img src="https://brightloong.github.io/images/UML/composotion.png" alt="Composition"></p><p>组合(Composition)，用一头是实心菱形的直线表示(有些时候是一头为实心菱形，一头为箭头的实线)。组合同样是一种关联关系，也同样是<strong>整体和部分之间的关系</strong>，我把它理解为contains-a的关系。<strong>和聚合的区别在于，部分脱离整体和无法单独存在，整体和部分具有相同的生命周期，整体不存在了，部分也就消失了。</strong>如上：Human(人类)包含Head(头)和Body(身体)，头和身体并不能单独存在。</p><h4 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h4><p><img src="https://brightloong.github.io/images/UML/Dependecy.png" alt="(Dependency"></p><p>依赖(Dependency)，用一头带箭头的虚线表示。表示类与类之间，一个类依赖于另一个类的定义。被依赖类的变化将会引起依赖类的变化。在java中依赖关系通常体现为，一个类使用另一个类作为局部变量，方法参数或静态方法调用，表示为use-a。如上，Engine的方法startEngine()方法使用Gasoline(汽油)作为参数，可能是调用了Gasoline中的burn()方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/UML/title.png&quot; alt=&quot;all&quot;&gt;&lt;br&gt;UML全称&lt;strong&gt;Unified Modeling Language &lt;/strong&gt;又称统一建模语言或标准建模语言。我们再学习各种框架或者设计模式之类的时候经常会看到UML类图，这里将UML类图一些基本点做一个记录。
    
    </summary>
    
      <category term="UML" scheme="https://brightloong.github.io/categories/UML/"/>
    
    
      <category term="UML" scheme="https://brightloong.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>使用树形结构保存实体</title>
    <link href="https://brightloong.github.io/2017/10/09/%E4%BD%BF%E7%94%A8%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E4%BF%9D%E5%AD%98%E5%AE%9E%E4%BD%93/"/>
    <id>https://brightloong.github.io/2017/10/09/使用树形结构保存实体/</id>
    <published>2017-10-09T02:31:07.000Z</published>
    <updated>2018-01-10T02:35:00.190Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4651321-2f5eac27cb0f0107.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tree"></p><p>之前在项目需要实现一个功能——将xml文件映射成实体，然后对映射的实体进行逻辑处理，最后保存到数据库中；由于xml结构的数据是结构化的数据，所以需要保证保存的数据具有正确的主外键关联。<a id="more"></a>如下所示，是一个需要保存到数据库的xml文件。当映射成对应的实体school和student的时候，我们需要知道“school-one”下面有哪些学生，“school-two”下面有哪些学生，这个时候想到了使用树形结构来保存实体，让实体之间依然存在关联关系。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">school-inf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">msg</span>&gt;</span>2017-10-1XX省学校信息总汇<span class="tag">&lt;/<span class="name">msg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">schools</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">school</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>school-one<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span>Rose<span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span>Jon<span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">school</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>school-two<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span>Alisa<span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">schools</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">school-inf</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="树形工具"><a href="#树形工具" class="headerlink" title="树形工具"></a>树形工具</h2><p>以下是树形工具类的实现，包含了树形节点类和树形结构类，由于代码中注释已经比较全面，所以不做过多的说明。</p><h3 id="树形节点类BeanTreeNode-java"><a href="#树形节点类BeanTreeNode-java" class="headerlink" title="树形节点类BeanTreeNode.java"></a>树形节点类BeanTreeNode.java</h3><p>每一个节点对应一个实体，节点包含了实体信息，为了保证实体之间的关联关系，需要留有父节点信息，所有的子节点信息。由此推断出，节点的主要成员有</p><ul><li>父节点信息</li><li>所有子节点信息</li><li>当前实体信息</li></ul><p>为了方便操作，我还多增加了id和pid（parent id）,以及节点类型（nodeType）。对id的相关操作我并没有添加，如果需要可以自行添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体树形结构点</span></span><br><span class="line"><span class="comment"> * BeanTreeNode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanTreeNode</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**标识id*/</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**父id标识，为了方便获取冗余出来*/</span></span><br><span class="line">    <span class="keyword">private</span> String pid;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**父节点*/</span></span><br><span class="line">    <span class="keyword">private</span> BeanTreeNode parentNode;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**节点类型*/</span></span><br><span class="line">    <span class="keyword">private</span> String nodeType;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**节点值*/</span></span><br><span class="line">    <span class="keyword">private</span> Object bean;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**子节点*/</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;BeanTreeNode&gt; childNodes;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentNode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> childNodes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanTreeNode</span><span class="params">(BeanTreeNode parentNode, String nodeType, Object bean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentNode = parentNode;</span><br><span class="line">        <span class="keyword">this</span>.nodeType = nodeType;</span><br><span class="line">        <span class="keyword">this</span>.bean = bean;</span><br><span class="line">        <span class="keyword">this</span>.childNodes = <span class="keyword">new</span> ArrayList&lt;BeanTreeNode&gt;();</span><br><span class="line">        <span class="keyword">this</span>.id = UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (parentNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.pid = parentNode.getId();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the nodeType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNodeType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nodeType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType the nodeType to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNodeType</span><span class="params">(String nodeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nodeType = nodeType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the parentNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanTreeNode <span class="title">getParentNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentNode the parentNode to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentNode</span><span class="params">(BeanTreeNode parentNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentNode = parentNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean the bean to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBean</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bean = bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the childNodes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;BeanTreeNode&gt; <span class="title">getChildNodes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> childNodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> childNodes the childNodes to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildNodes</span><span class="params">(List&lt;BeanTreeNode&gt; childNodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.childNodes = childNodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id the id to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the pid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid the pid to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(String pid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pid = pid;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否具有子节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true or false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">haveChild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !CollectionUtils.isEmpty(childNodes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树形结构类BeanTree-java"><a href="#树形结构类BeanTree-java" class="headerlink" title="树形结构类BeanTree.java"></a>树形结构类BeanTree.java</h3><p>BeanTree.java里面包含了如下的一些常用操作：</p><ul><li>返回根节点</li><li>返回最后添加节点</li><li>判断是否具有子节点</li><li>添加节点</li><li>移动节点到其他节点下</li><li>获取对应nodeType的所有节点或实体</li><li>根据实体获取节点</li><li>获取父节点</li><li>转化为map结构</li></ul><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体树形结构</span></span><br><span class="line"><span class="comment"> * BeanTree</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanTree</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**根节点*/</span></span><br><span class="line">    <span class="keyword">private</span> BeanTreeNode root;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新添加的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BeanTreeNode currentNode;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the currentNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanTreeNode <span class="title">getCurrentNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanTreeNode <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断节点是否有子节点.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 要判断的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true or false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">haveChild</span><span class="params">(BeanTreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CollectionUtils.isEmpty(node.getChildNodes());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在父节点上面添加节点，并返回天添加的节点.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentNode 父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean 要添加的bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType 节点类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回包含bean的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanTreeNode <span class="title">addNode</span><span class="params">(BeanTreeNode parentNode, Object bean, String nodeType)</span> </span>&#123;</span><br><span class="line">        BeanTreeNode node;</span><br><span class="line">        <span class="keyword">if</span> (bean == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有父节点说明为root根节点</span></span><br><span class="line">        <span class="keyword">if</span> (parentNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            node = root = <span class="keyword">new</span> BeanTreeNode(<span class="keyword">null</span>, nodeType, bean);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//创建子节点，并添加到父节点上</span></span><br><span class="line">            node = <span class="keyword">new</span> BeanTreeNode(parentNode, nodeType, bean);</span><br><span class="line">            parentNode.getChildNodes().add(node);</span><br><span class="line">        &#125;</span><br><span class="line">        currentNode = node;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将当期bean-sBean,以及sBean下的子Bean，挂到dBean下</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sBean 源Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dBean 目的父Bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeTo</span><span class="params">(Object sBean, Object dBean)</span> </span>&#123;</span><br><span class="line">        BeanTreeNode sNode = getNodeByBean(sBean);</span><br><span class="line">        BeanTreeNode dNode = getNodeByBean(dBean);</span><br><span class="line">        removeTo(sNode, dNode);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将当期node-sNode,以及sNode下的子Node，挂到dNode下</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sNode 源node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dNode 目的父node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeTo</span><span class="params">(BeanTreeNode sNode, BeanTreeNode dNode)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从当前父节点移除sNode</span></span><br><span class="line">        sNode.getParentNode().getChildNodes().remove(sNode);</span><br><span class="line">        <span class="comment">//将sNode移到dNode下</span></span><br><span class="line">        dNode.getChildNodes().add(sNode);</span><br><span class="line">        <span class="comment">//修改sNode的父Id和父节点</span></span><br><span class="line">        sNode.setPid(dNode.getId());</span><br><span class="line">        sNode.setParentNode(dNode);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取父bean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean 子bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回父bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getParentBean</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNodeByBean(bean).getParentNode().getBean();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的bean获取bean下面对应类型的子bean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean 当前bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType 节点类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 子bean的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getBeanListByBeanAndNodeType</span><span class="params">(Object bean, String nodeType)</span> </span>&#123;</span><br><span class="line">        BeanTreeNode node = getNodeByBean(bean);</span><br><span class="line">        <span class="keyword">return</span> getBeanListByNodeType(node, nodeType);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的bean获取包含bean的Node节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 当前node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean 要查找的bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> node节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanTreeNode <span class="title">getNodeByBean</span><span class="params">(BeanTreeNode node, Object bean)</span> </span>&#123;</span><br><span class="line">        BeanTreeNode resultNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.getBean().equals(bean)) &#123;</span><br><span class="line">            resultNode = node;</span><br><span class="line">            <span class="keyword">return</span> resultNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (BeanTreeNode tempNode : node.getChildNodes()) &#123;</span><br><span class="line">                resultNode = getNodeByBean(tempNode, bean);</span><br><span class="line">                <span class="keyword">if</span> (resultNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultNode;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的bean获取root节点下包含bean的Node节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean 要查找的bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> node节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanTreeNode <span class="title">getNodeByBean</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNodeByBean(root, bean);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据节点类型返回当前节点下对应节点类型的bean的list集合.</span></span><br><span class="line"><span class="comment">     * 默认如果当前节点满足类型，那么当前节点不会存在相同类型的子节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 当前节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType 节点类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getBeanListByNodeType</span><span class="params">(BeanTreeNode node, String nodeType)</span> </span>&#123;</span><br><span class="line">        List&lt;T&gt; beanList = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">        <span class="keyword">if</span> (node.getNodeType().equals(nodeType)) &#123;</span><br><span class="line">            beanList.add((T)node.getBean());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (BeanTreeNode tempNode : node.getChildNodes()) &#123;</span><br><span class="line">                beanList.addAll((Collection&lt;? extends T&gt;) getBeanListByNodeType(tempNode, nodeType));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据节点类型返回根节点下对应节点类型的bean的list集合.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType 节点类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getBeanListByNodeType</span><span class="params">(String nodeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanListByNodeType(root, nodeType);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从root节点开始获取对应nodeType的node.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType 节点类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> nodeType类型的节点集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;BeanTreeNode&gt; <span class="title">getNodeListByNodeType</span><span class="params">(String nodeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNodeListByNodeType(root, nodeType);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从node节点开始获取对应nodeType的node.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node node节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType 节点类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> nodeType类型的节点集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;BeanTreeNode&gt; <span class="title">getNodeListByNodeType</span><span class="params">(BeanTreeNode node, String nodeType)</span> </span>&#123;</span><br><span class="line">        List&lt;BeanTreeNode&gt; nodeList = <span class="keyword">new</span> ArrayList&lt;BeanTreeNode&gt;();</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nodeList;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nodeType.equals(node.getNodeType())) &#123;</span><br><span class="line">            nodeList.add(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (BeanTreeNode tempNode : node.getChildNodes()) &#123;</span><br><span class="line">                nodeList.addAll(getNodeListByNodeType(tempNode, nodeType));  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> nodeList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将树形结构转化为map.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, List&lt;Object&gt;&gt; toMap() &#123;</span><br><span class="line">        <span class="keyword">return</span> toMap(root);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对应节点及其子节点转化为map.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 树节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转化后的map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, List&lt;Object&gt;&gt; toMap(BeanTreeNode node) &#123;</span><br><span class="line">        Map&lt;String, List&lt;Object&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class="line">        toMap(node, map);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的nodeType删除对应的节点以及其所有子节点.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNodeByNodeType</span><span class="params">(String nodeType)</span> </span>&#123;</span><br><span class="line">        delNodeByNodeType(root, nodeType);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除node节点下，类型为nodeType的节点和所有子节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNodeByNodeType</span><span class="params">(BeanTreeNode node, String nodeType)</span> </span>&#123;</span><br><span class="line">        List&lt;BeanTreeNode&gt; nodeList = getNodeListByNodeType(node, nodeType);</span><br><span class="line">        <span class="keyword">for</span> (BeanTreeNode beanTreeNode : nodeList) &#123;</span><br><span class="line">            beanTreeNode.getParentNode().getChildNodes().remove(beanTreeNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从树结构里面删除bean和相关node.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNodeByBean</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">        BeanTreeNode node = getNodeByBean(bean);</span><br><span class="line">        BeanTreeNode parentNode = node.getParentNode();</span><br><span class="line">        List&lt;BeanTreeNode&gt; childNodes = parentNode.getChildNodes();</span><br><span class="line">        Iterator&lt;BeanTreeNode&gt; it = childNodes.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            BeanTreeNode beanTreeNode = it.next();</span><br><span class="line">            <span class="keyword">if</span> (node == beanTreeNode) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据class返回对应的beanList.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> beanList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;Object&gt; <span class="title">getBeanListByClass</span><span class="params">(Class&lt;T&gt; cls)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanListByClass(root, cls);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据class返回对应的beanList.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> beanList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;Object&gt; <span class="title">getBeanListByClass</span><span class="params">(BeanTreeNode node, Class&lt;T&gt; cls)</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; beanList = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        Object bean = node.getBean();</span><br><span class="line">        <span class="keyword">if</span> (cls.isAssignableFrom(bean.getClass())) &#123;</span><br><span class="line">            beanList.add(bean);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;BeanTreeNode&gt; childNodes = node.getChildNodes();</span><br><span class="line">        <span class="keyword">for</span> (BeanTreeNode beanTreeNode : childNodes) &#123;</span><br><span class="line">            beanList.addAll(getBeanListByClass(beanTreeNode, cls));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对应节点及其子节点转化为map.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 树节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 用来保存结果的map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">toMap</span><span class="params">(BeanTreeNode node, Map&lt;String, List&lt;Object&gt;&gt; map)</span> </span>&#123;</span><br><span class="line">        String key = node.getNodeType();</span><br><span class="line">        Object bean = node.getBean();</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            map.get(key).add(bean);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">            list.add(bean);</span><br><span class="line">            map.put(key, list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (BeanTreeNode tempNode : node.getChildNodes()) &#123;</span><br><span class="line">            toMap(tempNode, map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试树形工具"><a href="#测试树形工具" class="headerlink" title="测试树形工具"></a>测试树形工具</h2><p>使用上面的xml进行测试，这里就不再做xml映射，假设存在上面xml所示的所有实体，“school-one”和“school-two”以及5个student，看看能否构造出想要的结构，测试类代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolInf</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolInf</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">School</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SchoolInf schoolInf = <span class="keyword">new</span> SchoolInf(<span class="string">"2017-10-1XX省学校信息总汇"</span>);</span><br><span class="line">        School school_one = <span class="keyword">new</span> School(<span class="string">"school-one"</span>);</span><br><span class="line">        School school_two = <span class="keyword">new</span> School(<span class="string">"school-two"</span>);</span><br><span class="line">        Student Jack = <span class="keyword">new</span> Student(<span class="string">"Jack"</span>);</span><br><span class="line">        Student Rose = <span class="keyword">new</span> Student(<span class="string">"Rose"</span>);</span><br><span class="line">        Student Jon = <span class="keyword">new</span> Student(<span class="string">"Jon"</span>);</span><br><span class="line">        Student Bob = <span class="keyword">new</span> Student(<span class="string">"Bob"</span>);</span><br><span class="line">        Student Alisa = <span class="keyword">new</span> Student(<span class="string">"Alisa"</span>);</span><br><span class="line">        </span><br><span class="line">        BeanTree tree = <span class="keyword">new</span> BeanTree();</span><br><span class="line">        BeanTreeNode root = tree.addNode(<span class="keyword">null</span>, schoolInf, <span class="string">"root"</span>);</span><br><span class="line">        BeanTreeNode school_node1 = tree.addNode(root, school_one, <span class="string">"school"</span>);</span><br><span class="line">        BeanTreeNode school_node2 = tree.addNode(root, school_two, <span class="string">"school"</span>);</span><br><span class="line">        tree.addNode(school_node1, Jack, <span class="string">"root"</span>);</span><br><span class="line">        tree.addNode(school_node1, Rose, <span class="string">"root"</span>);</span><br><span class="line">        tree.addNode(school_node1, Jon, <span class="string">"root"</span>);</span><br><span class="line">        tree.addNode(school_node2, Bob, <span class="string">"root"</span>);</span><br><span class="line">        tree.addNode(school_node2, Alisa, <span class="string">"root"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过调试观察树结构变量“tree”的值如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/4651321-37255cc2797dd405.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p><p>可以看出来能够构造出正确的结构，BeanTree中其他的一些方法这里就不在一一测试了。</p><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><ul><li>2018/1/10，在BeanTree中添加更多的操作方法。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4651321-2f5eac27cb0f0107.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;tree&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前在项目需要实现一个功能——将xml文件映射成实体，然后对映射的实体进行逻辑处理，最后保存到数据库中；由于xml结构的数据是结构化的数据，所以需要保证保存的数据具有正确的主外键关联。
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="树形结构" scheme="https://brightloong.github.io/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="https://brightloong.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java项目间通过文件调用方法工具（frequest）</title>
    <link href="https://brightloong.github.io/2017/09/19/Java%E9%A1%B9%E7%9B%AE%E9%97%B4%E9%80%9A%E8%BF%87%E6%96%87%E4%BB%B6%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E5%B7%A5%E5%85%B7/"/>
    <id>https://brightloong.github.io/2017/09/19/Java项目间通过文件调用方法工具/</id>
    <published>2017-09-19T13:07:28.000Z</published>
    <updated>2017-10-09T02:33:28.412Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://travis-ci.org/BrightLoong/frequest" target="_blank" rel="noopener"><img src="https://travis-ci.org/BrightLoong/frequest.svg?branch=master" alt="Build Status"></a> <a href="http://search.maven.org/#artifactdetails%7Cio.github.brightloong%7Cfrequest%7C1.0%7Cjar" target="_blank" rel="noopener"><img src="https://img.shields.io/maven-central/v/io.github.brightloong/frequest.svg" alt="Maven Central"></a> <a href="http://www.javadoc.io/doc/io.github.brightloong/frequest" target="_blank" rel="noopener"><img src="http://www.javadoc.io/badge/io.github.brightloong/frequest.svg" alt="Javadocs"></a> <a href="http://www.apache.org/licenses/LICENSE-2.0.txt" target="_blank" rel="noopener"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="Hex.pm"></a></p><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h2><p>frequest：这是一个用JAVA编写的，可以通过文件进行方法调用请求传输的工具。</p><p>项目gitgub地址：<a href="https://github.com/BrightLoong/frequest" target="_blank" rel="noopener">https://github.com/BrightLoong/frequest</a></p><a id="more"></a><h2 id="二-背景"><a href="#二-背景" class="headerlink" title="二.背景"></a>二.背景</h2><p>之前在项目中遇到一下的需求，如图所示: 甲处要访问部署在乙处的服务serverB(因为数据库在乙处)，不过因为一些限制原因导致甲乙两地的网络不通。但是甲乙两地之间有一个文件传输的系统仅仅可以进行文件的传输交换。</p><p>基于以上的条件，考虑在甲地也搭建一个同样的服务serverA（A和B相同，并都加入对请求的处理），。但是过滤它对service层的调用，将方法调用放入文件中（也就是请求文件中），然后将文件发送到乙地对应目录（文件发送的功能并不由这两个系统负责）。serverB将解析文件的请求，调用对应方法，并将结果也存到文件中发送到甲的服务器serveA处，实现请求的响应。</p><p>这里把拦截本地方法调用，生请求文件，等待远端返回结果和远端响应文件请求并将结果生成问文件的功能抽取出来，并对这部分功能进行了提炼重构，修改了一些问题，形成了工具frquest(file-request)。</p><p><img src="https://brightloong.github.io/images/frequest-背景.png" alt="项目背景"></p><h2 id="三-具体思路"><a href="#三-具体思路" class="headerlink" title="三.具体思路"></a>三.具体思路</h2><p><img src="https://brightloong.github.io/images/frequest-思路.png" alt="实现思路"></p><p><strong>甲：本地服务，需要点去远端服务乙</strong></p><p><strong>乙：远端服务，可自己访问自己，亦可以接收甲的请求</strong></p><ul><li>甲处发起请求，调用了方法，使用aspectj对方法调用进行拦截</li><li>对拦截到的方法进行解析，记录下调用方法名，参数，类，接口等信息，并将信息放入传输bean生成json字符串，写入到文件</li><li>把生成的请求文件发送到指定目录，并等待远端返回结果</li><li>……</li><li>乙远端扫描到请求文件，开始远端方法调用</li><li>对文件进行解析，反过来转为json字符串，再转为传输Bean，从中获取方法名，参数等信息，进行一定的处理。使用反射（invok）调用方法，把得到的结果放入传输Bean中，转为json字符串放入结果文件，发送到指定目录</li><li>……</li><li>甲检测到结果文件，转为json字符串，再转为传输Bean，获取结果信息。</li></ul><h2 id="四-使用"><a href="#四-使用" class="headerlink" title="四. 使用"></a>四. 使用</h2><p>可在java项目中使用。</p><h3 id="1-引用"><a href="#1-引用" class="headerlink" title="1. 引用"></a>1. 引用</h3><ul><li>直接下载jar包，下载地址<a href="http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22frequest%22" target="_blank" rel="noopener">http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22frequest%22</a></li></ul><ul><li><p>使用maven的方式引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.brightloong<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>frequest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>注：</strong>如果是java项目需要继承aspectj环境，如果是集成了spring的web项目需要开启aspectj支持</p></blockquote><h3 id="2-配置发送接收文件的目录"><a href="#2-配置发送接收文件的目录" class="headerlink" title="2. 配置发送接收文件的目录"></a>2. 配置发送接收文件的目录</h3><p>请求端的发送目录是指拦截请求生成的请求文件，接收目录是指发送请求后等待接收的结果文件的目录。</p><p>远端的发送目录是值生成的结果文件的发送目录，接收目录是指扫描请求端的请求文件的目录。</p><p>项目中使用了xml配置的方式，格式如下。</p><blockquote><p><strong>注：本工具不负责文件的传输，所以如果想用该工具在本机做测试，可以把远端和请求端的send-path和receive-path交替配置</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">send-path</span>&gt;</span>d:\send<span class="tag">&lt;/<span class="name">send-path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">receive-path</span>&gt;</span>d:\receive<span class="tag">&lt;/<span class="name">receive-path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--远端可以配置多个config，可能会有多个请求端需要同一个远端响应,请求端配置多个也默认只取第一个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">send-path</span>&gt;</span>d:\send<span class="tag">&lt;/<span class="name">send-path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">receive-path</span>&gt;</span>d:\receive<span class="tag">&lt;/<span class="name">receive-path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configs</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-请求端（被拦截端）配置"><a href="#3-请求端（被拦截端）配置" class="headerlink" title="3. 请求端（被拦截端）配置"></a>3. 请求端（被拦截端）配置</h3><ul><li><p>同样首先需要配置收发文件目录（也就是上面说的xml）</p></li><li><p>如果是简单的java项目可使用下面的方式启动。</p><ul><li>继承<code>ServiceProxyInterceptor</code>并且实现<code>serviceAroundImpl()</code>方法</li><li>在实现方法类调用父类的serviceAround()</li><li>标注上<code>@Around</code>注解</li><li>在Around里面加入切入点，<code>PointConstants.POINT_SERVICE</code>是在工具中定义的一个切入点，也就是对具有自定义注解 <code>@ServiceProxy</code>的方法进行拦截，也可以定义自己的切入点。</li><li>启动frequest功能，如下mian()方法中前两行代码所示。</li><li>如下，如果要对say()方法进行拦截，则加上 <code>@ServiceProxy</code>注解(前提是你使用了定义的切入点<code>PointConstants.POINT_SERVICE</code>，并且要保证请求端和远端拥有相同的方法，包括方法所在的类和包)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">ServiceProxyInterceptor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Around</span>(PointConstants.POINT_SERVICE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">serviceAroundImpl</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.serviceAround(proceedingJoinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ServiceProxy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//setIsRemote(false),设置为请求端，并设置xml的目录。</span></span><br><span class="line">        NormalConfig.getInstance().setXmlConfigPath(<span class="string">"com/test/xml/config.xml"</span>).setIsRemote(<span class="keyword">false</span>);</span><br><span class="line">       <span class="comment">//开启frequest功能</span></span><br><span class="line">        StartEngine.start();</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        System.out.println(test.say(<span class="string">"hello"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-远端（相应文件请求端）配置"><a href="#4-远端（相应文件请求端）配置" class="headerlink" title="4. 远端（相应文件请求端）配置"></a>4. 远端（相应文件请求端）配置</h3><ul><li><p>同样首先需要配置收发文件目录（也就是上面说的xml）</p></li><li><p>如果是简单的java项目可使用下面的方式启动。如果是web项目，同样也是调用mian()方法中的两行代码，保证其能在合适的地方进行调用，启动功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Start</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//setIsRemote(true),设置为远端，并设置xml的目录。</span></span><br><span class="line">        NormalConfig.getInstance().setIsRemote(<span class="keyword">true</span>).setXmlConfigPath(<span class="string">"com/test/xml/config.xml"</span>);</span><br><span class="line">       <span class="comment">//开启frequest功能</span></span><br><span class="line">        StartEngine.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><p>​</p></li></ul><h3 id="5-其他配置"><a href="#5-其他配置" class="headerlink" title="5. 其他配置"></a>5. 其他配置</h3><p>下面的配置具有默认值，所以不进行配置也是可以的。</p><ul><li>sleepTime：休眠时间，单位ms，扫描文件变动的间隔时间和等待远端返回结果的每次等待时间，默认是100ms。</li><li>waitCount：请求端等待远端返回结果的次数，每次间隔时间为sleepTime，所以总共等待时间为waitCount*sleepTime(ms)。默认等待次数是300次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置休眠时间sleepTime,设置等待结果次数300次</span></span><br><span class="line"> NormalConfig.getInstance().setSleepTime(<span class="number">100</span>).setWaitCount(<span class="number">300</span>);</span><br></pre></td></tr></table></figure><h2 id="五-LICENSE"><a href="#五-LICENSE" class="headerlink" title="五.  LICENSE"></a>五.  LICENSE</h2><p>遵循Apache License 2.0</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://travis-ci.org/BrightLoong/frequest&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://travis-ci.org/BrightLoong/frequest.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://search.maven.org/#artifactdetails%7Cio.github.brightloong%7Cfrequest%7C1.0%7Cjar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/maven-central/v/io.github.brightloong/frequest.svg&quot; alt=&quot;Maven Central&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://www.javadoc.io/doc/io.github.brightloong/frequest&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;http://www.javadoc.io/badge/io.github.brightloong/frequest.svg&quot; alt=&quot;Javadocs&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0.txt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/hexpm/l/plug.svg&quot; alt=&quot;Hex.pm&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一.简介&quot;&gt;&lt;/a&gt;一.简介&lt;/h2&gt;&lt;p&gt;frequest：这是一个用JAVA编写的，可以通过文件进行方法调用请求传输的工具。&lt;/p&gt;
&lt;p&gt;项目gitgub地址：&lt;a href=&quot;https://github.com/BrightLoong/frequest&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/BrightLoong/frequest&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://brightloong.github.io/tags/java/"/>
    
      <category term="frequest" scheme="https://brightloong.github.io/tags/frequest/"/>
    
  </entry>
  
  <entry>
    <title>数组-&gt;JSON字符串-&gt;数组过程中的问题</title>
    <link href="https://brightloong.github.io/2017/09/03/%E6%95%B0%E7%BB%84-JSON%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%95%B0%E7%BB%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://brightloong.github.io/2017/09/03/数组-JSON字符串-数组过程中的问题/</id>
    <published>2017-09-03T10:07:28.000Z</published>
    <updated>2017-10-09T02:33:43.250Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/json.jpg" alt="json"></p><p>之前在使用 <code>alibaba的fastjson</code>做数组的相关转换操作的时候遇到一些问题，这里把遇到的问题以及如何解决的记录如下。<a id="more"></a></p><h2 id="一-转换过程中的问题"><a href="#一-转换过程中的问题" class="headerlink" title="一. 转换过程中的问题"></a>一. 转换过程中的问题</h2><p>话不多说，先上代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个String数组</span></span><br><span class="line">        String[][] stringArray = <span class="keyword">new</span> String[][]&#123;&#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>&#125;,&#123;<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>&#125;&#125;;</span><br><span class="line">        <span class="comment">//使用fastjson转为json字符串</span></span><br><span class="line">        String jsonString = JSON.toJSONString(stringArray);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析json字符串后输出class发现是jsonArray的。</span></span><br><span class="line">        Object array = JSON.parse(jsonString);</span><br><span class="line">        System.out.println(array.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Before class:class [[Ljava.lang.String;</span><br><span class="line">[["1","2","3"],["4","5","6"]]</span><br><span class="line">After class:class com.alibaba.fastjson.JSONArray</span><br></pre></td></tr></table></figure><p>遇到的问题如上，把一个数组转为json字符串后，再使用用JSON.parse()转换回来，获取到的class类型却是JSONArray的。</p><p>当然你也可以用很简单的办法把他给转换成需要的String二维数组。不过我的需求是：</p><ol><li>只知道是个数组，知道到数组的原始Class类型(如果是<code>String[][]</code>知道是<code>String.class</code>)</li><li>不知道是几维数组，也不知道最开始传入的数组的长度</li><li>在拿到从Json字符串转换回来的object的时候，必须要使用原始类型(比如是<code>String[][]</code>,那么转换回来的object，使用<code>object.getClass()</code>应该得到<code>[[Ljava.lang.String</code>)，否则无法使用。</li></ol><p>为了解决上述问题，在网上查阅各种资料无果，最后突然想到查询<code>数组的反射</code>，找到了<code>java.lang.reflect.Array</code>这个包，下面对这个包里面的一些使用做一个简单的介绍。</p><h2 id="二-关于java-lang-reflect-Array"><a href="#二-关于java-lang-reflect-Array" class="headerlink" title="二. 关于java.lang.reflect.Array"></a>二. 关于java.lang.reflect.Array</h2><p>同样先上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一维数组.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls 数组基本类型Class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 创建数组长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 创建的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">creatOneDimArray</span><span class="params">(Class cls, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(cls, length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建多维数组.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls 数组基本类型Class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dims 维度信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 创建的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">creatMultiDimsArray</span><span class="params">(Class cls, <span class="keyword">int</span>[] dims)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(cls, dims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数组的长度和class信息.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 使用Array.newInstance()创建的array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 长度和class信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getArrayInfo</span><span class="params">(Object array)</span> </span>&#123;</span><br><span class="line">        Class cls = array.getClass();</span><br><span class="line">        <span class="comment">//只会返回第一维度的长度，比如String[1][2][3]返回1，String[3][4]返回3</span></span><br><span class="line">        <span class="keyword">int</span> length = Array.getLength(array);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CLASS:"</span> + cls + <span class="string">"-----"</span> + <span class="string">"LENGTH:"</span> + length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建长度为10的一维String数组</span></span><br><span class="line">        Object oneArray = creatOneDimArray(String.class, <span class="number">10</span>);</span><br><span class="line">        System.out.println(getArrayInfo(oneArray));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个[2,3,4]的二维String数组</span></span><br><span class="line">        <span class="keyword">int</span>[] dims = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        Object threeArray = creatMultiDimsArray(String.class,dims);</span><br><span class="line">        System.out.println(getArrayInfo(threeArray));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//**************************</span></span><br><span class="line">        <span class="comment">//*      数组赋值操作      *</span></span><br><span class="line">        <span class="comment">//**************************</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//---------1.强制转换赋值</span></span><br><span class="line">        ((String[])oneArray)[<span class="number">1</span>] = <span class="string">"hello"</span>;</span><br><span class="line">        ((String[])oneArray)[<span class="number">9</span>] = <span class="string">" world"</span>;</span><br><span class="line">        System.out.println(((String[])oneArray)[<span class="number">1</span>] + ((String[])oneArray)[<span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line">        ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">2</span>][<span class="number">3</span>] = <span class="string">"hello"</span>;</span><br><span class="line">        ((String[][][])threeArray)[<span class="number">0</span>][<span class="number">1</span>][<span class="number">3</span>] = <span class="string">" java"</span>;</span><br><span class="line">        System.out.println(((String[][][])threeArray)[<span class="number">1</span>][<span class="number">2</span>][<span class="number">3</span>] + ((String[][][])threeArray)[<span class="number">0</span>][<span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//--------2.使用Array.set()进行赋值操作</span></span><br><span class="line">        <span class="comment">//使用Array.get()可以获取到下一维的值，比如三维的获取到二维</span></span><br><span class="line">        <span class="comment">//获取三维中index=1的二维数组，Strign[1][][]。</span></span><br><span class="line">        Object two = Array.get(threeArray,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//从输出可以看到获取到的是一个二维数组</span></span><br><span class="line">        System.out.println(<span class="string">"CLASS:"</span> + two.getClass());</span><br><span class="line">        <span class="comment">//对String[1][0][]赋值</span></span><br><span class="line">        Array.set(two,<span class="number">0</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"this"</span>,<span class="string">" is"</span>,<span class="string">" a"</span>,<span class="string">" test"</span>&#125;);</span><br><span class="line">        System.out.println(((String[][][])threeArray)[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] + ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">                + ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">0</span>][<span class="number">2</span>] + ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">0</span>][<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再获取一维String[1][1][]</span></span><br><span class="line">        Object one = Array.get(two,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"CLASS:"</span> + one.getClass());</span><br><span class="line"></span><br><span class="line">        Array.set(one,<span class="number">0</span>,<span class="string">"my"</span>);</span><br><span class="line">        Array.set(one,<span class="number">1</span>,<span class="string">" name"</span>);</span><br><span class="line">        Array.set(one,<span class="number">2</span>,<span class="string">" is"</span>);</span><br><span class="line">        Array.set(one,<span class="number">3</span>,<span class="string">" brightloong"</span>);</span><br><span class="line">        System.out.println(((String[][][])threeArray)[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] + ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">                + ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">1</span>][<span class="number">2</span>] + ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CLASS:class [Ljava.lang.String;-----LENGTH:10</span><br><span class="line">CLASS:class [[[Ljava.lang.String;-----LENGTH:2</span><br><span class="line">hello world</span><br><span class="line">hello java</span><br><span class="line">CLASS:class [[Ljava.lang.String;</span><br><span class="line">this is a test</span><br><span class="line">CLASS:class [Ljava.lang.String;</span><br><span class="line">my name is brightloong</span><br></pre></td></tr></table></figure><p>这里已经在上述代码中做了大部分的注释，这里也不在详细介绍，主要说一下几个方法的作用。</p><ul><li><code>Array.newInstance(Class&lt;?&gt; componentType, int length)</code>和<code>Array.newInstance(Class&lt;?&gt; componentType, int... dimensions)</code>第一个用于创建传入类型的长度为length的一维数组，第二个可以用于创建传入类型的多维数组，维度和长度由传入的第二个参数决定。</li><li><code>Array.get(Object array, int index)</code>用于获取传入的数组array的index下的内容。</li><li><code>Array.set(Object array, int index, Object value)</code>用于对传入的数组array的index进行赋值，赋值为value，具体使用见上述的代码。</li></ul><h2 id="三-如何解决转换问题"><a href="#三-如何解决转换问题" class="headerlink" title="三. 如何解决转换问题"></a>三. 如何解决转换问题</h2><p>在具备了以上的了解后，再来解决所遇到的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonArrayToArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个String数组</span></span><br><span class="line">        String[][] stringArray = <span class="keyword">new</span> String[][]&#123;&#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>&#125;,&#123;<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>&#125;&#125;;</span><br><span class="line">        <span class="comment">//使用fastjson转为json字符串</span></span><br><span class="line">        String jsonString = JSON.toJSONString(stringArray);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析json字符串后输出class发现是jsonArray的。</span></span><br><span class="line">        Object array = JSON.parse(jsonString);</span><br><span class="line">        System.out.println(array.getClass());</span><br><span class="line"></span><br><span class="line">        Object realArray = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            realArray = getArrayInstanceByClassAndArg(String.class, array);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        parseJsonArray(array, realArray);</span><br><span class="line">        System.out.println(realArray.getClass());</span><br><span class="line">        System.out.println(realArray.getClass().equals(String[][].class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析jsonArray还原为最开始的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o 解析后的类型是jsonArray的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 实际要组装的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">parseJsonArray</span><span class="params">(Object o, Object array)</span> </span>&#123;</span><br><span class="line">        parseJsonArray(o, array, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用递归调用，解析jsonArray还原为最开始的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o 解析后的类型是jsonArray的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 实际要组装的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastArray 上一个array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">parseJsonArray</span><span class="params">(Object o, Object array, Object lastArray, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        JSONArray tempArray;</span><br><span class="line">        <span class="comment">//如果class不是JSONArray，使用Array.set()赋值</span></span><br><span class="line">        <span class="keyword">if</span> (!o.getClass().equals(JSONArray.class)) &#123;</span><br><span class="line">            Array.set(lastArray,index , o);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是JSONArray,继续继续循环递归调用</span></span><br><span class="line">        tempArray = (JSONArray)o;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tempArray.size(); i++) &#123;</span><br><span class="line">            Object arrayTemp = Array.get(array, i);</span><br><span class="line">            parseJsonArray(tempArray.get(i), arrayTemp, array, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据class和传入的解析后的类型是jsonArray的参数，获取对应维度和大小的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls Class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> argValue  解析后的类型是jsonArray的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">getArrayInstanceByClassAndArg</span><span class="params">(Class cls, Object argValue)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Object temp = argValue;</span><br><span class="line">        JSONArray tempArray;</span><br><span class="line">        List&lt;Integer&gt; dimsInf = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//获取jsonArray对应的数组维度和长度</span></span><br><span class="line">        <span class="keyword">while</span> (temp.getClass().equals(JSONArray.class)) &#123;</span><br><span class="line">            tempArray = (JSONArray)temp;</span><br><span class="line">            dimsInf.add(tempArray.size());</span><br><span class="line">            temp = tempArray.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dims = <span class="keyword">new</span> <span class="keyword">int</span>[dimsInf.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimsInf.size(); i++) &#123;</span><br><span class="line">            dims[i] = dimsInf.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回对应的数组</span></span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(cls, dims);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[["1","2","3"],["4","5","6"]]</span><br><span class="line">class com.alibaba.fastjson.JSONArray</span><br><span class="line">class [[Ljava.lang.String;</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>可以看到最后被将转换后的Class为JSONArray的结果在转换为最初的数组类型，<code>String[][]</code>，由最后<code>realArray.getClass().equals(String[][].class)</code>返回结果<code>true</code>也可以得到确实转换正确了。具体的解析方法可以看上面的parseJsonArray()方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/json.jpg&quot; alt=&quot;json&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前在使用 &lt;code&gt;alibaba的fastjson&lt;/code&gt;做数组的相关转换操作的时候遇到一些问题，这里把遇到的问题以及如何解决的记录如下。
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://brightloong.github.io/tags/java/"/>
    
      <category term="JSONArray转数组" scheme="https://brightloong.github.io/tags/JSONArray%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Apache Commons FileUpload</title>
    <link href="https://brightloong.github.io/2017/07/24/Apache-Commons-FileUpload/"/>
    <id>https://brightloong.github.io/2017/07/24/Apache-Commons-FileUpload/</id>
    <published>2017-07-24T02:44:54.000Z</published>
    <updated>2017-10-09T02:33:56.199Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/upload.jpg" alt="文件上传"><br>Apache Commons FileUpload是用于解析上传文件的包。这里将其一些简单的特性和使用进行一个大概的介绍。<a id="more"></a></p><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h2><p>用于解析上传的文件，”Form-based File Upload in HTML”。也就是说,如果使用POST方法提交HTTP请求,并且使用内容类型<strong><em><code>“multipart / form-data”</code></em></strong>,则FileUpload可以解析该请求。</p><h2 id="二-简单使用"><a href="#二-简单使用" class="headerlink" title="二.简单使用"></a>二.简单使用</h2><h3 id="1-满足的条件"><a href="#1-满足的条件" class="headerlink" title="1.满足的条件"></a>1.满足的条件</h3><ul><li>form表单使用POST请求,并且form表单的内容格式要定义成multipart/form-data格式</li><li><p>form表单内，要添加空间<code>&lt;input type=&quot;file&quot; name=&quot;&quot;&gt;</code>或者其他的比如：Uploadify插件</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">action</span>=<span class="string">"fup.cgi"</span>&gt;</span></span><br><span class="line">  File to upload: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upfile"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  Notes about the file: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"note"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Press"</span>&gt;</span> to upload the file!</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-具体使用"><a href="#2-具体使用" class="headerlink" title="2.具体使用"></a>2.具体使用</h3></li><li>使用前判断是否有上传文件的请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check that we have a file upload request</span></span><br><span class="line"><span class="keyword">boolean</span> isMultipart = ServletFileUpload.isMultipartContent(request);</span><br></pre></td></tr></table></figure><ul><li>简单的例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a factory for disk-based file items</span></span><br><span class="line">DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure a repository (to ensure a secure temp location is used)，默认会放在System.getProperty("java.io.tmpdir")</span></span><br><span class="line">ServletContext servletContext = <span class="keyword">this</span>.getServletConfig().getServletContext();</span><br><span class="line">File repository = (File) servletContext.getAttribute(<span class="string">"javax.servlet.context.tempdir"</span>);</span><br><span class="line">factory.setRepository(repository);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new file upload handler</span></span><br><span class="line">ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse the request</span></span><br><span class="line">List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br></pre></td></tr></table></figure><ul><li>加入一些控制的例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a factory for disk-based file items</span></span><br><span class="line">DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set factory constraints</span></span><br><span class="line"><span class="comment">//默认为10k，小于这个值的会放在内容中，否则放在设置的disk路径下</span></span><br><span class="line">factory.setSizeThreshold(yourMaxMemorySize);</span><br><span class="line">factory.setRepository(yourTempDirectory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new file upload handler</span></span><br><span class="line">ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set overall request size constraint，最大上传文件</span></span><br><span class="line">upload.setSizeMax(yourMaxRequestSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse the request</span></span><br><span class="line">List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br></pre></td></tr></table></figure><p>也可以一并配置多个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a factory for disk-based file items</span></span><br><span class="line">DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory(yourMaxMemorySize, yourTempDirectory);</span><br></pre></td></tr></table></figure><ul><li>获取上传的文件信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Process a file upload</span></span><br><span class="line"><span class="keyword">if</span> (!item.isFormField()) &#123;</span><br><span class="line">    String fieldName = item.getFieldName();</span><br><span class="line">    String fileName = item.getName();</span><br><span class="line">    String contentType = item.getContentType();</span><br><span class="line">    <span class="keyword">boolean</span> isInMemory = item.isInMemory();</span><br><span class="line">    <span class="keyword">long</span> sizeInBytes = item.getSize();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>保存文件前获取文件的一些方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Process a file upload</span></span><br><span class="line"><span class="keyword">if</span> (writeToFile) &#123;</span><br><span class="line">    File uploadedFile = <span class="keyword">new</span> File(...);</span><br><span class="line">    item.write(uploadedFile);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    InputStream uploadedStream = item.getInputStream();</span><br><span class="line">    ...</span><br><span class="line">    uploadedStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OR</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Process a file upload in memory</span></span><br><span class="line"><span class="keyword">byte</span>[] data = item.get();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="三-清理文件"><a href="#三-清理文件" class="headerlink" title="三.清理文件"></a>三.清理文件</h2><p>仅仅适用于DiskFileItem,也就是说在上传前，文件被写入了临时文件，如果不再使用这些临时文件，则需要删除这些临时文件。DiskFileItemFactory有一个属性FileCleaningTracker，设置这个属性可以用来追踪删除临时文件。当这个临时文件不再被使用时将会被立即删除，更精确的说是这个文件对象被垃圾收集器回收时，FileCleaningTracker将启动收割者线程(reaper thread)自动删除这个临时文件。 为了确保这个<br>后台线程在它不再被需要时被停止，在 servlet 环境里，我们通过一个名叫 FileCleanerCleanup 的 s<br>ervlet 上下文监听器，在web应用关闭时调用FileCleaningTracker.exitWhenFinished()来终止收割机线<br>程。在servlet环境中，使用 <a href="http://commons.apache.org/proper/commons-fileupload/apidocs/org/apache/commons/fileupload/servlet/FileCleanerCleanup.html" target="_blank" rel="noopener">FileCleanerCleanup</a>,FileCleanerCleanup提供了FileCleaningTracker的一个实例，要让FileCleanerCleanup监听器工作，你需要在 web.xml 增加如下代码：。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">      org.apache.commons.fileupload.servlet.FileCleanerCleanup</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在使用FileCleanerCleanup,应该像下面这样创建DiskFileItemFactory<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DiskFileItemFactory <span class="title">newDiskFileItemFactory</span><span class="params">(ServletContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                         File repository)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//FileCleaningTracker类，这个类用于跟踪要删除的文件</span></span><br><span class="line">    FileCleaningTracker fileCleaningTracker</span><br><span class="line">        = FileCleanerCleanup.getFileCleaningTracker(context);</span><br><span class="line">    DiskFileItemFactory factory</span><br><span class="line">        = <span class="keyword">new</span> DiskFileItemFactory(DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD,</span><br><span class="line">                                  repository);</span><br><span class="line">    factory.setFileCleaningTracker(fileCleaningTracker);</span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="四-上传进度"><a href="#四-上传进度" class="headerlink" title="四.上传进度"></a>四.上传进度</h2><p>下面是一个创建进度监听的一个例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Create a progress listener</span></span><br><span class="line">ProgressListener progressListener = <span class="keyword">new</span> ProgressListener()&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">long</span> pBytesRead, <span class="keyword">long</span> pContentLength, <span class="keyword">int</span> pItems)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"We are currently reading item "</span> + pItems);</span><br><span class="line">       <span class="keyword">if</span> (pContentLength == -<span class="number">1</span>) &#123;</span><br><span class="line">           System.out.println(<span class="string">"So far, "</span> + pBytesRead + <span class="string">" bytes have been read."</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">"So far, "</span> + pBytesRead + <span class="string">" of "</span> + pContentLength</span><br><span class="line">                              + <span class="string">" bytes have been read."</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">upload.setProgressListener(progressListener);</span><br></pre></td></tr></table></figure></p><p>但是这样会存在问题，有可能会被频繁的调用而造成性能问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Create a progress listener</span></span><br><span class="line">ProgressListener progressListener = <span class="keyword">new</span> ProgressListener()&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">long</span> megaBytes = -<span class="number">1</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">long</span> pBytesRead, <span class="keyword">long</span> pContentLength, <span class="keyword">int</span> pItems)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">long</span> mBytes = pBytesRead / <span class="number">1000000</span>;</span><br><span class="line">       <span class="keyword">if</span> (megaBytes == mBytes) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       megaBytes = mBytes;</span><br><span class="line">       System.out.println(<span class="string">"We are currently reading item "</span> + pItems);</span><br><span class="line">       <span class="keyword">if</span> (pContentLength == -<span class="number">1</span>) &#123;</span><br><span class="line">           System.out.println(<span class="string">"So far, "</span> + pBytesRead + <span class="string">" bytes have been read."</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">"So far, "</span> + pBytesRead + <span class="string">" of "</span> + pContentLength</span><br><span class="line">                              + <span class="string">" bytes have been read."</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>如果想在页面展示，可以自己实现一个ProgressListener接口，将进度的相关信息放在session中。通过ajax之类的进行调用。具体可以参照<a href="http://blog.csdn.net/gxp_java/article/details/9013191" target="_blank" rel="noopener">博客– Common-FileUpload带进度条上传</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/upload.jpg&quot; alt=&quot;文件上传&quot;&gt;&lt;br&gt;Apache Commons FileUpload是用于解析上传文件的包。这里将其一些简单的特性和使用进行一个大概的介绍。
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://brightloong.github.io/tags/java/"/>
    
      <category term="apache commons" scheme="https://brightloong.github.io/tags/apache-commons/"/>
    
  </entry>
  
  <entry>
    <title>Java实现一个简单的缓存</title>
    <link href="https://brightloong.github.io/2017/04/17/JAVA%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E7%BC%93%E5%AD%98/"/>
    <id>https://brightloong.github.io/2017/04/17/JAVA实现简单的缓存/</id>
    <published>2017-04-17T02:12:38.000Z</published>
    <updated>2017-10-09T02:34:09.810Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/cache.jpg" alt="cache"><br>&emsp;&emsp;缓存是在web开发中经常用到的，将程序经常使用到或调用到的对象存在内存中，或者是耗时较长但又不具有实时性的查询数据放入内存中，在一定程度上可以提高性能和效率。<a id="more"></a>下面我实现了一个简单的缓存，步骤如下。</p><h2 id="创建缓存对象EntityCache-java"><a href="#创建缓存对象EntityCache-java" class="headerlink" title="创建缓存对象EntityCache.java"></a>创建缓存对象EntityCache.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityCache</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  Object datas;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置数据失效时间,为0表示永不失效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">long</span> timeOut;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最后刷新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">long</span> lastRefeshTime;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EntityCache</span><span class="params">(Object datas, <span class="keyword">long</span> timeOut, <span class="keyword">long</span> lastRefeshTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.datas = datas;</span><br><span class="line">        <span class="keyword">this</span>.timeOut = timeOut;</span><br><span class="line">        <span class="keyword">this</span>.lastRefeshTime = lastRefeshTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getDatas</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> datas;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDatas</span><span class="params">(Object datas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.datas = datas;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimeOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> timeOut;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeOut</span><span class="params">(<span class="keyword">long</span> timeOut)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.timeOut = timeOut;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLastRefeshTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastRefeshTime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastRefeshTime</span><span class="params">(<span class="keyword">long</span> lastRefeshTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastRefeshTime = lastRefeshTime;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义缓存操作接口，ICacheManager-java"><a href="#定义缓存操作接口，ICacheManager-java" class="headerlink" title="定义缓存操作接口，ICacheManager.java"></a>定义缓存操作接口，ICacheManager.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICacheManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putCache</span><span class="params">(String key, EntityCache cache)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putCache</span><span class="params">(String key, Object datas, <span class="keyword">long</span> timeOut)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对应缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">EntityCache <span class="title">getCacheByKey</span><span class="params">(String key)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对应缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">getCacheDataByKey</span><span class="params">(String key)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Map&lt;String, EntityCache&gt; <span class="title">getCacheAll</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否在缓存中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isContains</span><span class="params">(String key)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除所有缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearAll</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除对应缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearByKey</span><span class="params">(String key)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存是否超时失效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTimeOut</span><span class="params">(String key)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">getAllKeys</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现接口ICacheManager，CacheManagerImpl-java"><a href="#实现接口ICacheManager，CacheManagerImpl-java" class="headerlink" title="实现接口ICacheManager，CacheManagerImpl.java"></a>实现接口ICacheManager，CacheManagerImpl.java</h2><p>&emsp;&emsp;这里我使用了ConcurrentHashMap来保存缓存，本来以为这样就是线程安全的，其实不然，在后面的测试中会发现它并不是线程安全的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheManagerImpl</span> <span class="keyword">implements</span> <span class="title">ICacheManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, EntityCache&gt; caches = <span class="keyword">new</span> ConcurrentHashMap&lt;String, EntityCache&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putCache</span><span class="params">(String key, EntityCache cache)</span> </span>&#123;</span><br><span class="line">        caches.put(key, cache);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cache</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putCache</span><span class="params">(String key, Object datas, <span class="keyword">long</span> timeOut)</span> </span>&#123;</span><br><span class="line">        timeOut = timeOut &gt; <span class="number">0</span> ? timeOut : <span class="number">0L</span>;</span><br><span class="line">        putCache(key, <span class="keyword">new</span> EntityCache(datas, timeOut, System.currentTimeMillis()));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对应缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EntityCache <span class="title">getCacheByKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isContains(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> caches.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对应缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCacheDataByKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isContains(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> caches.get(key).getDatas();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, EntityCache&gt; <span class="title">getCacheAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> caches;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否在缓存中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isContains</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> caches.containsKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除所有缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        caches.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除对应缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearByKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isContains(key)) &#123;</span><br><span class="line">            caches.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存是否超时失效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTimeOut</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!caches.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        EntityCache cache = caches.get(key);</span><br><span class="line">        <span class="keyword">long</span> timeOut = cache.getTimeOut();</span><br><span class="line">        <span class="keyword">long</span> lastRefreshTime = cache.getLastRefeshTime();</span><br><span class="line">        <span class="keyword">if</span> (timeOut == <span class="number">0</span> || System.currentTimeMillis() - lastRefreshTime &gt;= timeOut) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt;  <span class="title">getAllKeys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> caches.keySet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="CacheListener-java-监听失效数据并移除。"><a href="#CacheListener-java-监听失效数据并移除。" class="headerlink" title="CacheListener.java,监听失效数据并移除。"></a>CacheListener.java,监听失效数据并移除。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheListener</span></span>&#123;</span><br><span class="line">    Logger logger = Logger.getLogger(<span class="string">"cacheLog"</span>);</span><br><span class="line">    <span class="keyword">private</span> CacheManagerImpl cacheManagerImpl;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CacheListener</span><span class="params">(CacheManagerImpl cacheManagerImpl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cacheManagerImpl = cacheManagerImpl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startListen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(String key : cacheManagerImpl.getAllKeys()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cacheManagerImpl.isTimeOut(key)) &#123;</span><br><span class="line">                         cacheManagerImpl.clearByKey(key);</span><br><span class="line">                         logger.info(key + <span class="string">"缓存被清除"</span>);</span><br><span class="line">                     &#125;</span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;.start();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类TestCache-java"><a href="#测试类TestCache-java" class="headerlink" title="测试类TestCache.java"></a>测试类TestCache.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCache</span> </span>&#123;</span><br><span class="line">    Logger logger = Logger.getLogger(<span class="string">"cacheLog"</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试缓存和缓存失效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CacheManagerImpl cacheManagerImpl = <span class="keyword">new</span> CacheManagerImpl();</span><br><span class="line">        cacheManagerImpl.putCache(<span class="string">"test"</span>, <span class="string">"test"</span>, <span class="number">10</span> * <span class="number">1000L</span>);</span><br><span class="line">        cacheManagerImpl.putCache(<span class="string">"myTest"</span>, <span class="string">"myTest"</span>, <span class="number">15</span> * <span class="number">1000L</span>);</span><br><span class="line">        CacheListener cacheListener = <span class="keyword">new</span> CacheListener(cacheManagerImpl);</span><br><span class="line">        cacheListener.startListen();</span><br><span class="line">        logger.info(<span class="string">"test:"</span> + cacheManagerImpl.getCacheByKey(<span class="string">"test"</span>).getDatas());</span><br><span class="line">        logger.info(<span class="string">"myTest:"</span> + cacheManagerImpl.getCacheByKey(<span class="string">"myTest"</span>).getDatas());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">"test:"</span> + cacheManagerImpl.getCacheByKey(<span class="string">"test"</span>));</span><br><span class="line">        logger.info(<span class="string">"myTest:"</span> + cacheManagerImpl.getCacheByKey(<span class="string">"myTest"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试线程安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThredSafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String key = <span class="string">"thread"</span>;</span><br><span class="line">        <span class="keyword">final</span> CacheManagerImpl cacheManagerImpl = <span class="keyword">new</span> CacheManagerImpl();</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (!cacheManagerImpl.isContains(key)) &#123;</span><br><span class="line">                            cacheManagerImpl.putCache(key, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//因为+1和赋值操作不是原子性的，所以把它用synchronize块包起来</span></span><br><span class="line">                            <span class="keyword">synchronized</span> (cacheManagerImpl) &#123;</span><br><span class="line">                               <span class="keyword">int</span> value = (Integer) cacheManagerImpl.getCacheDataByKey(key) + <span class="number">1</span>; </span><br><span class="line">                               cacheManagerImpl.putCache(key,value , <span class="number">0</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            exec.awaitTermination(<span class="number">1</span>, TimeUnit.DAYS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;  </span><br><span class="line">        </span><br><span class="line">        logger.info(cacheManagerImpl.getCacheDataByKey(key).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>testCacheManager()输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2017-4-17 10:33:51 io.github.brightloong.cache.TestCache testCacheManager</span><br><span class="line">信息: test:test</span><br><span class="line">2017-4-17 10:33:51 io.github.brightloong.cache.TestCache testCacheManager</span><br><span class="line">信息: myTest:myTest</span><br><span class="line">2017-4-17 10:34:01 io.github.brightloong.cache.CacheListener$1 run</span><br><span class="line">信息: test缓存被清除</span><br><span class="line">2017-4-17 10:34:06 io.github.brightloong.cache.CacheListener$1 run</span><br><span class="line">信息: myTest缓存被清除</span><br><span class="line">2017-4-17 10:34:11 io.github.brightloong.cache.TestCache testCacheManager</span><br><span class="line">信息: test:null</span><br><span class="line">2017-4-17 10:34:11 io.github.brightloong.cache.TestCache testCacheManager</span><br><span class="line">信息: myTest:null</span><br></pre></td></tr></table></figure></p><p>testThredSafe()输出结果如下（选出了各种结果中的一个举例）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2017-4-17 10:35:36 io.github.brightloong.cache.TestCache testThredSafe</span><br><span class="line">信息: 96</span><br></pre></td></tr></table></figure></p><p>可以看到并不是预期的结果100，为什么呢？ConcurrentHashMap只能保证单次操作的原子性，但是当复合使用的时候，没办法保证复合操作的原子性，以下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!cacheManagerImpl.isContains(key)) &#123;</span><br><span class="line">                            cacheManagerImpl.putCache(key, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure></p><p>多线程的时候回重复更新value，设置为1，所以出现结果不是预期的100。所以办法就是在CacheManagerImpl.java中都加上synchronized，但是这样一来相当于操作都是串行，使用ConcurrentHashMap也没有什么意义，不过只是简单的缓存还是可以的。或者对测试方法中的run里面加上synchronized块也行，都是大同小异。更高效的方法我暂时也想不出来，希望大家能多多指教。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/cache.jpg&quot; alt=&quot;cache&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;缓存是在web开发中经常用到的，将程序经常使用到或调用到的对象存在内存中，或者是耗时较长但又不具有实时性的查询数据放入内存中，在一定程度上可以提高性能和效率。
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://brightloong.github.io/tags/java/"/>
    
      <category term="缓存" scheme="https://brightloong.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Java静态代理&amp;动态代理笔记</title>
    <link href="https://brightloong.github.io/2017/03/17/Java%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%AC%94%E8%AE%B0/"/>
    <id>https://brightloong.github.io/2017/03/17/Java静态代理-动态代理笔记/</id>
    <published>2017-03-17T06:02:38.000Z</published>
    <updated>2017-10-18T09:30:44.828Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/proxy.jpg" alt="java代理"><br>&emsp;&emsp;最近在学习Java反射的一些知识，看到了一些有关代理的例子，好记性不如烂笔头，所以这里将它记录下来。接下来话不多说，直接进入主题。<a id="more"></a></p><blockquote><p><strong>代理</strong>：为其他对象提供一个代理以控制对某个对象的访问。</p></blockquote><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDoSomething</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doSometing</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>被代理类的实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sing</span> <span class="keyword">implements</span> <span class="title">IDoSomething</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doSometing</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Sing a song"</span>);</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代理类的实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingProxy</span> <span class="keyword">implements</span> <span class="title">IDoSomething</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IDoSomething sing = <span class="keyword">new</span> Sing();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doSometing</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Befor singing "</span>);</span><br><span class="line">        <span class="keyword">int</span> result = sing.doSometing(num);</span><br><span class="line">        System.out.println(<span class="string">"After singing"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyDemo</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sing</span><span class="params">(IDoSomething sing, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> sing.doSometing(num);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         System.out.println(ProxyDemo.sing(<span class="keyword">new</span> SingProxy(), <span class="number">5</span>));</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Befor singing </span><br><span class="line">Sing a song</span><br><span class="line">After singing</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;以上就是简单的静态代理，不在过多的介绍，下面是动态代理。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>&emsp;&emsp;Java的动态代理可以动态的创建代理并动态的处理对所代理方法的调用。动态代理有两种实现方法，一种是使用JDK自带的，一种是使用Cglib实现。</p><h3 id="实现JDK自带的动态代理"><a href="#实现JDK自带的动态代理" class="headerlink" title="实现JDK自带的动态代理"></a>实现JDK自带的动态代理</h3><p>&emsp;&emsp;实现JDK自带的动态代理，关键是实现InvocationHandler，同时它要求被代理对象必须有接口。下面是实现的代码，我加上了必要的注释。</p><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProxyClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doSomething</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>被代理类的实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyClassImpl</span> <span class="keyword">implements</span> <span class="title">IProxyClass</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doSomething</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法执行中....."</span>);</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>实现InvocationHandler接口<br>  &emsp;&emsp;这里我实现了InvocationHandler接口，并手动生成了代理类，保存到了电脑F盘上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Object proxied;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxied 被代理对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicProxyHandler</span><span class="params">(Object proxied)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.proxied = proxied;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(proxied.getClass().getClassLoader(), proxied.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy 代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 代理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 方法参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123; </span><br><span class="line">        <span class="comment">//将代理对象生成字节码到F盘上，方便反编译出java文件查看，实际动态代理是不需要自己生成的</span></span><br><span class="line">        addClassToDisk(proxy.getClass().getName(), ProxyClassImpl.class,<span class="string">"F:/$Proxy0.class"</span>);</span><br><span class="line">        System.out.println(<span class="string">"method:"</span>+method.getName());  </span><br><span class="line">        System.out.println(<span class="string">"args:"</span>+args[<span class="number">0</span>].getClass().getName());  </span><br><span class="line">        System.out.println(<span class="string">"Before invoke method..."</span>);  </span><br><span class="line">        Object object=method.invoke(proxied, args);</span><br><span class="line">        System.out.println(<span class="string">"After invoke method..."</span>);  </span><br><span class="line">        <span class="keyword">return</span> object;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于生产代理对象的字节码，并将其保存到硬盘上</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addClassToDisk</span><span class="params">(String className, Class&lt;?&gt; cl, String path)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用于生产代理对象的字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[] classFile = ProxyGenerator.generateProxyClass(className, cl.getInterfaces());</span><br><span class="line">        FileOutputStream out = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(path);  </span><br><span class="line">            <span class="comment">//将代理对象的class字节码写到硬盘上</span></span><br><span class="line">            out.write(classFile);  </span><br><span class="line">            out.flush();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                out.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProxyDemo</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SecurityException, NoSuchMethodException </span>&#123;</span><br><span class="line">          ProxyClassImpl c = <span class="keyword">new</span> ProxyClassImpl();</span><br><span class="line">          DynamicProxyHandler proxyHandler = <span class="keyword">new</span> DynamicProxyHandler(c);</span><br><span class="line">          IProxyClass proxyClass = (IProxyClass)proxyHandler.newProxyInstance();</span><br><span class="line">          System.out.println(proxyClass.getClass().getName());</span><br><span class="line">          System.out.println(proxyClass.doSomething(<span class="number">5</span>));</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com.sun.proxy.$Proxy0</span><br><span class="line">method:doSomething</span><br><span class="line">args:java.lang.Integer</span><br><span class="line">Before invoke method...</span><br><span class="line">方法执行中.....</span><br><span class="line">After invoke method...</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从结果我们可以看到(IProxyClass)proxyHandler.newProxyInstance();实际返回的是<code>com.sun.proxy.$Proxy0</code>，我们把生成的<code>$Proxy0.class</code>文件，使用<a href="http://pan.baidu.com/s/1nv7D99J" target="_blank" rel="noopener">jad.exe</a>进行反编译，使用命令（要求文件和jad.exe在同一个目录下，或者你可以吧jad加到环境变量中去）：</p><blockquote><p>  jad -p java $Proxy0.class</p></blockquote><p>得到的$Proxy0.java如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">IProxyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationhandler)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">super</span>(invocationhandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                obj</span><br><span class="line">            &#125;)).booleanValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Error _ex) &#123; &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable throwable)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                Integer.valueOf(i)</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Error _ex) &#123; &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable throwable)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ((Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, <span class="keyword">null</span>)).intValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Error _ex) &#123; &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable throwable)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Error _ex) &#123; &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable throwable)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                Class.forName(<span class="string">"java.lang.Object"</span>)</span><br><span class="line">            &#125;);</span><br><span class="line">            m3 = Class.forName(<span class="string">"io.github.brightloong.proxy.IProxyClass"</span>).getMethod(<span class="string">"doSomething"</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                Integer.TYPE</span><br><span class="line">            &#125;);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(NoSuchMethodException nosuchmethodexception)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(nosuchmethodexception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(ClassNotFoundException classnotfoundexception)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(classnotfoundexception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到实际调用的是25行的doSometing()方法。如果你想了解更加具体的JDK动态代理的实现原理可以访问Rejoy的博文<a href="http://rejoy.iteye.com/blog/1627405" target="_blank" rel="noopener">JDK动态代理实现原理</a>。</p><h3 id="使用Cglib实现动态代理"><a href="#使用Cglib实现动态代理" class="headerlink" title="使用Cglib实现动态代理"></a>使用Cglib实现动态代理</h3><p>&emsp;&emsp;<a href="http://pan.baidu.com/s/1o8sc3cm" target="_blank" rel="noopener">Cglib</a>不是jdk自带的jar包，需要下载并加入到项目中。个人觉得Cglib比使用jdk自带的实现动态代理更为先进，毕竟它不再需要接口，而且它还有其他强大的功能，大家可以自行研究。</p><ul><li>实现MethodInterceptor接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class CglibProxy implements MethodInterceptor&#123;</span><br><span class="line">    private Enhancer enhancer = new Enhancer();</span><br><span class="line">    @Override</span><br><span class="line">    /**</span><br><span class="line">     * </span><br><span class="line">     * @param o 是被代理对象</span><br><span class="line">     * @param method 调用方法的Method对象</span><br><span class="line">     * @param args 方法参数</span><br><span class="line">     * @param methodProxy</span><br><span class="line">     * @return cglib生成用来代替Method对象的一个对象，使用MethodProxy比调用JDK自身的Method直接执行方法效率会有提升</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     */</span><br><span class="line">    public Object intercept(Object o, Method method, Object[] args,</span><br><span class="line">            MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;before &quot; + methodProxy.getSuperName());  </span><br><span class="line">        System.out.println(method.getName());  </span><br><span class="line">        Object o1 = methodProxy.invokeSuper(o, args);  </span><br><span class="line">        //Object o2 = method.invoke(o, args); 使用这种方式会发生死循环，因为方法会被拦截</span><br><span class="line">        System.out.println(&quot;after &quot; + methodProxy.getSuperName());  </span><br><span class="line">        return o1;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public  Object newProxyInstance(Class&lt;?&gt; c) &#123;</span><br><span class="line">        //设置产生的代理对象的父类。</span><br><span class="line">        enhancer.setSuperclass(c); </span><br><span class="line">        //设置CallBack接口的实例</span><br><span class="line">        enhancer.setCallback(this);  </span><br><span class="line">        //使用默认无参数的构造函数创建目标对象 </span><br><span class="line">        return enhancer.create();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>被代理对象和测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CglibProxy cglibProxy = <span class="keyword">new</span> CglibProxy();  </span><br><span class="line">        Do o = (Do)cglibProxy.newProxyInstance(Do.class);  </span><br><span class="line">        System.out.println(o.doSomething(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Do</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doSomething</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法执行中。。。。。。"</span>);</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before CGLIB$doSomething$0</span><br><span class="line">doSomething</span><br><span class="line">方法执行中。。。。。。</span><br><span class="line">after CGLIB$doSomething$0</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>本篇笔记参考于：<br><br><a href="http://www.cnblogs.com/shijiaqi1066/p/3429691.html" target="_blank" rel="noopener">http://www.cnblogs.com/shijiaqi1066/p/3429691.html</a><br><br><a href="http://rejoy.iteye.com/blog/1627405" target="_blank" rel="noopener">http://rejoy.iteye.com/blog/1627405</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/proxy.jpg&quot; alt=&quot;java代理&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;最近在学习Java反射的一些知识，看到了一些有关代理的例子，好记性不如烂笔头，所以这里将它记录下来。接下来话不多说，直接进入主题。
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://brightloong.github.io/tags/java/"/>
    
      <category term="静态代理" scheme="https://brightloong.github.io/tags/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
      <category term="动态代理" scheme="https://brightloong.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java Web之限制用户多处登录</title>
    <link href="https://brightloong.github.io/2017/03/08/Java-Web%E4%B9%8B%E9%99%90%E5%88%B6%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%A4%9A%E5%A4%84%E7%99%BB%E5%BD%95/"/>
    <id>https://brightloong.github.io/2017/03/08/Java-Web之限制用户登录多处登录/</id>
    <published>2017-03-08T04:28:26.000Z</published>
    <updated>2017-03-09T08:57:20.798Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/user.jpg" alt="用户登录"><br>&emsp;&emsp;最近在项目中遇到一个需求，要求限制单个用户在多个终端登录（比如用户在A处登录，然后又在B处登录，此时A处就应该被挤下线）。<a id="more"></a>最开始我是想使用spring的security直接通过配置实现，简单又方便。不过很可惜的是，我所做的项目使用的是公司封装的框架，依然在使用sprign2.X。好吧，既然这个方法行不通，那我自己老老实实写代码实现吧，想想网上实现的方法应该很多吧，度娘、谷歌走一波，果断很多，不过过去过来感觉都是同一个。还有就是什么使用application啊，session什么的。最后，我还是自己动手，丰衣足食吧。首先我说一下自己的思路：</p><blockquote><p>用一个全局Map在登录的时候用来保存sessionId，Map的key为登录名，value为sessionID，因为是后来的挤掉前面的，所以不用判断，直接覆盖Map中的值就OK。<br>实现一个HttpSessionListener，在session销毁(比如session过期)的时候清除Map中对应的值。<br>实现一个Filter，用于拦截请求，判断改用当前的sessionId是否在Map中，如果不在执行退出操作。</p></blockquote><h2 id="用来保存登入用户SessionID的类"><a href="#用来保存登入用户SessionID的类" class="headerlink" title="用来保存登入用户SessionID的类"></a>用来保存登入用户SessionID的类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUserMap</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; loginUsers = <span class="keyword">new</span> ConcurrentHashMap&lt;String, String&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将用户和sessionId存入map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setLoginUsers</span><span class="params">(String loginId, String sessionId)</span> </span>&#123;</span><br><span class="line">        loginUsers.put(loginId, sessionId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取loginUsers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">getLoginUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loginUsers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据sessionId移除map中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sessionId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeUser</span><span class="params">(String sessionId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : loginUsers.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sessionId.equals(entry.getValue())) &#123;</span><br><span class="line">                loginUsers.remove(entry.getKey());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断用户是否在loginusers中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sessionId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isInLoginUsers</span><span class="params">(String loginId, String sessionId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (loginUsers.containsKey(loginId) &amp;&amp; sessionId.equals(loginUsers.get(loginId)));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在登录方法中保存sessionID"><a href="#在登录方法中保存sessionID" class="headerlink" title="在登录方法中保存sessionID"></a>在登录方法中保存sessionID</h2><p>&emsp;&emsp;这里我就不给出具体的实现了，毕竟不同的项目是不同的，我写个大概的步骤，帮助理解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//登录方法所在的地方</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(ttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;   </span><br><span class="line">            ......<span class="comment">//一系列登录的方法</span></span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">LoginUserMap.setLoginUsers(username, session.getId());<span class="comment">//保存sessionId到map中</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (LoginException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="实现HttpSessionListener"><a href="#实现HttpSessionListener" class="headerlink" title="实现HttpSessionListener"></a>实现HttpSessionListener</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Log log = LogFactory.getLog(SessionListener.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建session时候的动作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁session时候的动作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent event)</span> </span>&#123;</span><br><span class="line">        HttpSession session = event.getSession();</span><br><span class="line">        String sessionId = session.getId();</span><br><span class="line">        <span class="comment">//移除loginUsers中已经被销毁的session</span></span><br><span class="line">        LoginUserMap.removeUser(sessionId);</span><br><span class="line">        log.info(sessionId + <span class="string">"被销毁！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>io.github.brightloong.loginlimite.SessionListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Filter实现"><a href="#Filter实现" class="headerlink" title="Filter实现"></a>Filter实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginLimitFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Log log = LogFactory.getLog(LoginLimitFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁时的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterChain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">          FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest servletRequest = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse servletResponse = (HttpServletResponse) response;</span><br><span class="line">        HttpSession session = servletRequest.getSession();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取项目路径</span></span><br><span class="line">        String path = servletRequest.getContextPath();  </span><br><span class="line">        String basePath = servletRequest.getScheme()+<span class="string">"://"</span>+servletRequest.getServerName()+<span class="string">":"</span>+servletRequest.getServerPort()+path;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取用户信息，如果没获取到会抛出错误,我的是这样,代表用户还没有登录</span></span><br><span class="line">            IUser user = UserUtils.getCurrUserInfo();</span><br><span class="line">            String loginId = user.getLoginId();</span><br><span class="line">            <span class="comment">//判断当前用户的sessionId是否在loginUsers中，如果没有执行if后的操作</span></span><br><span class="line">            <span class="keyword">if</span>(!LoginUserMap.isInLoginUsers(loginId, session.getId())) &#123;</span><br><span class="line">                <span class="comment">//当前用户logout</span></span><br><span class="line">                logout();<span class="comment">//自己的logout方法</span></span><br><span class="line">               <span class="comment">//调到登录页面，并表明退出方式为挤下线</span></span><br><span class="line">               servletResponse.sendRedirect(basePath + <span class="string">"?logoutway=edge"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.debug(<span class="string">"获取当前用户信息失败，用户未登陆！"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arg0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LoginLimitFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>io.github.brightloong.loginlimite.LoginLimitFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LoginLimitFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="显示提示信息"><a href="#显示提示信息" class="headerlink" title="显示提示信息"></a>显示提示信息</h2><p>&emsp;&emsp;当用户点击的时候就会触发filter去监测，如果监测到已经登录，就会转到登录页面，这个时候要判断是否是被挤下来的，我这使用了<a href="http://layer.layui.com/" target="_blank" rel="noopener">layer</a>提示框。<br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function()&#123;</span><br><span class="line"><span class="keyword">if</span>(window.parent != window)&#123;</span><br><span class="line">window.parent.location.href=window.location.href;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(GetQueryString(<span class="string">'logoutway'</span>)) &#123;</span><br><span class="line"><span class="comment">//alert('该用户已在其他地方登录，你已下线');</span></span><br><span class="line">layer.alert(<span class="string">'该账号已在其他地方登录，您已被迫下线，如非本人操作请重新登录并及时修改密码'</span>, &#123;</span><br><span class="line">  skin: <span class="string">'layui-layer-lan'</span>, <span class="comment">//样式类名</span></span><br><span class="line">  title: <span class="string">'提示'</span></span><br><span class="line">  ,closeBtn: <span class="number">0</span></span><br><span class="line">&#125;, function()&#123;</span><br><span class="line">var url = window.location.href;</span><br><span class="line">window.location.href = url.substr(<span class="number">0</span>,url.indexOf(<span class="string">'?logoutway=edge'</span>));</span><br><span class="line">&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">GetQueryString</span><span class="params">(name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     var reg = <span class="keyword">new</span> RegExp(<span class="string">"(^|&amp;)"</span>+ name +<span class="string">"=([^&amp;]*)(&amp;|$)"</span>);</span><br><span class="line">     var r = window.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">     <span class="keyword">if</span>(r!=<span class="keyword">null</span>)<span class="keyword">return</span>  unescape(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/user.jpg&quot; alt=&quot;用户登录&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;最近在项目中遇到一个需求，要求限制单个用户在多个终端登录（比如用户在A处登录，然后又在B处登录，此时A处就应该被挤下线）。
    
    </summary>
    
      <category term="Java Web" scheme="https://brightloong.github.io/categories/Java-Web/"/>
    
    
      <category term="用户登录限制" scheme="https://brightloong.github.io/tags/%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E9%99%90%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>SSM整合&amp;单元测试集成备忘</title>
    <link href="https://brightloong.github.io/2017/03/06/SSM%E6%95%B4%E5%90%88-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E9%9B%86%E6%88%90%E5%A4%87%E5%BF%98/"/>
    <id>https://brightloong.github.io/2017/03/06/SSM整合-单元测试集成备忘/</id>
    <published>2017-03-06T02:44:54.000Z</published>
    <updated>2017-03-06T04:29:42.746Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/ssm.jpg" alt="ssm整合"><br>&emsp;&emsp;SSM框架，既是Sping + Spring MVC + Mybatis，本篇博文主要是作为本人的备忘，记录如何整合SSM框架，以及如何集成单元测试，关于每一个配置的作用大都加上了注释，至于如何搭建项目这里不在赘述（我使用的是web项目），可以自己查找相关资料。<a id="more"></a><strong><em>我使用的Spring版本是4.1.3.RELEASE，Mybatis版本是3.3.0，使用Maven进行构建。</em></strong></p><blockquote><p>注意：首先申明如下的配置是根据我的目录结构来配置的，我的目录结构如下所示：</p></blockquote><p><img src="https://brightloong.github.io/images/directory structure .jpg" alt="目录结构"> </p><h2 id="使用Maven添加相关jar包。"><a href="#使用Maven添加相关jar包。" class="headerlink" title="使用Maven添加相关jar包。"></a>使用Maven添加相关jar包。</h2><p>&emsp;&emsp;关于pom.xml的配置如下。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ssm_test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm_test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>ssm_test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.日志，slf4j规范 日志实现：log4j,logback,commin-logging 使用：slf4j + logback --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 实现slf4j接口并整合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.数据库相关依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.dao mybatis依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis自身实现的整合spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4.servelet web 相关依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 5.spring的依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1)spring核心依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring aop 相关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2)spring dao层依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3)spring web依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4)spring test依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">warSourceDirectory</span>&gt;</span>$&#123;basedir&#125;/WebRoot<span class="tag">&lt;/<span class="name">warSourceDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="SSM整合配置"><a href="#SSM整合配置" class="headerlink" title="SSM整合配置"></a>SSM整合配置</h2><p>&emsp;&emsp;为了使配置层次清楚，结构清晰，我把配置按照web、service和dao分别分为spring-web.xml、spring-service.xml和spirng-dao.xml，下面依次介绍这几个配置文件。</p><h3 id="spring-web-xm配置"><a href="#spring-web-xm配置" class="headerlink" title="spring-web.xm配置"></a>spring-web.xm配置</h3><p>&emsp;&emsp;该配置中主要是一些资源映射的相关配置。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置springMVC --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.开启springMVC注解模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简化配置：</span></span><br><span class="line"><span class="comment">1)自动注册defaultAnnotationHandlerMapping,AnnotationMethodHandlARadpter </span></span><br><span class="line"><span class="comment">2)提供一系列：数据绑定，数字和日期的format @NumberFoamat,@DataTiemFormat</span></span><br><span class="line"><span class="comment">xml,json默认读写支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2.servelt-mapping 映射路径:"/" </span></span><br><span class="line"><span class="comment">静态资源默认servlet配置 </span></span><br><span class="line"><span class="comment">1.加入对静态资源的处理：js，gif，png</span></span><br><span class="line"><span class="comment">2.允许用/做整体映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3. 配置jsp显示viewResolver--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4.扫描web相关的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.chenlong.study.web"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 获取properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"com.chenlong.study.utils.PropertyUtil"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:*.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在上述配置中最后关于获取properties的配置，我创建了一个PropertyUtil类用来获取properties文件，并读取里面的属性。PropertyUtil.java如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyUtil</span> <span class="keyword">extends</span> <span class="title">PropertyPlaceholderConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; propertyMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processProperties</span><span class="params">(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.processProperties(beanFactoryToProcess, props);</span><br><span class="line">        propertyMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Object key : props.keySet()) &#123;</span><br><span class="line">            String keyStr = key.toString();</span><br><span class="line">            String value = props.getProperty(keyStr);</span><br><span class="line">            propertyMap.put(keyStr, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//static method for accessing context properties</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> propertyMap.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="spring-service-xml配置"><a href="#spring-service-xml配置" class="headerlink" title="spring-service.xml配置"></a>spring-service.xml配置</h3><p>&emsp;&emsp;配置自动扫描，用于自动注入；并配置注解事务。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描service包下的所有注解类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.chenlong.study.service"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器，dataSource在spring-dao.xml中配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置基于注解的声明事务 </span></span><br><span class="line"><span class="comment">默认使用注解来管理事务行为--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="配置spring-dao-xml"><a href="#配置spring-dao-xml" class="headerlink" title="配置spring-dao.xml"></a>配置spring-dao.xml</h3><p>&emsp;&emsp;在配置sprign-dao.xml之前，先配置mybatis的全局文件mybatis-config.xml如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置全局属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取数据库自增主键值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用列命替换别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启驼峰命名转换 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在jdbc.properties中配置数据库信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=</span><br><span class="line">jdbc.driverClass=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.jdbcUrls=jdbc:mysql://localhost:3306/test?useUnicode\=true&amp;amp;characterEncoding\=UTF-8</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;然后配置spring-dao.xml如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置整合mybatis过程 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.配置数据库相关参数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.配置数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrls&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置连接池私有属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关闭连接后不自动提交 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--获取连接超时时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"1000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 重试次数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.配置sqlsessionfactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置mybatis全局文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描entity包使用别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.chenlong.study.entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 扫描mapper文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/chenlong/study/dao/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4.配置扫描dao接口包，动态实现dao接口，自动注入到spring容器中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注入sqlsessionfactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给出扫描Dao接口包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.chenlong.study.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h2><p>&emsp;&emsp;在完成上述配置后，配置web.xml，配置springmvc和spring的servlet<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>sh_student<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置springmvc dispatcherServlet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispacherservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispacherservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span> org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="单元测试集成"><a href="#单元测试集成" class="headerlink" title="单元测试集成"></a>单元测试集成</h2><p>&emsp;&emsp;在pom.xm文件中我们曾加入如下的jar包用来做单元测试。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4)spring test依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;下面我给出一个测试示例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整合junit和spring，让junit在启动时候加载springIOC容器</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="comment">//告诉junit spring的配置文件,需要用到的配置文件，如果是dao的话可以不用spring-service.xml</span></span><br><span class="line"><span class="meta">@ContextConfiguration</span>(&#123; <span class="string">"classpath:spring-dao.xml"</span>,</span><br><span class="line">        <span class="string">"classpath:spring-service.xml"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SeckillService seckillService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetSeckillList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Seckill&gt; seckills = seckillService.getSeckillList();</span><br><span class="line">        logger.info(<span class="string">"list=&#123;&#125;"</span>, seckills);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;关于SSM框架的整合和单元测试的集成就到此结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/ssm.jpg&quot; alt=&quot;ssm整合&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;SSM框架，既是Sping + Spring MVC + Mybatis，本篇博文主要是作为本人的备忘，记录如何整合SSM框架，以及如何集成单元测试，关于每一个配置的作用大都加上了注释，至于如何搭建项目这里不在赘述（我使用的是web项目），可以自己查找相关资料。
    
    </summary>
    
      <category term="ssm&amp;ssh" scheme="https://brightloong.github.io/categories/ssm-ssh/"/>
    
    
      <category term="ssm" scheme="https://brightloong.github.io/tags/ssm/"/>
    
      <category term="单元测试" scheme="https://brightloong.github.io/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java类的初始化顺序</title>
    <link href="https://brightloong.github.io/2017/02/27/%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
    <id>https://brightloong.github.io/2017/02/27/类的初始化顺序/</id>
    <published>2017-02-27T09:11:40.000Z</published>
    <updated>2017-10-09T02:55:34.103Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/java.jpg" alt="title picture"><br>&emsp;&emsp;最近在看回顾Java基础的时候，发现看似很简单的类初始化的顺序却并不是那么简单（往往越是简单的东西反而越容易出错呢），所以我觉得还是把它写下来，作为自己的备忘录比较好。<a id="more"></a>既然都记录了我觉得我还是记录得比较全面的较好，所以显得有点啰嗦。</p><h2 id="普通类的初始化（不存在继承，内部类的时候）"><a href="#普通类的初始化（不存在继承，内部类的时候）" class="headerlink" title="普通类的初始化（不存在继承，内部类的时候）"></a>普通类的初始化（不存在继承，内部类的时候）</h2><p>&emsp;&emsp;为了更详细的验证类的初始化顺序，首先我创建了一个被另一个类使用的类<strong>B.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> varOneInB = initInt(<span class="string">"varOneInB"</span>); <span class="comment">// 6 14</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> staticVarOneInB = initInt(<span class="string">"staticVarOneB"</span>);  <span class="comment">// 4  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> varTwoInB = initInt(<span class="string">"varTwoInB"</span>); <span class="comment">// 7 15</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> staticvarTwoInB = initInt(<span class="string">"staticvarTwoInB"</span>); <span class="comment">// 5</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B  constructor"</span>); <span class="comment">// 8 16</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于对int类型的变量赋值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> varName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">initInt</span><span class="params">(String varName)</span> </span>&#123;</span><br><span class="line">        System.out.println(varName + <span class="string">" init"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2017</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;然后我创建了一个<strong>A</strong>类来验证初始化顺序，并且在该类中同时使用的static变量和static块等。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> varOneInA = initInt(<span class="string">"varOneInA"</span>); <span class="comment">// 11</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> staticVarOneInA = initInt(<span class="string">"staticVarOneInA"</span>); <span class="comment">// 1 </span></span><br><span class="line">    &#123;</span><br><span class="line">          <span class="keyword">int</span> varTwoInA = initInt(<span class="string">"varTwoInA"</span>); <span class="comment">// 12</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">          <span class="keyword">int</span> staticvarTwoInA = initInt(<span class="string">"staticvarTwoInA"</span>);  <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> B b = <span class="keyword">new</span> B(); <span class="comment">// 13</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> B staticB = <span class="keyword">new</span> B(); <span class="comment">// 3</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A  constructor"</span>); <span class="comment">// 17</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于对int型变量赋值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> varName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">initInt</span><span class="params">(String varName)</span> </span>&#123;</span><br><span class="line">        System.out.println(varName + <span class="string">" init"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2017</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"run be called"</span>);<span class="comment">// 23</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start running"</span>);<span class="comment">// 9</span></span><br><span class="line">        A a = <span class="keyword">new</span> A();<span class="comment">// 10</span></span><br><span class="line">        a.run();<span class="comment">// 18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行后结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">staticVarOneInA init</span><br><span class="line">staticvarTwoInA init</span><br><span class="line">staticVarOneB init</span><br><span class="line">staticvarTwoInB init</span><br><span class="line">varOneInB init</span><br><span class="line">varTwoInB init</span><br><span class="line">B  constructor</span><br><span class="line">start running</span><br><span class="line">varOneInA init</span><br><span class="line">varTwoInA init</span><br><span class="line">varOneInB init</span><br><span class="line">varTwoInB init</span><br><span class="line">B  constructor</span><br><span class="line">A  constructor</span><br><span class="line">run be called</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;对《Think in java》这本书里面的关于初始化顺序的总结进行归纳如下：</p><blockquote><p><strong>注意：</strong>即使变量定义散布于方法定义之间，它们仍旧会在任何方法（包括构造器）被调用之前得到初始化。</p></blockquote><ol><li>即使没有显示地使用static关键字，构造器实际上也是静态方法。因此，当首次创建类的对象时（构造器可以看出静态方法），或者类的静态方法/静态域被首次访问时，Java解释器必须查找类路径。</li><li>然后载入class，有关静态初始化的所有动作都会执行（所以静态初始化只在Class对象首次被加载的时候进行一次）。</li><li>当使用new创建对象的时候，首先将在堆上为对象分配足够的存储空间。</li><li>这块存储空间会被清零，这就自动将Dog对象中的所有基本类型数据都设置成了默认值（对数字来说就是0，对布尔类型和字符类型也相同），而引用就则被设置成了null。</li><li>执行出现于字段定义出的初始化动作。</li><li>执行构造器。</li></ol><p>&emsp;&emsp;有了上面的知识点，再来看上面的结果。我用数字1 2 3做了标记，括号后的阿拉伯数字表示上面代码对应的地方。</p><ul><li>在类A中执行main方法，由于main()是静态方法，必须加载A类，然后起静态域staticVarOneInA(1)，staticvarTwoInA(2)，staticB(3)被初始化。</li><li>在staticB被初始化的时候，导致B类被加载，因为是第一次加载，对静态域进行初始化，因此staticVarOneInB(4)，staticvarTwoInB(5)被初始化。</li><li>之后顺序初始化varOneInB(6)，varTwoInB(7)，执行构造器B(8)。</li><li>在A静态域初始化后，回到main()方法，打印出了“start running”(9),在new A()(10)的时候，分配a对象的空间，开始顺序初始化varOneInA(11)，varTwoInA(12)和b(13)，初始化b的时候因为不是第一次加载，所以staticVarOneInB，staticvarTwoInB不再被初始化，只是初始化了varOneInB(14)，varTwoInB(15)，然后执行构造B(16)。</li><li>初始化完成后，调用A的构造器(17)；最后通过a.run()调用run(18)方法，打印出“run be called”。</li></ul><h2 id="具有继承的类的初始化"><a href="#具有继承的类的初始化" class="headerlink" title="具有继承的类的初始化"></a>具有继承的类的初始化</h2><p>&emsp;&emsp;下面，我创建了一个Father类和一个继承Father类的Son类，来探究在有继承的时候类的初始化和加载，情况基本和上面类似，我就不再写太多的注释了。Father类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> varInFather = initInt(<span class="string">"varInFather"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> staticVarInFather = initInt(<span class="string">"staticVarInFather"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Father constructor"</span> + <span class="string">" name:"</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">initInt</span><span class="params">(String varName)</span> </span>&#123;</span><br><span class="line">        System.out.println(varName + <span class="string">" init"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2017</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Son.java如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> varInSon = initInt(<span class="string">"varInSon"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> staticVarInSon = initInt(<span class="string">"staticVarInSon"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        System.out.println(<span class="string">"Son constructor"</span> + <span class="string">" name:"</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">initInt</span><span class="params">(String varName)</span> </span>&#123;</span><br><span class="line">        System.out.println(varName + <span class="string">" init"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2017</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start running"</span>);</span><br><span class="line">        Son son = <span class="keyword">new</span> Son(<span class="string">"Bob"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果如下；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">staticVarInFather init</span><br><span class="line">staticVarInSon init</span><br><span class="line">start running</span><br><span class="line">varInFather init</span><br><span class="line">Father constructor name:Bob</span><br><span class="line">varInSon init</span><br><span class="line">Son constructor name:Bob</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;同样的，我将《Think in java》中的关于继承的类加载和初始化归纳如下：</p><blockquote><p><strong>注意：</strong>即使变量定义散布于方法定义之间，它们仍旧会在任何方法（包括构造器）被调用之前得到初始化。</p></blockquote><ol><li>（同上）即使没有显示地使用static关键字，构造器实际上也是静态方法。因此，当首次创建类的对象时（构造器可以看出静态方法），或者类的静态方法/静态域被首次访问时，Java解释器必须查找类路径，在对它进行加载的过程中，编译器注意到它有一个基类（有extends得知），于是它继续加载，不管你时候打算产生一个该基类的对象。如果该基类还有其自身的基类，那么第二个基类就会被加载，如此类推。</li><li>接下来，根基类的static初始化会被执行，然后是下一个导出类，如此类推。</li><li>必要的类加载完成后，对象就可以被创建。同样的，首先对象中所有的基本类型都会被设为默认值，对象引用被设为null——通过将对象内存设为二进制零值而一举生成。</li><li>然后基类的构造器会被调用。基类构造器和导出类的构造器一样，以相同的顺序来经历相同的过程。</li><li>在基类构造器完成之后，实例变量按其次序被初始化。</li><li>最后，构造器的其余部分被执行。</li></ol><p>&emsp;&emsp;在有了上述归纳后，我们来分析上面程序的结果。</p><ul><li>在类Son中执行main方法，由于main()是静态方法，必须加载Son类，在加载的时候发现其有父类Father，进而加载Father类。</li><li>Father类被加载的时候，其静态变量staticVarInFather被初始化，之后Son类中的静态变量staticVarInSon被初始化。</li><li>回到main方法，打印出“start running”</li><li>在执行new Son(“Bob”)的时候，对基类也就是Father中的varInFather进行初始化，之后Father的构造器被调用。</li><li>之后导出类变量varInSon被初始化，调用导出类Son的构造器。</li></ul><h2 id="具有继承的静态内部类"><a href="#具有继承的静态内部类" class="headerlink" title="具有继承的静态内部类"></a>具有继承的静态内部类</h2><p>&emsp;&emsp;关于这个的讲解，我引用一道2015携程Java工程师笔试题。来自csdb博客<a href="http://my.csdn.net/Two_Water" target="_blank" rel="noopener">fuck两点水</a>的<a href="http://blog.csdn.net/two_water/article/details/53891952" target="_blank" rel="noopener"> 2015携程JAVA工程师笔试题(基础却又没多少人做对的面向对象面试题)</a>。题目如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class Base</span><br><span class="line">&#123;</span><br><span class="line">    private String baseName = &quot;base&quot;;</span><br><span class="line">    public Base()</span><br><span class="line">    &#123;</span><br><span class="line">        callName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void callName()</span><br><span class="line">    &#123;</span><br><span class="line">        System. out. println(baseName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class Sub extends Base</span><br><span class="line">    &#123;</span><br><span class="line">        private String baseName = &quot;sub&quot;;</span><br><span class="line">        public void callName()</span><br><span class="line">        &#123;</span><br><span class="line">            System. out. println (baseName) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Base b = new Sub();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;当时看到这道题的时候，关于类的加载，初始化基本已经忘记，所以直接做错。该题的正确答案是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null</span><br></pre></td></tr></table></figure></p><p>为什么是null?首先我们从上面的内容可以了解到，类的初始化顺序是：</p><blockquote><p>父类静态块 -&gt;子类静态块 -&gt;父类初始化语句 -&gt;父类构造函器 -&gt;子类初始化语句 子类构造器。</p></blockquote><p>其实在掌握了我上面说的东西后，这道题的的答案为什么为null,已经是“柳暗花明又一村了”；所以我这里直接把<a href="http://my.csdn.net/Two_Water" target="_blank" rel="noopener">fuck两点水</a>博客上的内容摘抄过来</p><ol><li>Base b = new Sub();在 main方法中声明父类变量b对子类的引用，JAVA类加载器将Base,Sub类加载到JVM;也就是完成了 Base 类和 Sub 类的初始化</li><li>JVM 为 Base,Sub 的的成员开辟内存空间且值均为null;在初始化Sub对象前，首先JAVA虚拟机就在堆区开辟内存并将子类 Sub 中的 baseName 和父类 Base 中的 baseName（已被隐藏）均赋为 null，就是子类继承父类的时候，同名的属性不会覆盖父类，只是会将父类的同名属性隐藏</li><li>调用父类的无参构造调用 Sub 的构造函数，因为子类没有重写构造函数，默认调用无参的构造函数，调用了 super() 。</li><li>callName 在子类中被重写，因此调用子类的 callName();调用了父类的构造函数，父类的构造函数中调用了 callName 方法，此时父类中的 baseName 的值为 base，可是子类重写了 callName 方法，且 调用父类 Base 中的 callName 是在子类 Sub 中调用的，因此当前的 this 指向的是子类，也就是说是实现子类的 callName 方法</li><li>调用子类的callName，打印baseName</li></ol><p>实际上在new Sub()时，实际执行过程为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    baseName = <span class="string">"sub"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可见，在 baseName = “sub” 执行前，子类的 callName() 已经执行，所以子类的 baseName 为默认值状态 null 。<br>&emsp;&emsp;上面的题，大家可以试着把子类中的baseName使用static进行修饰，看看会得到什么结果，加深自己的理解。<br>&emsp;&emsp;关于类的加载和初始化的备忘录就到此结束了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/java.jpg&quot; alt=&quot;title picture&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;最近在看回顾Java基础的时候，发现看似很简单的类初始化的顺序却并不是那么简单（往往越是简单的东西反而越容易出错呢），所以我觉得还是把它写下来，作为自己的备忘录比较好。
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="JAVA" scheme="https://brightloong.github.io/tags/JAVA/"/>
    
      <category term="类初始化顺序" scheme="https://brightloong.github.io/tags/%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建个人博客(三)——百度分享集成</title>
    <link href="https://brightloong.github.io/2017/02/26/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E4%B8%89-%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%E9%9B%86%E6%88%90/"/>
    <id>https://brightloong.github.io/2017/02/26/Hexo-Github搭建个人博客-三-——百度分享集成/</id>
    <published>2017-02-26T02:57:29.000Z</published>
    <updated>2017-02-26T04:08:09.401Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/share.jpg" alt="title picture"><br>&emsp;&emsp;在上一篇博客<a href="https://brightloong.github.io/2017/02/25/Hexo-Github%E5%BB%BA%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE/#more">Hexo+Github搭建个人博客(二)——配置&amp;主题</a>中我还留下了一个有关百度分享的东西没有说明。我之前也说这是我在搭建博客中遇到的最大的坑（没有之一）<a id="more"></a>。在这篇博客中叫我将说一说我遇到了什么坑，以及怎么从坑里面爬出来的。当然怎么解决百度分享在https中的使用的具体方法并不是我搞出来的，首先要感谢<a href="https://github.com/hrwhisper/baiduShare" target="_blank" rel="noopener">hrwhisper</a>在他的博文<a href="https://www.hrwhisper.me/baidu-share-not-support-https-solution/" target="_blank" rel="noopener">百度分享不支持https的解决方案</a>中提出的解决方案。但是我在使用的过程中并不是很顺利的解决了我的问题（可能由于我使用的是<a href="(http://theme-next.iissnan.com/">Next</a>)的主题），在使用其方案过程中还有不少坑需要注意的，下面我将一一说明。</p><blockquote><p><strong>注意：</strong>以下问题可能你没有遇到，我是在使用<a href="(http://theme-next.iissnan.com/">Next主题</a>)中遇到的。</p></blockquote><h2 id="做好基本的配置"><a href="#做好基本的配置" class="headerlink" title="做好基本的配置"></a>做好基本的配置</h2><p>&emsp;&emsp;请大家参照我的上一篇博文<a href="https://brightloong.github.io/2017/02/25/Hexo-Github%E5%BB%BA%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE/#more">Hexo+Github搭建个人博客(二)——配置&amp;主题</a>中有关百度分享集成的部分，先做好基本配置。</p><h3 id="1-在站点配置文件中，添加字段baidushare，值为-true"><a href="#1-在站点配置文件中，添加字段baidushare，值为-true" class="headerlink" title="1. 在站点配置文件中，添加字段baidushare，值为 true"></a>1. 在<strong>站点配置文件</strong>中，添加字段<strong>baidushare</strong>，值为 <strong>true</strong></h3><p>&emsp;&emsp;关于什么是站点配置文件，我相信大家应该清楚了，如果不知道的话请看我的上一篇博文中有所提及。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidushare: true #百度分享功能</span><br></pre></td></tr></table></figure></p><h3 id="2-在主题配置文件中，找到baidushare字段，设置其展现方式"><a href="#2-在主题配置文件中，找到baidushare字段，设置其展现方式" class="headerlink" title="2. 在主题配置文件中，找到baidushare字段，设置其展现方式"></a>2. 在<strong>主题配置文件</strong>中，找到<strong>baidushare</strong>字段，设置其展现方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">baidushare: </span><br><span class="line">  type: button #百度分享展示的方式button|slide</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;做好上面两步后，在你的百度分享还没有出现的情况下，打开浏览器的F12,发现提示https访问http资源的问题。之后介绍怎么解决百度分享在https下的使用。</p><h2 id="百度分享在https中的使用"><a href="#百度分享在https中的使用" class="headerlink" title="百度分享在https中的使用"></a>百度分享在https中的使用</h2><p>&emsp;&emsp;百度分享不能使用的主要原因是它会去请求http中的资源，一个share.js，既然这样，我们能想到的就是把这个资源放到非http上，或者干脆直接放到我们自己的目录下面。<br>&emsp;&emsp;大家可以按照方案提供者<a href="https://github.com/hrwhisper/baiduShare" target="_blank" rel="noopener">hrwhisper</a>依照他的博文<a href="https://www.hrwhisper.me/baidu-share-not-support-https-solution/" target="_blank" rel="noopener">百度分享不支持https的解决方案</a>去做，在遇到问题的时候回到我的博文，或者可以直接按照我说的做。</p><ul><li>下载资源文件，并放到自己blog的目录下。</li></ul><p>&emsp;&emsp;Github地址：<a href="https://github.com/hrwhisper/baiduShare" target="_blank" rel="noopener">https://github.com/hrwhisper/baiduShare</a><br><br>&emsp;&emsp;这里我要强调一下，在<strong>站点配置文件</strong>中，有一个<strong>source_dir</strong>字段，这个是<strong>你访问资源</strong>的根目录，比如我在sourc中放置了一个test.jpg的文件，那么访问它的路径就是/test.jpg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source_dir: source</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;static 解压后丢到站点根目录，也就是source目录下面。然后将百度分享中的代码修改，我使用的是Next主题，这段代码在文件<strong>F:\myblog\themes\next\layout_partials\share\baidushare.swing</strong>中，如果你找不到可以在你的主题文件夹中搜索<strong>baidushare</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.src=&apos;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos;+~(-new Date()/36e5)];&lt;/script&gt;</span><br><span class="line">改为</span><br><span class="line">.src=&apos;/static/api/js/share.js?v=89860593.js?cdnversion=&apos;+~(-new Date()/36e5)];&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>这样之后重启服务，看看百度分享是不是出现了，如果出现了，恭喜你，成功了。如果没有，请你继续往下看。</p><ul><li>在站点配置文件中设置<strong>skip_render</strong>字段<br>&emsp;&emsp;在你发现百度分享还是没有出现的时候，打开F12，是不是发现share.js文件已经成功加载了，但是这个文件报错，你进入<strong><em>F:\myblog.deploy_git\static\api\js(我的就是这个目录，因为我把博客放在了F:\myblog下)</em></strong>，打开share.js文件，发现这个文件末尾并没有加载完，我我们下载下来的static\api\js\share.js是不一样的，为什么？<br>&emsp;&emsp;</li></ul><blockquote><p>原来，hexo会把/source下的文件全部渲染</p></blockquote><p>怎么解决这个问题，有两种办法：你可以设置站点配置文件下的skip_rende字段，让hexo在渲染的时候跳过static之下的所有文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">skip_rende: static/**</span><br><span class="line"></span><br><span class="line">#单个文件夹下的全部文件：skip_render: test/*</span><br><span class="line">#单个文件夹下的指定类型文件：skip_render: test/*.md</span><br><span class="line">#单个文件夹下的全部文件以及子目录:skip_render: test/**</span><br><span class="line">#多个文件夹：</span><br><span class="line">#skip_render:</span><br><span class="line"># test1/*.html #注意前面的空格，代表是skip_render之下的</span><br><span class="line"># test2/**</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;你也可以选择不设置这个属性，而是把static文件放在主题文件的source目录下，我的是（<strong><em>F:\myblog\themes\next\source</em></strong>）。做完这些操作后，你的百度分享应该已经出现在你的博客中了，just enjoy it。<br>（<strong><em>ps：除了以上解决百度在https下使用的方法以外，还有一个方法就是使用CDN，具体方式请参考<a href="http://www.mrxn.net/https-share-cdn.html" target="_blank" rel="noopener">巧用七牛CDN的镜像功能使百度分享支持HTTPS</a>。再多说一句关于JiaThis不能支持https的问题个人觉得也可以用以上的方式来解决，这个大家可以自行研究。）</em></strong><br>（<strong><em>ps plus：关于博客的搭建就暂时告一段落了。）</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/share.jpg&quot; alt=&quot;title picture&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;在上一篇博客&lt;a href=&quot;https://brightloong.github.io/2017/02/25/Hexo-Github%E5%BB%BA%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE/#more&quot;&gt;Hexo+Github搭建个人博客(二)——配置&amp;amp;主题&lt;/a&gt;中我还留下了一个有关百度分享的东西没有说明。我之前也说这是我在搭建博客中遇到的最大的坑（没有之一）
    
    </summary>
    
      <category term="建站" scheme="https://brightloong.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="https://brightloong.github.io/tags/hexo/"/>
    
      <category term="建站" scheme="https://brightloong.github.io/tags/%E5%BB%BA%E7%AB%99/"/>
    
      <category term="百度分享" scheme="https://brightloong.github.io/tags/%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建个人博客(二)——配置&amp;主题</title>
    <link href="https://brightloong.github.io/2017/02/25/Hexo-Github%E5%BB%BA%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE/"/>
    <id>https://brightloong.github.io/2017/02/25/Hexo-Github建站（二）——配置/</id>
    <published>2017-02-25T02:27:37.000Z</published>
    <updated>2017-02-26T04:03:17.216Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Next.jpg" alt="title-picture"><br>&emsp;&emsp;在上一篇博客<a href="https://brightloong.github.io/2017/02/24/Hexo-Github%E5%BB%BA%E7%AB%99-%E4%B8%80-%E5%BC%80%E5%A7%8B%E5%BB%BA%E7%AB%99/#more">Hexo+Github搭建个人博客(一)——开始搭建</a>中介绍了如何安装git、hexo以及将文件推送到github上，相信看到这篇博客的时候你已经有了一个漂亮的博客<a id="more"></a>。这篇博客主要介绍如何发布文章、在站点配置文件中配置一些个性化的信息，以及更换主题（<strong>我现在使用的是Next主题，所以关于主题配置以及之后的集成第三方工具等都是基于Next主题来说的</strong>），更换主题后如何集成第三方工具。</p><h2 id="发布新的博客"><a href="#发布新的博客" class="headerlink" title="发布新的博客"></a>发布新的博客</h2><p>&emsp;&emsp;既然博客已经搭建好了，那么不发几篇博文有就没有意义了，使用下面的命令来新建一篇叫做”brightloong”的文章。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &apos;brightloong&apos;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;命令执行之后，你会在你文件博客根目录的source/_post目录下找到你刚刚新建的md后缀的文件，比如我的是<strong><em>F:\myblog\source_posts\brightloong.md</em></strong>，hexo博客是使用markdown语法来书写的，如果不熟悉markdown语法可以快速的看一下<a href="http://www.appinn.com/markdown/" target="_blank" rel="noopener">markdown语法说明</a>，或者是<a href="http://sspai.com/25137/" target="_blank" rel="noopener">认识与入门Markdown</a>,后者也有推荐一些不同平台下使用的编辑Markdown的工具，本人使用的是<a href="http://www.appinn.com/markdown/" target="_blank" rel="noopener">Cmd Markdown</a>，它既支持在线的编辑，也可以下载下来使用。生成的md文件打开如下：</p><blockquote><p><strong>注意：</strong>在冒号后面一定要加上一个空格，否则在生成静态文件的时候会报错，并且也不能将其成功推送到github。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: brightloong #文章标题</span><br><span class="line">date: 2017-02-24 12:03:12 #创建时间</span><br><span class="line">tags: #文章标签，如果有多个标签可以使用[1,2,3]的形式，还有其他形式自己摸索吧</span><br><span class="line">---</span><br><span class="line">#这之后是正文</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;文章编写好之后，只用以下命令生成静态文件并推送到github上，执行完成后打开自己的博客页面，是不是发现刚刚编写的文章出现了；如果你想删除某一篇文章，那么在source/_post目录下找到对应的文章将其删除后，同样执行一下命令就OK了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="站点配置文件-config-yml"><a href="#站点配置文件-config-yml" class="headerlink" title="站点配置文件_config.yml"></a>站点配置文件_config.yml</h2><p>&emsp;&emsp;站点配置文件_config.yml是在你博客保存目录的根目录下，<strong>注意将它与主题配置文件进行区分</strong>，比如我保存的博客目录为<strong><em>F:\myblog</em></strong>那么我站点配置文件为<strong><em>F:\myblog_config.yml</em></strong>，我使用的主题是Next主题，所以我的主题配置文件为<strong><em>F:\myblog\themes\next_config.yml</em></strong>。下面我先介绍下站点配置文件，我将一些主要的配置做了注释，如果你想了解更多的配置的含义和作用，请访问<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="noopener">Hexo官方教程</a>查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: BrightLoong&apos;s Blog #博客的标题</span><br><span class="line">subtitle: #子标题</span><br><span class="line">description: Remember what should be remembered, and forget what should be forgotten.Alter what is changeable, and accept what is mutable. #博客描述，可以是一段你喜欢的话，也可以是你博客的描述，只要你开心就好。</span><br><span class="line">author: BrightLoong #作者</span><br><span class="line">language: zh-Hans #语言（我使用的是简体中文）</span><br><span class="line">timezone: #时区（默认使用电脑时间）</span><br><span class="line"></span><br><span class="line">##之下的保持默认就好，没有什么需要更改的</span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; #and root as &apos;/child/&apos;</span><br><span class="line">url: https://brightloong.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source #source目录</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags #标签目录</span><br><span class="line">archive_dir: archives </span><br><span class="line">category_dir: categories #分类目录</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render: static/** #注意这个属性（跳过渲染），你暂时不用配置，我之后会讲到，这个也是我遇到的坑</span><br><span class="line"></span><br><span class="line">##之下的保持默认就好，没有什么需要更改的</span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next #你设置的主题，接下来我会说到这个</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/BrightLoong/BrightLoong.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h2><p>&emsp;&emsp;搭建自己的博客，最吸引人的莫过于那千变万化的主题了，大家可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网</a>上看到无数漂亮、大方、简洁的主题。本人使用的是简洁的<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next主题</a>，你可以选择你喜欢的下载下来，将其解压放入themes目录中，比如我的目录是<strong><em>F:\myblog\themes</em></strong>，然后修改我在上面提到的站点配置文件中的<code>theme</code>属性，为你刚刚放入themes目录中文件的名字（最好是对解压文件修改一个名字，否则名字可能会比较长，我把我下载下来的主题改文了next）,做完这些之后并不代表你完成了，你还需要参考你所下载的主题所说的配置步骤进行相关的配置，由于不同的主题配置过程也尽不相同，大家根据自己下载的主题去配置，我在这里只说我使用的Next主题如何配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>从下面开始所说的都是Next主题的相关配置。</p></blockquote><h2 id="配置Next主题"><a href="#配置Next主题" class="headerlink" title="配置Next主题"></a>配置Next主题</h2><p>&emsp;&emsp;如果你使用的和我一样，也是Next的主题，那么你最好还是看官方提供<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next使用文档</a>，并且文档是中文版的,我也仅仅是讲一些容易被忽略的配置，以及我使用的配置，以及在使用过程中遇到的问题;至于如何更换头像，添加分类和标签页面、切换主题样式（Next主题包含3中样式）之类的，大家还是照着官方的做更好。</p><h3 id="1-配置网站图标"><a href="#1-配置网站图标" class="headerlink" title="1. 配置网站图标"></a>1. 配置网站图标</h3><p>&emsp;&emsp;如何让网站前能显示自己想要的图标，我当时也是找了很久，最后发现是在<strong>主题配置文件（我的是F:\myblog\themes\next_config.yml）</strong>的最前面，有一个<strong>favicon</strong>属性，我把一个名字叫favicon.ico的图片放到了F:\myblog\source下，然后配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">favicon: /favicon.ico</span><br></pre></td></tr></table></figure></p><p><img src="/images/weisiteico.jpg" alt="website ico"></p><h3 id="2-首页显示阅读全文按钮"><a href="#2-首页显示阅读全文按钮" class="headerlink" title="2. 首页显示阅读全文按钮"></a>2. 首页显示阅读全文按钮</h3><p>&emsp;&emsp;首页的文章是不是默认展开了，显示出了整篇文章，怎么才能显示出如下的阅读全文的按钮。<br><img src="/images/yuedu.jpg" alt="button"><br>在<strong>主题配置文件</strong>中找到<strong>auto_excerpt</strong>属性进行配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true #改写为true</span><br><span class="line">  length: 150 #默认展示的高度</span><br></pre></td></tr></table></figure></p><p>你也可以在自己的博文中添加<strong><em><code>&lt;!--more--&gt;</code></em></strong>来决定在首页展示到什么位置（我就喜欢用这种方式），这个标签后的内容就不会展示到首页啦。</p><h3 id="3-集成多说评论"><a href="#3-集成多说评论" class="headerlink" title="3. 集成多说评论"></a>3. 集成多说评论</h3><p>&emsp;&emsp;登录<a href="http://duoshuo.com/" target="_blank" rel="noopener">多说</a>，登录后在首页选择“我要安装”。创建站点，填写表单。多说域名 这一栏填写的即是你的 duoshuo_shortname，如图：<br><img src="/images/duoshuo-create-site.jpg" alt="duoshuo"><br>&emsp;&emsp;创建站点完成后在 <strong>站点配置文件(我的是F:\myblog_config.yml)</strong> 中新增 duoshuo_shortname 字段，值设置成上一步红框中的值。</p><blockquote><p><strong>注意</strong>：新增字段的时候一定不要让字段前面有空格，否则会被认为是子字段，无法正确解析</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#多说评论</span><br><span class="line">duoshuo_shortname: brightloong #设置为红框中的值</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;多说评论中可以开启热评文章，在<strong>站点配置文件</strong>中增加字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">duoshuo_hotartical: true</span><br></pre></td></tr></table></figure></p><p>开启后你可能会发现点击热评文章并不能跳转到对应的网页，进入多说后台查看，发现原来网址不正确，那简单，点击编辑修改成正确的网址就OK了。<br><img src="/images/duoshuo_hot.jpg" alt="duoshuo_hot"></p><h3 id="4-阅读次数统计"><a href="#4-阅读次数统计" class="headerlink" title="4. 阅读次数统计"></a>4. 阅读次数统计</h3><p>&emsp;&emsp;次数统计又leancloud提供，请参考由由<a href="https://github.com/iissnan/hexo-theme-next/pull/439" target="_blank" rel="noopener">Doublemine</a> 贡献提供的<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">为Next主题添加阅读次数统计功能</a><br><img src="/images/tongji.jpg" alt="leancloud"></p><h3 id="5-集成百度分享"><a href="#5-集成百度分享" class="headerlink" title="5. 集成百度分享"></a>5. 集成百度分享</h3><p>&emsp;&emsp;分享功能的集成是最坑的没有之一，我大概花了半天多的时间查找各种方法才将其解决，这里我先说官网的配置：编辑 <strong>站点配置文件</strong>，添加字段 <strong>baidushare</strong>，值为 <strong>true</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidushare: true #百度分享功能</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;欢欢喜喜的打开自己的博客。咦！百度分享功能咋没有添加上啊。不急，听我慢道来。我在主题文件中发现一个文件<br><strong>F:\myblog\themes\next\layout_partials\share\baidushare.swing</strong>，内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.baidushare.type === &quot;button&quot; %&#125;</span><br><span class="line">  &lt;div class=&quot;bdsharebuttonbox&quot;&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;bds_tsina&quot; data-cmd=&quot;tsina&quot; title=&quot;分享到新浪微博&quot;&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;bds_douban&quot; data-cmd=&quot;douban&quot; title=&quot;分享到豆瓣网&quot;&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;bds_sqq&quot; data-cmd=&quot;sqq&quot; title=&quot;分享到QQ好友&quot;&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;bds_qzone&quot; data-cmd=&quot;qzone&quot; title=&quot;分享到QQ空间&quot;&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;bds_weixin&quot; data-cmd=&quot;weixin&quot; title=&quot;分享到微信&quot;&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;bds_tieba&quot; data-cmd=&quot;tieba&quot; title=&quot;分享到百度贴吧&quot;&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;bds_twi&quot; data-cmd=&quot;twi&quot; title=&quot;分享到Twitter&quot;&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;bds_fbook&quot; data-cmd=&quot;fbook&quot; title=&quot;分享到Facebook&quot;&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;bds_more&quot; data-cmd=&quot;more&quot;&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a class=&quot;bds_count&quot; data-cmd=&quot;count&quot;&gt;&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window._bd_share_config = &#123;</span><br><span class="line">      &quot;common&quot;: &#123;</span><br><span class="line">        &quot;bdText&quot;: &quot;&quot;,</span><br><span class="line">        &quot;bdMini&quot;: &quot;2&quot;,</span><br><span class="line">        &quot;bdMiniList&quot;: false,</span><br><span class="line">        &quot;bdPic&quot;: &quot;&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;share&quot;: &#123;</span><br><span class="line">        &quot;bdSize&quot;: &quot;16&quot;,</span><br><span class="line">        &quot;bdStyle&quot;: &quot;0&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;image&quot;: &#123;</span><br><span class="line">        &quot;viewList&quot;: [&quot;tsina&quot;, &quot;douban&quot;, &quot;sqq&quot;, &quot;qzone&quot;, &quot;weixin&quot;, &quot;twi&quot;, &quot;fbook&quot;],</span><br><span class="line">        &quot;viewText&quot;: &quot;分享到：&quot;,</span><br><span class="line">        &quot;viewSize&quot;: &quot;16&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% elseif theme.baidushare.type === &quot;slide&quot; %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window._bd_share_config = &#123;</span><br><span class="line">      &quot;common&quot;: &#123;</span><br><span class="line">        &quot;bdText&quot;: &quot;&quot;,</span><br><span class="line">        &quot;bdMini&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;bdMiniList&quot;: false,</span><br><span class="line">        &quot;bdPic&quot;: &quot;&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;image&quot;: &#123;</span><br><span class="line">        &quot;viewList&quot;: [&quot;tsina&quot;, &quot;douban&quot;, &quot;sqq&quot;, &quot;qzone&quot;, &quot;weixin&quot;, &quot;twi&quot;, &quot;fbook&quot;],</span><br><span class="line">        &quot;viewText&quot;: &quot;分享到：&quot;,</span><br><span class="line">        &quot;viewSize&quot;: &quot;16&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;slide&quot;: &#123;</span><br><span class="line">        &quot;bdImg&quot;: &quot;5&quot;,</span><br><span class="line">        &quot;bdPos&quot;: &quot;left&quot;,</span><br><span class="line">        &quot;bdTop&quot;: &quot;100&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  with(document)0[(getElementsByTagName(&apos;head&apos;)[0]||body).appendChild(createElement(&apos;script&apos;)).src=&apos;/static/api/js/share.js?cdnversion=&apos;+~(-new Date()/36e5)];&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;注意到最开始的语句了吗<strong>if theme.baidushare.type === “button”</strong>，以及之后的<strong>else if theme.baidushare.type === “slide”</strong>什么意思，在theme下也就是<strong>主题配置文件</strong>中，baidushare字段下的type字段，我们打开<strong>主题配置文件(我的是F:\myblog\themes\next_config.yml)</strong>，这个配置是不是被注释掉了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">baidushare: </span><br><span class="line">  type: button #百度分享展示的方式button|slide</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;修改之后，再启动，发现还是没有（如果你是用的<strong>本地启动</strong>用local的方式访问可能会看到百度分享功能已经出现了），这个是后打开浏览器F12的调试功能，是不是发现控制台报错了，提示你从https中去访问http的资源是不行的。不知道大家有没有看到刚刚我们修改的主题配置文件中，在上面有一段注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Warning: Baidu Share does not support https.百度分享不支持https</span><br><span class="line">baidushare: </span><br><span class="line">  type: button</span><br></pre></td></tr></table></figure><p>是的不支持https的方式，自己的域名是用https开头的（除非你自己购买了域名，如何购买更换域名请大家参考<a href="http://www.jianshu.com/p/1d427e888dda" target="_blank" rel="noopener">【Hexo+Github】域名和github绑定的问题</a>）。并且，JiaThis等都不支持https，怎么办？我将在下一篇博客中单独介绍我在搭建博客中遇到的最大的坑，<a href="https://brightloong.github.io/2017/02/26/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E4%B8%89-%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%E9%9B%86%E6%88%90/#more">百度分享如何在https下使用</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/Next.jpg&quot; alt=&quot;title-picture&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;在上一篇博客&lt;a href=&quot;https://brightloong.github.io/2017/02/24/Hexo-Github%E5%BB%BA%E7%AB%99-%E4%B8%80-%E5%BC%80%E5%A7%8B%E5%BB%BA%E7%AB%99/#more&quot;&gt;Hexo+Github搭建个人博客(一)——开始搭建&lt;/a&gt;中介绍了如何安装git、hexo以及将文件推送到github上，相信看到这篇博客的时候你已经有了一个漂亮的博客
    
    </summary>
    
      <category term="建站" scheme="https://brightloong.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="建站" scheme="https://brightloong.github.io/tags/%E5%BB%BA%E7%AB%99/"/>
    
      <category term="hexo配置" scheme="https://brightloong.github.io/tags/hexo%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Next主题" scheme="https://brightloong.github.io/tags/Next%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建个人博客(一)——开始搭建</title>
    <link href="https://brightloong.github.io/2017/02/24/Hexo-Github%E5%BB%BA%E7%AB%99-%E4%B8%80-%E5%BC%80%E5%A7%8B%E5%BB%BA%E7%AB%99/"/>
    <id>https://brightloong.github.io/2017/02/24/Hexo-Github建站-一-开始建站/</id>
    <published>2017-02-24T04:03:12.000Z</published>
    <updated>2017-02-24T07:23:16.059Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/hexo_github.jpg" alt="title-picture"><br>&emsp;&emsp;前段时间本人利用业余时间，在网上查询各种资料，使用Hexo+Github的方式搭建起了我个人的博客——<a href="https://brightloong.github.io">BrightLoong</a>。<a id="more"></a>相信网上已经有无数前辈写了类似的文章来记录如何搭建博客的过程和步骤，我也不哗众取宠或者班门弄斧了，把我在搭建博客中使用 资料做一个收集，同时也将我在搭建博客过程中遇到的坑列举出来，以及对应的解决方法，也是对搭建博客过程的一个记录，毕竟好记性不如烂笔头。那话不多说，接下来就是一个简单的介绍以及如何搭建的步骤(本文基本也是安照官方的步骤在介绍，我只是在有些地方记了下自己踩过的坑，强烈建议大家跟着<a href="https://hexo.io/docs/index.html" target="_blank" rel="noopener">Hexo官方文档</a>操作)。</p><blockquote><p>本文适用于Windows搭建</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h3><p>&emsp;&emsp;在Hexo官网上如此描述：Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.（Hexo是一个快速，简单和强大的博客框架。你可以使用Markdown（或其他语言）写博客，之后Hexo能在几秒钟生成具有美观主题的静态文件。）如果你想了解更多关于Hexo的东西，请移步<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo官网</a>。<br><br>&emsp;&emsp;Hexo是一款基于Node.js的静态博客框架，可以deploy到Github上，所以首先要在电脑上安装git和node.js,并在Github上注册自己的账号，由于这些东西不是本篇博客要涉及到的主要内容，你可以谷歌、百度，也可以参考我下面提供的链接。</p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>&emsp;&emsp;你可以去官网下载<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>，因为国外资源可能很慢，你也可以下载我在网盘上提供的<a href="http://pan.baidu.com/s/1i5QbyAx" target="_blank" rel="noopener">Git镜像</a>。具体如何使用，请参照廖雪峰老师关于<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="noopener">Git的教程</a>，如果你仅仅是想安装git那看看<strong>Git安装</strong>的那个章节</p><h3 id="Node-js安装配置"><a href="#Node-js安装配置" class="headerlink" title="Node.js安装配置"></a>Node.js安装配置</h3><p>&emsp;&emsp;关于Node.js的安装以及配置，可以参照菜鸟教程上面关于<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">Node.js</a>安装配置的教程，上面也有下载的链接，本人就是参照上面安装的。具网上有些文章说，安装完成后最好重启电脑，以免之后无法使用hexo的相关命令，我倒是没有遇到，不过如果大家遇到这种问题就重启吧。</p><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>&emsp;&emsp;必须要在你安装了上述的Git以及Node.js之后才能进行Hexo的安装。</p><h4 id="1-用以下命令安装Hexo"><a href="#1-用以下命令安装Hexo" class="headerlink" title="1.  用以下命令安装Hexo"></a>1.  用以下命令安装Hexo</h4><p>&emsp;&emsp;在任意地方点击右键，选择<code>Git Bash Here</code></p><pre><code>$ npm install -g hexo-cli</code></pre><p>&emsp;&emsp;如果安装过程中遇到一下错误：</p><pre><code>ERROR Deployer not found : github</code></pre><p>&emsp;&emsp;运行</p><pre><code>$ npm install hexo-deployer-git --save</code></pre><h4 id="2-创建博客存放目录，并进行初始化，安装依赖包（最好不要使用带中文的路径，以免后面出现不必要的麻烦）"><a href="#2-创建博客存放目录，并进行初始化，安装依赖包（最好不要使用带中文的路径，以免后面出现不必要的麻烦）" class="headerlink" title="2. 创建博客存放目录，并进行初始化，安装依赖包（最好不要使用带中文的路径，以免后面出现不必要的麻烦）"></a>2. 创建博客存放目录，并进行初始化，安装依赖包（最好不要使用带中文的路径，以免后面出现不必要的麻烦）</h4><p>&emsp;&emsp;打开一个目录，在这个地方点击右键选择<code>Git Bash Here</code>,执行以下命令</p><pre><code>$ hexo init &lt;folder&gt; #创建目录并执行初始化$ cd &lt;folder&gt;$ npm install #安装依赖包</code></pre><p><code>&lt;folder&gt;</code>改为你想要的目录。<br>&emsp;&emsp;当然你也可以自己新建一个目录，比如我在F盘中创建了myblog目录，进入目录中点击右键选择<code>Git Bash Here</code>，直接执行以下命令</p><pre><code>$ hexo init $ npm install</code></pre><p>&emsp;&emsp;不管你用哪种方式，执行完毕后你会发现以下目录结构</p><pre><code>.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><h4 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3. 启动服务"></a>3. 启动服务</h4><p>&emsp;&emsp;执行以下命令来启动服务</p><pre><code>$hexo g #hexo generate，生成静态文件$ hexo s #hexo server，启动本地服务器</code></pre><p>&emsp;&emsp;如果启动过程中没有报错，此时你用浏览器访问<code>http://localhost:4000/</code>，是不是看到了一个Hello World的博客页面，hexo3.0使用的默认主题是landscape（之后我会讲如何更换主题，以及集成第三方的工具），而且此时的服务是本地启动的，别人并不能看到（继续我接下来的操作就好了）。<br><br>&emsp;&emsp;这个时候如果在浏览器没看到漂亮的博客页面怎么办，别急，先确认你在启动过程中是不是报错了，如过有的话估计是上面的操作有误，如果没有并且发现页面一直在加载中，估计是端口被占用了，我就遇到了这个问题。怎么办?把4000端口给杀死，还有更简单的——在<code>hexo s</code>命令后面加上启动参数，修改默认端口：<code>hexo s -p &lt;port&gt;</code>，比如我用的 <code>hexo s -p 8000</code>，现在重新访问<code>http://localhost:8000/</code>记得把地址的8000改成你自己对应的端口号，是不是看到了美丽的界面。</p><h4 id="4-注册Github账号，并创建仓库。"><a href="#4-注册Github账号，并创建仓库。" class="headerlink" title="4. 注册Github账号，并创建仓库。"></a>4. 注册Github账号，并创建仓库。</h4><p>&emsp;&emsp;想要别人也访问到你的页面，跟着继续吧。首先在<a href="https://github.com/" target="_blank" rel="noopener">Github</a>官网上注册一个账号，有账号的跳过注册，直接登录。登录后找到<code>new repository</code>按钮创建一个新的仓库。</p><p><img src="/images/repository.jpg" alt="new repository"></p><p>&emsp;&emsp;然后填写repository name就行了，要注意的是：<strong>这个名字的格式必须为<code>youname.github.io</code>，并且必须和你的账户名相同，比如我的账户名是BrightLoong，我的地址就是brightloong.github.io</strong>（最开始我就是将name随意填写，虽然是这个格式但是根本访问不了，会报404的错误）。<br><img src="/images/creat_repository.jpg" alt="creat repository"></p><h5 id="5-将本地文件推送到github"><a href="#5-将本地文件推送到github" class="headerlink" title="5. 将本地文件推送到github"></a>5. 将本地文件推送到github</h5><p>&emsp;&emsp;最后，剩下的就是将本地文件推送到github上了，首先打开站点配置文件<code>_config.yml</code>，比如我的路径是：F:\myblog_bonfig.yml。找到最后的<code>deploy</code>属性，如果没有就自己添加，将配置修改为：</p><pre><code>deploy:  type: git #推送方式  repository: https://github.com/BrightLoong/BrightLoong.github.io.git #你的推送地址  branch: master #你要推送的分支</code></pre><blockquote><p>这个地方要注意的是属性后面的冒号必须要有一个空格，否则会报错</p></blockquote><p>&emsp;&emsp;配置好之后使用以下命令将服务部署到github上。</p><pre><code>$ hexo clean$ hexo g$ hexo d</code></pre><p>&emsp;&emsp;使用<code>hexo d</code>命令，第一次会要求你输入用户名和密码，用户名和密码就是你注册github时候使用的用户名和密码。如果遇到以下错误：</p><pre><code>ERROR Deployer not found : github</code></pre><p>&emsp;&emsp;运行</p><pre><code>$ npm install hexo-deployer-git --save</code></pre><p>&emsp;&emsp;再执行上面的命令。</p><pre><code>$ npm install hexo-deployer-git --save</code></pre><p>&emsp;&emsp;如果你没有配置Github的SSH，那么可能需要配置一下，你可以用以下命令查看一下</p><pre><code>ssh -T git@github.com</code></pre><p>&emsp;&emsp;如果成功会有以下提示（我的账户名叫BrightLoong）</p><pre><code>Hi BrightLoong! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>&emsp;&emsp;如果没有，可以参考博客<a href="http://blog.csdn.net/u013626215/article/details/51508085" target="_blank" rel="noopener">git添加ssh-key查看config</a>。</p><p>&emsp;&emsp;如果没有报错误，那么博客就已经搭建起来，并发布到Github上了，在浏览器输入<code>youname.github.io</code>就能看到自己的博客了，如果中途报错说未识别的用户名，那么如果你确定你填写是正确的，重复使用<code>hexo d</code>命令，我当时就遇到过这种情况，我估计是网络不好引起的。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>&emsp;&emsp;博客已经搭建起来了，是不是正如Hexo所说——fast, simple and powerful，这篇文章就说这么多。之后我介绍如何发布文章，更换主题，站点配置文件，以及如何集成第三方应用（多说评论、百度分享等）。希望对大家有帮助。<br></p><p><strong>版权声明：本文为博主原创文章，转载请注明出处 <a href="https://brightloong.github.io">BrightLoong’s Blog</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/hexo_github.jpg&quot; alt=&quot;title-picture&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;前段时间本人利用业余时间，在网上查询各种资料，使用Hexo+Github的方式搭建起了我个人的博客——&lt;a href=&quot;https://brightloong.github.io&quot;&gt;BrightLoong&lt;/a&gt;。
    
    </summary>
    
      <category term="建站" scheme="https://brightloong.github.io/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="https://brightloong.github.io/tags/hexo/"/>
    
      <category term="建站" scheme="https://brightloong.github.io/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>开始Blog之旅</title>
    <link href="https://brightloong.github.io/2017/02/17/%E5%BC%80%E5%A7%8Bblog%E4%B9%8B%E6%97%85/%E5%BC%80%E5%A7%8Bblog%E4%B9%8B%E6%97%85/"/>
    <id>https://brightloong.github.io/2017/02/17/开始blog之旅/开始blog之旅/</id>
    <published>2017-02-17T05:06:46.000Z</published>
    <updated>2017-02-20T02:21:46.226Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/begin.jpg" alt="title-picture"><br>&emsp;&emsp;终于在2017年，也是我大学毕业的第二个年头，抽业余时间，搭建起了属于自己的博客网，<a id="more"></a>说实话，感觉有点迟。但是不管怎么样，至少是开始了，就如那一句话“最困难的是下定决心去做，剩下的只是坚持而已”，我下定决心去做了，并实现了第一步，但是或许最困难的其实是那后面的“坚持而已”。<br><br><br>&emsp;&emsp;不知在何时何地何处，在何人的博客上曾看到过，大概的意思是有输入也要有输出，也就是说不仅要学习新东西，还要能够将学到的东西通过自己输出，反馈给大众；上升到哲学问题，在我看来就是中国的那一句“达则兼济天下”。“输出”我大概是还不太够资格，“达则兼济天下”我可能也做不到，既然如此我也就只好“穷则独善其身”，将自己的所感所想记录下来作为自己的回忆，将自己学习到的东西记录下来作为自己的备忘录，但是如果我自己的“独善其身”能够帮助到一些人，那也是极好的。<br><br><br>&emsp;&emsp;这篇“开始Blog之旅”本就没什么中心思想，作为我的第一篇博客，文笔和内容肯定欠佳。既然如此，我干脆再多说一个话题。最近在大学的群里和同学朋友聊天，二十四、二十五岁的我们仿佛大多都处于一个迷茫的时期，大学毕业后，接收社会的冲撞与洗礼，工作快两年的我们却显得越来越迷茫，不知道自己想要什么，找不到自己要追求的目标，甚至更为甚者觉得生活失去了意义。想想自己，何尝不是也处于这个阶段，也许是因为一成不变的生活让我们感到无趣，也许是工作的压力让我们无法如往日一般无忧无虑，也许是发现自己曾经“面朝大海，春暖花开”的梦想被现实摧毁，又也许是那“采菊东篱下，悠然见南山”的意境已经当然无存。对于这种阶段我不知道怎么办，在思考良久后我给出我自己的回答——不管怎样，生活终将会继续，不是你和生活一同奔跑，就是你被生活推着向前，趁着离三十岁还有一段距离，趁着离“四十而立”还有一段路程，暂时不要把金钱看得太重太重（当然我并没有说没有金钱能生活下去，只是看得太过重要可能你就是被生活推着走了），多尝试不同的东西，可能在不断的尝试中你便能找到那个你能为之付出余生的事，年轻的我们还有试错的机会；找一个能陪你走一辈子的人，这样或许你会期待每一天下班之后回家；健康是最重要的，毕竟健康是“1”，其他是“1”后面的一串“0”,”1之不存0将焉附”；培养自己至少一个兴趣，哪怕这个兴趣就是打游戏，兴趣是你疲劳时候以及不堪工作压力时候放松的途径;最后一点：人生终究不圆满，至少不要让遗憾随处可见。<br><br><br>&emsp;&emsp;感觉自己的话有点多了，那这一段就作为这篇没有中心思想的文章的结尾吧。希望这些文字能成为自己不断学习进步的动力，成为自己生活的回忆以及乐趣，也希望能做到自己博客上的那一句话：Remember what should be remembered, and forget what should be forgotten.Alter what is changeable, and accept what is mutable——记住该记住的，忘记该忘记的。改变能改变的，接受不能改变的，同时也对有拖延症的自己下一个决心，尽力做好后面的“坚持而已”。<br><br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;2017/2/20</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/begin.jpg&quot; alt=&quot;title-picture&quot;&gt;&lt;br&gt;&amp;emsp;&amp;emsp;终于在2017年，也是我大学毕业的第二个年头，抽业余时间，搭建起了属于自己的博客网，
    
    </summary>
    
      <category term="随笔&amp;感悟" scheme="https://brightloong.github.io/categories/%E9%9A%8F%E7%AC%94-%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="感悟" scheme="https://brightloong.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
