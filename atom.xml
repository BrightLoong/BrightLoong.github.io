<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BrightLoong&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://brightloong.github.io/"/>
  <updated>2018-06-17T11:30:28.152Z</updated>
  <id>https://brightloong.github.io/</id>
  
  <author>
    <name>BrightLoong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自旋锁&amp;CLH锁&amp;MCS锁学习记录</title>
    <link href="https://brightloong.github.io/2018/06/17/%E8%87%AA%E6%97%8B%E9%94%81&amp;CLH%E9%94%81&amp;MCS%E9%94%81/"/>
    <id>https://brightloong.github.io/2018/06/17/自旋锁&amp;CLH锁&amp;MCS锁/</id>
    <published>2018-06-17T11:23:11.000Z</published>
    <updated>2018-06-17T11:30:28.152Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://note.youdao.com/yws/api/personal/file/72B241E069444593A36C402C5E96244F?method=download&amp;shareKey=4aeb088325bf5bbf3c9e63fcf8abc8c4" alt="lock"></p><p>本篇文章主要记录自旋锁、CLH锁、MCS锁的学习所得。关于自旋锁和CLH锁、MCS锁，网上已经有很多内容，而且很类似；学习就是学习前人经验，理解、总结，化为己用，因此，虽然网上有很多相关的内容，我也是参考了这些内容，我依然选择记录下了自己的理解，方便自己查阅。<a id="more"></a></p><h3 id="一-自旋锁"><a href="#一-自旋锁" class="headerlink" title="一. 自旋锁"></a>一. 自旋锁</h3><p>自旋锁（SpinLock）：多个线程，当一个线程尝试获取锁的时候，如果锁被占用，就在当前线程循环检查锁是否被释放，这个时候线程并没有进入休眠或者挂起。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>下面是自旋锁的简单实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.concurrent.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/6/13.</span></span><br><span class="line"><span class="comment"> * 自旋锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpinLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">//AtomicReference，CAS，compareAndSet保证了操作的原子性</span></span><br><span class="line">    <span class="keyword">private</span> AtomicReference&lt;Thread&gt; owner = <span class="keyword">new</span> AtomicReference&lt;Thread&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread currentThread = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果锁未被占用，则设置当前线程为锁的拥有者，设置成功返回true，否则返回false</span></span><br><span class="line">        <span class="comment">// null为期望值，currentThread为要设置的值，如果当前内存值和期望值null相等，替换为currentThread</span></span><br><span class="line">        <span class="keyword">while</span> (!owner.compareAndSet(<span class="keyword">null</span>, currentThread)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread currentThread = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只有锁的拥有者才能释放锁，只有上锁的线程获取到的currentThread，才能和内存中的currentThread相等</span></span><br><span class="line">        owner.compareAndSet(currentThread, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用AtomicReference保存当前获取到锁的线程，保证了compareAndSet操作的原子性，关于CAS请参考——<a href="https://www.jianshu.com/p/a914311d0a21" target="_blank" rel="noopener">Java中CAS学习记录</a></li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>非公平锁，并不能保证线程获取锁的顺序。</li><li>保证各个CPU的缓存（L1、L2、L3、跨CPU Socket、主存）的数据一致性，通讯开销很大，在多处理器系统上更严重。</li><li>没法保证公平性，不保证等待进程/线程按照FIFO顺序获得锁。</li></ul><h3 id="二-CLH锁"><a href="#二-CLH锁" class="headerlink" title="二. CLH锁"></a>二. CLH锁</h3><p>CLH锁:Craig, Landin, and Hagersten (好吧，这是三个人的名字)，它是基于链表实现的自旋锁，它不断的轮询前驱的状态，如果前驱释放锁，它就结束自旋转。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>CLH锁实现如下：</p><ul><li>线程持有自己的node变量，node中有一个locked属性，true代表需要锁，false代表不需要锁。</li><li>线程持有前驱的node引用，轮询前驱node的locked属性，true的时候自旋，false的时候代表前驱释放了锁，结束自旋。</li><li>tail始终指向最后加入的线程。</li></ul><h4 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h4><p>其运行用下图做一个说明：<br><img src="https://note.youdao.com/yws/api/personal/file/8080242F752044C795A1A7DE435E64F9?method=download&amp;shareKey=fbc98fe92a7cc46c3bd8f68ed450140b" alt="CLH"></p><ol><li>初始化的时候tail指向一个类似head的节点，此时node的locked属性为false，preNode为空。</li><li>当线程A进来的时候，线程A持有的node节点，node的locked属性为true，preNode指向之前的head节点。</li><li>当线程B进来的时候，线程B持有的node节点，node的locked属性为true，preNode指向线程A的node节点，线程B的node节点locked属性为true，线程A轮询线程B的node节点的locked状态，为true自旋。</li><li>线程A执行完后释放锁（修改locked属性为false），线程B轮询到线程A的node节点locked属性为false，结束自旋。</li></ol><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>CLH自旋锁代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.concurrent.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/6/13.</span></span><br><span class="line"><span class="comment"> * CLH自旋锁，前驱自旋</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLHLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指向最后加入的线程</span></span><br><span class="line">    AtomicReference&lt;Node&gt; tail = <span class="keyword">new</span> AtomicReference&lt;Node&gt;();</span><br><span class="line">    <span class="comment">//当前线程持有的节点,使用ThreadLocal实现了变量的线程隔离</span></span><br><span class="line">    ThreadLocal&lt;Node&gt; node;</span><br><span class="line">    <span class="comment">//前驱节点，使用ThreadLocal实现了变量的线程隔离</span></span><br><span class="line">    ThreadLocal&lt;Node&gt; preNode = <span class="keyword">new</span> ThreadLocal&lt;Node&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CLHLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化node</span></span><br><span class="line">        node = <span class="keyword">new</span> ThreadLocal&lt;Node&gt;() &#123;</span><br><span class="line">            <span class="comment">//线程默认变量的值,如果不Override这个函数，默认值为null</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Node <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Node();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//初始化tail，指向一个node，类似一个head节点，并且该节点locked属性为false</span></span><br><span class="line">        tail.set(<span class="keyword">new</span> Node());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//因为上面提到的构造函数中initialValue()方法，所以每个线程会有一个默认的值</span></span><br><span class="line">        <span class="comment">//并且node的locked属性为false.</span></span><br><span class="line">        Node myNode = node.get();</span><br><span class="line">        <span class="comment">//修改为true，表示需要获取锁</span></span><br><span class="line">        myNode.locked = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//获取这之前最后加入的线程，并把当前加入的线程设置为tail，</span></span><br><span class="line">        <span class="comment">// AtomicReference的getAndSet操作是原子性的</span></span><br><span class="line">        Node preNode = tail.getAndSet(myNode);</span><br><span class="line">        <span class="comment">//设置当前节点的前驱节点</span></span><br><span class="line">        <span class="keyword">this</span>.preNode.set(preNode);</span><br><span class="line">        <span class="comment">//轮询前驱节点的locked属性，尝试获取锁</span></span><br><span class="line">        <span class="keyword">while</span> (preNode.locked) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//解锁很简单，将节点locked属性设置为false，</span></span><br><span class="line">        <span class="comment">//这样轮询该节点的另一个线程可以获取到释放的锁</span></span><br><span class="line">        node.get().locked = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//当前节点设置为前驱节点，也就是上面初始化提到的head节点</span></span><br><span class="line">        node.set(preNode.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="comment">//默认不需要锁</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> locked = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Node中只有一个locked属性，默认false</li><li>ThreadLocal<node> node,当前线程的节点，ThreadLocal实现了变量的线程隔离，关于ThreadLocal可以参考——<a href="https://www.jianshu.com/p/80866ca6c424" target="_blank" rel="noopener">ThreadLocal源码分析</a></node></li><li>ThreadLocal<node> preNode,前驱节点</node></li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>是公平锁，FIFO</li><li>CLH队列锁的优点是空间复杂度低（如果有n个线程，L个锁，每个线程每次只获取一个锁，那么需要的存储空间是O（L+n）</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>介绍缺点前先说一下NUMA和SMP两种处理器结构<br>SMP(Symmetric Multi-Processor)，即对称多处理器结构，指服务器中多个CPU对称工作，每个CPU访问内存地址所需时间相同。其主要特征是共享，包含对CPU，内存，I/O等进行共享。SMP的优点是能够保证内存一致性，缺点是这些共享的资源很可能成为性能瓶颈，随着CPU数量的增加，每个CPU都要访问相同的内存资源，可能导致内存访问冲突，可能会导致CPU资源的浪费。常用的PC机就属于这种。</p><p>NUMA(Non-Uniform Memory Access)非一致存储访问，将CPU分为CPU模块，每个CPU模块由多个CPU组成，并且具有独立的本地内存、I/O槽口等，模块之间可以通过互联模块相互访问，访问本地内存的速度将远远高于访问远地内存(系统内其它节点的内存)的速度，这也是非一致存储访问NUMA的由来。NUMA优点是可以较好地解决原来SMP系统的扩展问题，缺点是由于访问远地内存的延时远远超过本地内存，因此当CPU数量增加时，系统性能无法线性增加。</p><p><strong>现在说CLH锁的缺点是在NUMA系统结构下性能很差，在这种系统结构下，每个线程有自己的内存，如果前趋结点的内存位置比较远，自旋判断前趋结点的locked域，性能将大打折扣。</strong></p><h4 id="另一种实现"><a href="#另一种实现" class="headerlink" title="另一种实现"></a>另一种实现</h4><p>CLH自旋锁在网上还有一种使用AtomicReferenceFieldUpdater实现的版本，这里也把代码贴出来，个人认为这种版本相比较上面的那种实现更难理解，在代码中添加了一些注释帮助理解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.concurrent.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReferenceFieldUpdater;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/6/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLHLock2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CLHNode</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 默认是在等待锁</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> isLocked = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//tail指向最后加入的线程node</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> CLHNode tail ;</span><br><span class="line">    <span class="comment">//AtomicReferenceFieldUpdater基于反射的实用工具，可以对指定类的指定 volatile 字段进行原子更新。</span></span><br><span class="line">    <span class="comment">//对CLHLock2类的tail字段进行原子更新。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReferenceFieldUpdater&lt;CLHLock2, CLHNode&gt; UPDATER = AtomicReferenceFieldUpdater</span><br><span class="line">            . newUpdater(CLHLock2.class, CLHNode .class , <span class="string">"tail"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将node通过参数传入，其实和threadLocal类似，每个线程依然持有了自己的node变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentThread</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">(CLHNode currentThread)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将tail更新成当前线程node，并且返回前一个节点（也就是前驱节点）</span></span><br><span class="line">        CLHNode preNode = UPDATER.getAndSet( <span class="keyword">this</span>, currentThread);</span><br><span class="line">        <span class="comment">//如果preNode为空，表示当前没有线程获取锁，直接执行。</span></span><br><span class="line">        <span class="keyword">if</span>(preNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//轮询前驱状态</span></span><br><span class="line">            <span class="keyword">while</span>(preNode.isLocked ) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(CLHNode currentThread)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//compareAndSet,如果当前tail里面和currentThread相等，设置成功返回true，</span></span><br><span class="line">        <span class="comment">// 表示之后没有线程等待锁，因为tail就是指向当前线程的node。</span></span><br><span class="line">        <span class="comment">// 如果返回false，表示还有其他线程等待锁，则更新isLocked属性为false</span></span><br><span class="line">        <span class="keyword">if</span> (!UPDATER .compareAndSet(<span class="keyword">this</span>, currentThread, <span class="keyword">null</span>)) &#123;</span><br><span class="line">            currentThread. isLocked = <span class="keyword">false</span> ;<span class="comment">// 改变状态，让后续线程结束自旋</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MCS锁"><a href="#MCS锁" class="headerlink" title="MCS锁"></a>MCS锁</h3><p>MCS锁可以解决上面的CLH锁的缺点，MCS 来自于其发明人名字的首字母： John Mellor-Crummey和Michael Scott。</p><p>MCS Spinlock 是一种基于链表的可扩展、高性能、公平的自旋锁，申请线程只在本地变量上自旋，直接前驱负责通知其结束自旋（与CLH自旋锁不同的地方，不在轮询前驱的状态，而是由前驱主动通知），从而极大地减少了不必要的处理器缓存同步的次数，降低了总线和内存的开销。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><img src="https://note.youdao.com/yws/api/personal/file/ACA4D28429DC4D4F9E648B35441301BE?method=download&amp;shareKey=d51c02feb3d6cd7f71e626c7b1c53dae" alt="MSC"></p><ul><li>每个线程持有一个自己的node，node有一个locked属性,true表示等待获取锁，false表示可以获取到锁，并且持有下一个node（后继者）的引用（可能存在）</li><li>线程在轮询自己node的locked状态，true表示锁被其他线程暂用，等待获取锁，自旋。</li><li>线程释放锁的时候，修改后继者（nextNode）的locked属性，通知后继者结束自旋。</li></ul><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.concurrent.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReferenceFieldUpdater;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/6/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MCSLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MCSNode</span> </span>&#123;</span><br><span class="line">        <span class="comment">//持有后继者的引用</span></span><br><span class="line">        MCSNode next;</span><br><span class="line">        <span class="comment">// 默认是在等待锁</span></span><br><span class="line">        <span class="keyword">boolean</span> locked = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> MCSNode tail;<span class="comment">// 指向最后一个申请锁的MCSNode</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReferenceFieldUpdater&lt;MCSLock, MCSNode&gt; UPDATER = AtomicReferenceFieldUpdater</span><br><span class="line">            .newUpdater(MCSLock.class, MCSNode.class, <span class="string">"tail"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">(MCSNode currentThreadMcsNode)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//更新tial为最新加入的线程节点，并取出之前的节点（也就是前驱）</span></span><br><span class="line">        MCSNode predecessor = UPDATER.getAndSet(<span class="keyword">this</span>, currentThreadMcsNode);<span class="comment">//step4</span></span><br><span class="line">        <span class="comment">//前驱为空表示没有线程占用锁</span></span><br><span class="line">        <span class="keyword">if</span> (predecessor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//将当前节点设置为前驱节点的后继者</span></span><br><span class="line">            predecessor.next = currentThreadMcsNode;<span class="comment">//step5</span></span><br><span class="line">            <span class="comment">//轮询自己的isLocked属性</span></span><br><span class="line">            <span class="keyword">while</span> (currentThreadMcsNode.locked) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(MCSNode currentThreadMcsNode)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//UPDATER.get(this) 获取最后加入的线程的node</span></span><br><span class="line">        <span class="comment">//如果获取到的最后加入的node和当前node（currentThreadMcsNode）不相同，表示还有其他线程等待锁，直接修改后继者的isLocked属性。</span></span><br><span class="line">        <span class="comment">//相同代表当前没其他有线程等待锁，进入下面的处理</span></span><br><span class="line">        <span class="keyword">if</span> (UPDATER.get(<span class="keyword">this</span>) == currentThreadMcsNode) &#123;<span class="comment">//step1</span></span><br><span class="line">            <span class="comment">//这个时候可能会有其他线程又加入了进来，检查时候有人排在自己后面，currentThreadMcsNode.next 表示依然没有染排在自己后面</span></span><br><span class="line">            <span class="keyword">if</span> (currentThreadMcsNode.next == <span class="keyword">null</span>) &#123; <span class="comment">//step2</span></span><br><span class="line">                <span class="comment">//将tail设置为空，如果返回true设置成功，如果返回false，表示设置失败（其他线程加入了进来，使得当前tail持有的节点不等于currentThreadMcsNode）</span></span><br><span class="line">                <span class="keyword">if</span> (UPDATER.compareAndSet(<span class="keyword">this</span>, currentThreadMcsNode, <span class="keyword">null</span>)) &#123;<span class="comment">// //step3</span></span><br><span class="line">                    <span class="comment">// 设置成功返回，没有其他线程等待锁</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 突然有其他线程加入，需要检测后继者是否有值，因为：step4执行完后，step5可能还没执行完</span></span><br><span class="line">                    <span class="keyword">while</span> (currentThreadMcsNode.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//修改后继者的isLocked,通知后继者结束自旋</span></span><br><span class="line">            currentThreadMcsNode.next.locked = <span class="keyword">false</span>;</span><br><span class="line">            currentThreadMcsNode.next = <span class="keyword">null</span>;<span class="comment">// for GC</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和CLH锁类似的，我自己用ThreadLocal保存node，而不通过函数传参的方式实现了一个MCS锁，代码如下(大概测试了下没问题，如果有问题希望指出，感谢)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.concurrent.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReferenceFieldUpdater;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/6/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MCSLock2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MCSNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> locked = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//后继节点</span></span><br><span class="line">        MCSNode next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">volatile</span> MCSNode tail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AtomicReferenceFieldUpdater来保证tail原子更新</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicReferenceFieldUpdater&lt;MCSLock2, MCSNode&gt; UPDATER = AtomicReferenceFieldUpdater</span><br><span class="line">            .newUpdater(MCSLock2.class, MCSNode.class, <span class="string">"tail"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前线程持有的节点,使用ThreadLocal实现了变量的线程隔离</span></span><br><span class="line">    ThreadLocal&lt;MCSNode&gt; node = <span class="keyword">new</span> ThreadLocal&lt;MCSNode&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> MCSNode <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MCSNode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MCSNode myNode = node.get();</span><br><span class="line">        MCSNode preNode = UPDATER.getAndSet(<span class="keyword">this</span>, myNode);</span><br><span class="line">        <span class="comment">//类似的，preNode == null从tail中没获取到值标志没有线程占用锁</span></span><br><span class="line">        <span class="keyword">if</span> (preNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            preNode.next = myNode; <span class="comment">//step1</span></span><br><span class="line">            <span class="comment">//在自己node的locked变量自旋</span></span><br><span class="line">            <span class="keyword">while</span> (myNode.locked) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MCSNode myNode = node.get();</span><br><span class="line">        MCSNode next = myNode.next;</span><br><span class="line">        <span class="comment">//如果有后继者，直接设置next.locked = false通知后继者结束自旋.</span></span><br><span class="line">        <span class="comment">//如果有执行下面操作</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//设置成功表示设置期间也没有后继者加入，设置失败表示有后继者加入</span></span><br><span class="line">            <span class="keyword">if</span> (UPDATER.compareAndSet(<span class="keyword">this</span>, myNode, <span class="keyword">null</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//同样的需要等待lock()中step1完成</span></span><br><span class="line">                <span class="keyword">while</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        next.locked = <span class="keyword">false</span>;</span><br><span class="line">        next = <span class="keyword">null</span>; <span class="comment">//for CG</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.cnblogs.com/tonylovett/p/5254765.html" target="_blank" rel="noopener">https://www.cnblogs.com/tonylovett/p/5254765.html</a></li><li><a href="http://www.360doc.com/content/14/0811/22/1073512_401149458.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/14/0811/22/1073512_401149458.shtml</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/72B241E069444593A36C402C5E96244F?method=download&amp;amp;shareKey=4aeb088325bf5bbf3c9e63fcf8abc8c4&quot; alt=&quot;lock&quot;&gt;&lt;/p&gt;
&lt;p&gt;本篇文章主要记录自旋锁、CLH锁、MCS锁的学习所得。关于自旋锁和CLH锁、MCS锁，网上已经有很多内容，而且很类似；学习就是学习前人经验，理解、总结，化为己用，因此，虽然网上有很多相关的内容，我也是参考了这些内容，我依然选择记录下了自己的理解，方便自己查阅。
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://brightloong.github.io/tags/Java/"/>
    
      <category term="并发" scheme="https://brightloong.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——享元模式</title>
    <link href="https://brightloong.github.io/2018/06/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/06/11/设计模式——享元模式/</id>
    <published>2018-06-11T12:43:09.000Z</published>
    <updated>2018-06-11T12:43:43.145Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://note.youdao.com/yws/api/personal/file/WEBcbc7d930aac891ac812432915e5a15bc?method=download&amp;shareKey=2a2e8674935e7a1433c67670e98cb938" alt="FlyWeight"></p><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h3><p><code>享元模式（Flyweight Pattern）</code> ,运用共享技术有效的支持大量的细粒度对象。换句话说，使用享元模式对相同或者类似的对象进行复用，以此来减少少相同或者类似的对象的创建数量，从而减少内存占用，提高性能。<a id="more"></a></p><blockquote><p>享元模式属于结构型模式。</p></blockquote><p>在具体了解前先介绍两个名词：</p><ul><li>内部状态：对象内部共享的内容，不随环境的改变而改变。</li><li>外部状态：相对内部状态，不可以被共享，而且会随环境改变而变化的状态就是外部状态。</li></ul><p>有些时候又把享元模式分成单纯的享元模式和复合享元模式，下面分别介绍。</p><h3 id="二-单纯享元模式"><a href="#二-单纯享元模式" class="headerlink" title="二.单纯享元模式"></a>二.单纯享元模式</h3><p>单纯享元模式，也就是说所有的具体享元类都是可以被共享的，不存在不可以共享的具体享元类。</p><h4 id="1-UML类图解析"><a href="#1-UML类图解析" class="headerlink" title="1. UML类图解析"></a>1. UML类图解析</h4><p>单纯享元模式的UML类图如下：</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB8344b8a37888d2af78889fa5059de3ce?method=download&amp;shareKey=20d92d31c32c7f396931626b285ac235" alt="Flyweight"></p><ul><li>FlyWeight:享元类的接口，接口中operation方法中的extrinsicState为外部状态。</li><li>ConcreteFlyWeight:具体的享元类，实现接口FlyWeight,存储内部状态intrinsicState。</li><li>FlyWeightFactory:享元工厂，用来创建和管理享元对象，其主要思想就是用一个Map来保存已经创建的对象实例。它主要是用来确保合理的共享FlyWeight对象，当用户请求一个FlyWeight对象时（getFlyWeight()方法），工厂提供一个已经存在的FlyWeight实例，如果不存在则创建一个返回。</li></ul><blockquote><p>享元工厂最好使用单例模式实现。</p></blockquote><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h4><h5 id="享元类接口——FlyWeight"><a href="#享元类接口——FlyWeight" class="headerlink" title="享元类接口——FlyWeight"></a>享元类接口——FlyWeight</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.lab.design.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FlyWeight class</span></span><br><span class="line"><span class="comment"> * 定义享元类接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyWeight</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作方法.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> extrinsicState 外部状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String extrinsicState)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="具体享元实现——ConcreteFlyWeight"><a href="#具体享元实现——ConcreteFlyWeight" class="headerlink" title="具体享元实现——ConcreteFlyWeight"></a>具体享元实现——ConcreteFlyWeight</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.lab.design.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConcreteFlyWeight class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyWeight</span> <span class="keyword">implements</span> <span class="title">FlyWeight</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**内部状态*/</span></span><br><span class="line">    <span class="keyword">private</span> String intrinsicState;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法，并设置内部状态.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> intrinsicState</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">ConcreteFlyWeight</span><span class="params">(String intrinsicState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.intrinsicState = intrinsicState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String extrinsicState)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"内部状态："</span> + intrinsicState);</span><br><span class="line">        System.out.println(<span class="string">"外部状态："</span> + extrinsicState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="享元工厂——FlyWeightFactory"><a href="#享元工厂——FlyWeightFactory" class="headerlink" title="享元工厂——FlyWeightFactory"></a>享元工厂——FlyWeightFactory</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.lab.design.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FlyWeightFactory class</span></span><br><span class="line"><span class="comment"> * 用于创建和管理享元对象，本身是单例的。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWeightFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**唯一的factory实例*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FlyWeightFactory factory = <span class="keyword">new</span> FlyWeightFactory();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**用于保存享元对象的map*/</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, FlyWeight&gt; flyWeights = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有的构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FlyWeightFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回FlyWeightFactory唯一实例.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FlyWeightFactory <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单纯享元模式工厂方法.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FlyWeight <span class="title">getFlyWeight</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        FlyWeight flyWeight = flyWeights.get(state);</span><br><span class="line">        <span class="keyword">if</span> (flyWeight == <span class="keyword">null</span>) &#123;</span><br><span class="line">            flyWeight = <span class="keyword">new</span> ConcreteFlyWeight(state);</span><br><span class="line">            flyWeights.put(state, flyWeight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flyWeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="客户端调用和输出"><a href="#客户端调用和输出" class="headerlink" title="客户端调用和输出"></a>客户端调用和输出</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.lab.design.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Client class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FlyWeightFactory factory = FlyWeightFactory.getInstance();</span><br><span class="line">        FlyWeight flyWeight1 = factory.getFlyWeight(<span class="string">"a"</span>);</span><br><span class="line">        FlyWeight flyWeight2 = factory.getFlyWeight(<span class="string">"b"</span>);</span><br><span class="line">        FlyWeight flyWeight3 = factory.getFlyWeight(<span class="string">"a"</span>);</span><br><span class="line">        FlyWeight flyWeight4 = factory.getFlyWeight(<span class="string">"c"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//flyWeight1和flyWeight3具有相同的内部状态a,使用同一个实例，下面结果输出true</span></span><br><span class="line">        System.out.println(flyWeight1 == flyWeight3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不同的外部状态从方法传入</span></span><br><span class="line">        flyWeight2.operation(<span class="string">"hello"</span>);</span><br><span class="line">        flyWeight2.operation(<span class="string">"hi"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">内部状态：b</span><br><span class="line">外部状态：hello</span><br><span class="line">内部状态：b</span><br><span class="line">外部状态：hi</span><br></pre></td></tr></table></figure></p><h3 id="三-复合享元模式"><a href="#三-复合享元模式" class="headerlink" title="三. 复合享元模式"></a>三. 复合享元模式</h3><p>复合享元模式，将一些单纯享元使用组合模式加以组合，可以形成复合享元对象，这样的复合享元对象本身不能共享，但是它们可以分解成单纯享元对象，而后者则可以共享。</p><p>复合享元模式中，组成复合享元对象的每个单纯享元对象拥有自己的内部状态，而每个单纯享元对象的外部状态都和复合享元对象的外部状态相同。<strong><em>所以复合享元模式可以对多个单纯享元对象设置相同的外部状态，</em></strong> 这也是复合享元模式的应用场景。</p><h4 id="1-UML类图解析-1"><a href="#1-UML类图解析-1" class="headerlink" title="1. UML类图解析"></a>1. UML类图解析</h4><p>复合享元模式的UML类图如下：<br><img src="https://note.youdao.com/yws/api/personal/file/WEBbd58cfe58b8c8611e51cec045e136d67?method=download&amp;shareKey=8534150b5a62d87efd65b6acafccd89d" alt="Flyweight"></p><ul><li>FlyWeight:享元类的接口，接口中operation方法中的extrinsicState为外部状态,是单纯享元类和复合享元类的共同接口。</li><li>ConcreteFlyWeight:具体的享元类，实现接口FlyWeight,存储内部状态intrinsicState。</li><li>CompositeConcreteFlyweight：复合享元类，实现FlyWeight接口，同时使用Map来保存单纯享元对象，并提供add()和remove()方法来增加或者删除单纯享元对象。</li><li>FlyWeightFactory:享元工厂，用来创建和管理享元对象，其主要思想就是用一个Map来保存已经创建的对象实例。它主要是用来确保合理的共享FlyWeight对象。<ul><li>getFlyWeight(state:String):单纯享元工厂方法，当用户请求一个FlyWeight对象时，工厂提供一个已经存在的FlyWeight实例，如果不存在则创建一个返回(直接返回单纯享元对象)。</li><li>getFlyWeight(states:List<string>):复合享元工厂方法，根据提供的states:List<string>，使用add()方法，将每个state对应的单纯享元对象添加到复合享元对象（CompositeConcreteFlyweight）的flyWeights中，并且这些单纯享元对象是从FlyWeightFactory的flyWeights中获取的（如果不存在则添加并返回），因此这些单纯享元对象是可以共享的。</string></string></li></ul></li></ul><h4 id="2-代码实现-1"><a href="#2-代码实现-1" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h4><p>接口和单纯享元类的代码在上面已经列出了，下面是其他相关代码。</p><h5 id="复合享元类——CompositeConcreteFlyweight"><a href="#复合享元类——CompositeConcreteFlyweight" class="headerlink" title="复合享元类——CompositeConcreteFlyweight"></a>复合享元类——CompositeConcreteFlyweight</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.lab.design.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CompositeConcreteFlyweight class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeConcreteFlyweight</span> <span class="keyword">implements</span> <span class="title">FlyWeight</span> </span>&#123;</span><br><span class="line">    Map&lt;String, FlyWeight&gt; flyWeights = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * flyWeights是单纯享元对象的集合，它们具有相同的外部状态extrinsicState，</span></span><br><span class="line"><span class="comment">     * 调用的时候使用循环调用单纯享元对象的operation方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> extrinsicState 外部状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String extrinsicState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, FlyWeight&gt; entry : flyWeights.entrySet()) &#123;</span><br><span class="line">            entry.getValue().operation(extrinsicState);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加单纯享元对象.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> flyWeight</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String state, FlyWeight flyWeight)</span> </span>&#123;</span><br><span class="line">        flyWeights.put(state, flyWeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除单纯享元对象.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        flyWeights.remove(state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改后的享元工厂——FlyWeightFactory"><a href="#修改后的享元工厂——FlyWeightFactory" class="headerlink" title="修改后的享元工厂——FlyWeightFactory"></a>修改后的享元工厂——FlyWeightFactory</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.lab.design.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FlyWeightFactory class</span></span><br><span class="line"><span class="comment"> * 用于创建和管理享元对象，本身是单例的。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWeightFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**唯一的factory实例*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FlyWeightFactory factory = <span class="keyword">new</span> FlyWeightFactory();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**用于保存享元对象的map*/</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, FlyWeight&gt; flyWeights = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有的构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FlyWeightFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回FlyWeightFactory唯一实例.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FlyWeightFactory <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单纯享元模式工厂方法.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> state key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FlyWeight <span class="title">getFlyWeight</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        FlyWeight flyWeight = flyWeights.get(state);</span><br><span class="line">        <span class="keyword">if</span> (flyWeight == <span class="keyword">null</span>) &#123;</span><br><span class="line">            flyWeight = <span class="keyword">new</span> ConcreteFlyWeight(state);</span><br><span class="line">            flyWeights.put(state, flyWeight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flyWeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复合享元模式工厂方法.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> states</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FlyWeight <span class="title">getFlyWeight</span><span class="params">(List&lt;String&gt; states)</span> </span>&#123;</span><br><span class="line">        CompositeConcreteFlyweight flyWeight = <span class="keyword">new</span> CompositeConcreteFlyweight();</span><br><span class="line">        <span class="keyword">for</span> (String state : states) &#123;</span><br><span class="line">            <span class="comment">//调用了单纯享元模式工厂方法,所以使用flyWeight.add加入的单纯享元对象是可以共享的</span></span><br><span class="line">            flyWeight.add(state, <span class="keyword">this</span>.getFlyWeight(state));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flyWeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="客户端调用和输出-1"><a href="#客户端调用和输出-1" class="headerlink" title="客户端调用和输出"></a>客户端调用和输出</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.lab.design.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Client2 class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FlyWeightFactory factory = FlyWeightFactory.getInstance();</span><br><span class="line">        List&lt;String&gt; states = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        states.add(<span class="string">"a"</span>);</span><br><span class="line">        states.add(<span class="string">"b"</span>);</span><br><span class="line">        states.add(<span class="string">"c"</span>);</span><br><span class="line">        FlyWeight flyWeight = factory.getFlyWeight(states);</span><br><span class="line">        FlyWeight flyWeight2 = factory.getFlyWeight(states);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//并不相等，输出false，复合享元对象不可共享</span></span><br><span class="line">        System.out.println(flyWeight == flyWeight2);</span><br><span class="line">        <span class="comment">//多个单纯享元对象具有相同的外部状态hello</span></span><br><span class="line">        flyWeight.operation(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">内部状态：a</span><br><span class="line">外部状态：hello</span><br><span class="line">内部状态：b</span><br><span class="line">外部状态：hello</span><br><span class="line">内部状态：c</span><br><span class="line">外部状态：hello</span><br></pre></td></tr></table></figure></p><h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h3><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>系统中有大量相同或者相似的对象，因此而造成了系统存储开销。</li><li>对象的大多数状态是外部状态，如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象，此时可以考虑使用享元模式。也就是说可以将外部状态使用传入对象的方式来处理。</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>实现了对象的共享</li><li>使用享元模式减少对象的创建，减少了对内存的使用。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>使用享元模式，需要分离出内部状态和外部状态，使得系统更加复杂。</li></ul><h4 id="多说一句"><a href="#多说一句" class="headerlink" title="多说一句"></a>多说一句</h4><p>Java中String就是对享元模式的应用，如下代码会输出true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"Hello Word"</span>;</span><br><span class="line">String b = <span class="string">"Hello Word"</span>;</span><br><span class="line">System.out.println(a == b);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://note.youdao.com/yws/api/personal/file/WEBcbc7d930aac891ac812432915e5a15bc?method=download&amp;amp;shareKey=2a2e8674935e7a1433c67670e98cb938&quot; alt=&quot;FlyWeight&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一.概述&quot;&gt;&lt;/a&gt;一.概述&lt;/h3&gt;&lt;p&gt;&lt;code&gt;享元模式（Flyweight Pattern）&lt;/code&gt; ,运用共享技术有效的支持大量的细粒度对象。换句话说，使用享元模式对相同或者类似的对象进行复用，以此来减少少相同或者类似的对象的创建数量，从而减少内存占用，提高性能。
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java中CAS学习记录</title>
    <link href="https://brightloong.github.io/2018/06/10/Java%E4%B8%ADCAS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://brightloong.github.io/2018/06/10/Java中CAS学习记录/</id>
    <published>2018-06-10T14:30:13.000Z</published>
    <updated>2018-06-10T15:48:49.370Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/source-code/CAS/CAS.jpg" alt="CAS"><br>CAS在网上已经有数不清的文章，这里只是自己在学习过程中的一个记录，方便以后查阅。</p><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一. 概述"></a>一. 概述</h3><p>Java中CAS全称Compare and Swap，也就是比较交换。在Java同步工具中，经常可以看到CAS的身影。在Doug Lea大神提供的J.U.C并发包中，可以说CAS是实现整个J.U.C包的基石。<a id="more"></a></p><p><strong>在CAS方法中，有三个操作数，当前的内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相等时，将内存值V修改为B，否则什么都不做<em>。</em></strong></p><p>因为CAS会在进行修改的时候对当前内存值进行检测，所以当有其他线程修改了变量值的时候，这个时候当前线程的修改就会失败，以此来保证了“读-修改-写”操作的原子性。</p><h3 id="三-CAS使用"><a href="#三-CAS使用" class="headerlink" title="三. CAS使用"></a>三. CAS使用</h3><p>先来看下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.lab.concurrent.cas;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * NoUseCAS class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/6/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoUseCAS</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        value++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NoUseCAS noUseCAS = <span class="keyword">new</span> NoUseCAS();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    noUseCAS.add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"最后结果："</span> + noUseCAS.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果每次都可能不一样，而不是每次都输出10。通过volatile虽然保证了变量线程之间的可见性，但是并不能保证“++”操作的原子性，因为“++”操作是先获取到值，然后再执行“+”操作，找到NoUseCAS.class文件，执行<code>javap -c NoUseCAS.class</code> 得到字节码，找到“add()”方法的字节码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void add();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: dup</span><br><span class="line">       2: getfield      #2                  // Field value:I</span><br><span class="line">       5: iconst_1</span><br><span class="line">       6: iadd</span><br><span class="line">       7: putfield      #2                  // Field value:I</span><br><span class="line">      10: return</span><br></pre></td></tr></table></figure><p>可以看到getfield获取当前的值，iadd执行加操作，putfield赋值，如果这个时候线程A在执行完getfield后，拿到值为2，同时有另一个线程B将值修改为3，这个时候线程A继续执行操作的话最后会返回结果3，这就和期望的值不一样了。</p><h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><p>可以使用AtomicInteger来解决上面的问题，它提供了getAndIncrement()方法来替代“++”操作，并且保证了该操作的原子性，</p><p>代码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6214790243416807050L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//变量内存偏移地址</span></span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(<span class="string">"value"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用volatile修饰保证线程间的可见性。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//原子++操作，并调用unsafe.getAndAddInt</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unsafe.java中相关代码片段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用了compareAndSwapInt()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> var5;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">        &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var5;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调用本地方法（native）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4, <span class="keyword">int</span> var5)</span></span>;</span><br></pre></td></tr></table></figure><p>下面具体分析本地方法</p><h3 id="三-CAS原理"><a href="#三-CAS原理" class="headerlink" title="三. CAS原理"></a>三. CAS原理</h3><p>在openjdk9中找到unsafe.cpp，其路径为：jdk9u/hotspot/src/share/vm/prims/unsafe.cpp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//定义compareAndSetInt为Unsafe_CompareAndSetInt</span><br><span class="line">&#123;CC &quot;compareAndSetInt&quot;,   CC &quot;(&quot; OBJ &quot;J&quot;&quot;I&quot;&quot;I&quot;&quot;)Z&quot;,  FN_PTR(Unsafe_CompareAndSetInt)&#125;,</span><br><span class="line"></span><br><span class="line">UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSetInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x)) &#123;</span><br><span class="line">  oop p = JNIHandles::resolve(obj);</span><br><span class="line">  //获取内存地址</span><br><span class="line">  jint* addr = (jint *)index_oop_from_field_offset_long(p, offset);</span><br><span class="line"></span><br><span class="line">  return (jint)(Atomic::cmpxchg(x, addr, e)) == e;</span><br><span class="line">&#125; UNSAFE_END</span><br></pre></td></tr></table></figure></p><p>Atomic::cmpxchg在atomic.hpp中，文件路径为：jdk9u/hotspot/src/share/vm/runtime/atomic.hpp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">inline unsigned Atomic::cmpxchg(unsigned int exchange_value,</span><br><span class="line">                         volatile unsigned int* dest, unsigned int compare_value,</span><br><span class="line">                         cmpxchg_memory_order order) &#123;</span><br><span class="line">  assert(sizeof(unsigned int) == sizeof(jint), &quot;more work to do&quot;);</span><br><span class="line">  return (unsigned int)Atomic::cmpxchg((jint)exchange_value, (volatile jint*)dest,</span><br><span class="line">                                       (jint)compare_value, order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用的是内联函数（inline）,会根据当前处理器的类型调用对应的内联函数，以下是windows_x86的实现。文件路径为：jdk9u/hotspot/src/os_cpu/windows_x86/vm/atomic_windows_x86.hpp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">inline jint     Atomic::cmpxchg    (jint     exchange_value, volatile jint*     dest, jint     compare_value, cmpxchg_memory_order order) &#123;</span><br><span class="line">  // alternative for InterlockedCompareExchange</span><br><span class="line">  int mp = os::is_MP();</span><br><span class="line">  __asm &#123;</span><br><span class="line">    mov edx, dest</span><br><span class="line">    mov ecx, exchange_value</span><br><span class="line">    mov eax, compare_value</span><br><span class="line">    LOCK_IF_MP(mp)</span><br><span class="line">    cmpxchg dword ptr [edx], ecx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>LOCK_IF_MP(MP):判断前系统是否为多核处理器如果是则为cmpxchg指令添加lock前缀。</p></li><li><p>cmpxchg：使用cmpxchg指令</p><p>intel手册对lock前缀的说明如下(参考：<a href="https://www.jianshu.com/p/fb6e91b013cc)：" target="_blank" rel="noopener">https://www.jianshu.com/p/fb6e91b013cc)：</a></p></li><li><p>确保后续指令执行的原子性。</p><p>在Pentium及之前的处理器中，带有lock前缀的指令在执行期间会锁住总线，使得其它处理器暂时无法通过总线访问内存，很显然，这个开销很大。在新的处理器中，Intel使用缓存锁定来保证指令执行的原子性，缓存锁定将大大降低lock前缀指令的执行开销。</p></li><li><p>禁止该指令与前面和后面的读写指令重排序。</p></li><li><p>把写缓冲区的所有数据刷新到内存中。</p></li></ul><h3 id="CAS的ABA问题"><a href="#CAS的ABA问题" class="headerlink" title="CAS的ABA问题"></a>CAS的ABA问题</h3><p>CAS存在ABA的问题，如下图所示，线程A最开始获取的值A，到赋值前检查的时候依然是A，然后进行了赋值；但是线程A并不知道这期间有线程B将值更改为B，然后又有线程C将值改回A。<br><img src="https://brightloong.github.io/images/source-code/CAS/CAS.png" alt="CAS"><br>我们可以使用版本号来解决以上的问题，也就是上面的修改就会变成1A-1B-2A,就可以发现最开始是1A，但是比较的时候是2A，代表这期间被改动过。可以使用AtomicStampedReference解决ABA的问题，它就是使用版本号来标记变量来保证CAS的正确性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/source-code/CAS/CAS.jpg&quot; alt=&quot;CAS&quot;&gt;&lt;br&gt;CAS在网上已经有数不清的文章，这里只是自己在学习过程中的一个记录，方便以后查阅。&lt;/p&gt;
&lt;h3 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一. 概述&quot;&gt;&lt;/a&gt;一. 概述&lt;/h3&gt;&lt;p&gt;Java中CAS全称Compare and Swap，也就是比较交换。在Java同步工具中，经常可以看到CAS的身影。在Doug Lea大神提供的J.U.C并发包中，可以说CAS是实现整个J.U.C包的基石。
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://brightloong.github.io/tags/Java/"/>
    
      <category term="CAS" scheme="https://brightloong.github.io/tags/CAS/"/>
    
      <category term="并发" scheme="https://brightloong.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——适配器模式</title>
    <link href="https://brightloong.github.io/2018/06/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/06/06/设计模式——适配器模式/</id>
    <published>2018-06-06T14:44:14.000Z</published>
    <updated>2018-06-06T14:45:07.297Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/adapter/adapter.jpg" alt="adapter"></p><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一. 概述"></a>一. 概述</h3><p><code>适配器模式（Adapter）</code> ，将一个类的接口转换为客户希望的另一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那个类可以一起工作。<a id="more"></a></p><p>关于适配器，现实生活中也有很多例子，比如电源适配器，中国家庭供电为220V，而手机一般需求是在5V，这里220V就是不兼容的那个类，但我们又需要其供电，我们用电源适配器将其转为5V，使手机能正常充电。还有各种转接头（HDMI转接头，type-c转接头等），顺便说一下，Java中的IO中可以看到适配器模式的使用。</p><blockquote><p>适配器模式属于结构型模式 </p></blockquote><h3 id="二-UML类图解析"><a href="#二-UML类图解析" class="headerlink" title="二. UML类图解析"></a>二. UML类图解析</h3><p>在GoF的设计模式中，适配器模式讲了两种类型——类适配器模式和对象适配器模式。由于类适配器模式需要继承被适配的类，同时有可能需要继承目标类，而Java又不支持多重继承，<strong>所以平时常用的是对象适配器模式</strong>。下面也会对类适配器模式进行简单的介绍。</p><h4 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h4><p><img src="https://brightloong.github.io/images/design-pattern/adapter/adapter.png" alt="adapter"></p><ul><li>Client：客户端。</li><li>Target：目标接口，客户端所期待的目标接口（可以是具体的或抽象的类，也可以是接口）。</li><li>Adapter：适配器，实现目标接口，通过在内部持有一个Adaptee引用，把源接口（Adaptee）转成目标接口（Target）。</li><li>Adaptee：需要适配的类。</li></ul><h4 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h4><p><img src="https://brightloong.github.io/images/design-pattern/adapter/classAdapter.png" alt="adapter"></p><p>基本和对象适配器模式相同，唯一不同的是适配器（Adapter）不在持有Adaptee的引用，而采用继承Adaptee的方式，实现把源接口（Adaptee）转成目标接口（Target）。</p><h3 id="三-代码实现"><a href="#三-代码实现" class="headerlink" title="三. 代码实现"></a>三. 代码实现</h3><p>就基于上面的电源适配器场景来进行代码实现。目标接口——MobileCharge（需要5V电流），需要被适配的22V电源——Power220V，电源适配器——PowerAdapter</p><h4 id="目标接口——MobileCharge"><a href="#目标接口——MobileCharge" class="headerlink" title="目标接口——MobileCharge"></a>目标接口——MobileCharge</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 充电接口</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/6/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MobileCharge</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outPut5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="需要被适配的22V电源——Power220V"><a href="#需要被适配的22V电源——Power220V" class="headerlink" title="需要被适配的22V电源——Power220V"></a>需要被适配的22V电源——Power220V</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需要被适配的类</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/6/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Power220V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outPut220V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"输出220V电流"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="电源适配器——PowerAdapter-对象适配器模式"><a href="#电源适配器——PowerAdapter-对象适配器模式" class="headerlink" title="电源适配器——PowerAdapter(对象适配器模式)"></a>电源适配器——PowerAdapter(对象适配器模式)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象适配器</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/6/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PowerAdapter</span> <span class="keyword">implements</span> <span class="title">MobileCharge</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要适配的220V电源</span></span><br><span class="line">    <span class="keyword">private</span> Power220V power220V;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PowerAdapter</span><span class="params">(Power220V power220V)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.power220V = power220V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outPut5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        power220V.outPut220V();</span><br><span class="line">        System.out.println(<span class="string">"电源适配器转换"</span>);</span><br><span class="line">        System.out.println(<span class="string">"输出5V电流"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用类适配模式的电源适配器——PowerAdapter2"><a href="#使用类适配模式的电源适配器——PowerAdapter2" class="headerlink" title="使用类适配模式的电源适配器——PowerAdapter2"></a>使用类适配模式的电源适配器——PowerAdapter2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类适配器，使用继承的方式</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/6/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PowerAdapter2</span> <span class="keyword">extends</span> <span class="title">Power220V</span> <span class="keyword">implements</span> <span class="title">MobileCharge</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outPut5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.outPut220V();</span><br><span class="line">        System.out.println(<span class="string">"电源适配器转换"</span>);</span><br><span class="line">        System.out.println(<span class="string">"输出5V电流"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端调用和输出"><a href="#客户端调用和输出" class="headerlink" title="客户端调用和输出"></a>客户端调用和输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.adapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/6/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MobileCharge mobileCharge = <span class="keyword">new</span> PowerAdapter(<span class="keyword">new</span> Power220V());</span><br><span class="line">        System.out.println(<span class="string">"手机充电"</span>);</span><br><span class="line">        mobileCharge.outPut5V();</span><br><span class="line">        System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line">        <span class="comment">//类适配器模式</span></span><br><span class="line">        MobileCharge mobileCharge2 = <span class="keyword">new</span> PowerAdapter2();</span><br><span class="line">        mobileCharge2.outPut5V();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">手机充电</span><br><span class="line">输出220V电流</span><br><span class="line">电源适配器转换</span><br><span class="line">输出5V电流</span><br><span class="line">-------------------</span><br><span class="line">输出220V电流</span><br><span class="line">电源适配器转换</span><br><span class="line">输出5V电流</span><br></pre></td></tr></table></figure><h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h3><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><blockquote><p>注意：适配器模式是更多的为了解决已有的在运行的项目中的问题，而不是解决开发阶段的项目，开发阶段的项目应该进行良好的设计。</p></blockquote><ul><li>系统的数据和行为都正确，但接口不符时。</li><li>希望复用一些现存的类，但是接口又与复用环境要求不一致的情况。</li><li>想使用一个已经存在的类，但是它的接口，也就是它的方法和你的要求不同时。</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>因为适配器模式可以让不满足要求的类满足要求，所以提高了类的复用。</li><li>使目标类和适配者类解耦，增加了类的透明性，通过引入一个适配器类来重用现有的适配者类，无需修改原有结构。 </li><li>具有较强的灵活性和扩展性，可以很方便的增加适配器。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>一次最多只能适配一个适配者类，不能同时适配多个适配者。 （类适配器存在的问题，因为不能多重继承，考虑使用对象适配器，持有多个适配者）</li><li>目标抽象类只能为接口，不能为类，其使用有一定的局限性。(类适配器存在的问题，因为不能多重继承，如果是类，考虑继承而不是实现) </li><li>对象适配器</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/adapter/adapter.jpg&quot; alt=&quot;adapter&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一. 概述&quot;&gt;&lt;/a&gt;一. 概述&lt;/h3&gt;&lt;p&gt;&lt;code&gt;适配器模式（Adapter）&lt;/code&gt; ，将一个类的接口转换为客户希望的另一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那个类可以一起工作。
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal源码解析</title>
    <link href="https://brightloong.github.io/2018/05/28/ThreadLocal%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://brightloong.github.io/2018/05/28/ThreadLocal源码解析/</id>
    <published>2018-05-28T14:16:09.000Z</published>
    <updated>2018-05-28T14:24:01.874Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/source-code/threadLocal/threadLocal.jpg" alt="threadLocal"></p><h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h3><p>提醒篇幅较大需耐心。</p><p><em>简介来自ThreadLocal类注释</em></p><p>ThreadLocal类提供了线程局部 (thread-local) 变量。这些变量与普通变量不同，每个线程都可以通过其 get 或 set方法来访问自己的独立初始化的变量副本。ThreadLocal 实例通常是类中的 private static 字段，它们希望将状态与某一个线程（例如，用户 ID 或事务 ID）相关联。<a id="more"></a></p><p>下面是类注释中给出的一个列子：</p><p>以下类生成对每个线程唯一的局部标识符。 线程 ID 是在第一次调用 UniqueThreadIdGenerator.getCurrentThreadId() 时分配的，在后续调用中不会更改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadId</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Atomic integer containing the next thread ID to be assigned</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger nextId = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Thread local variable containing each thread's ID</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Integer&gt; threadId =</span><br><span class="line">            <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> nextId.getAndIncrement();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the current thread's unique ID, assigning it if necessary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadId.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.print(threadId.get());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果 ：01234</p><p>只要线程是活动的并且 ThreadLocal 实例是可访问的，每个线程都会保持对其线程局部变量副本的隐式引用；在线程消失之后，其线程局部实例的所有副本都会被垃圾回收（除非存在对这些副本的其他引用）。</p><h3 id="二-整体认识"><a href="#二-整体认识" class="headerlink" title="二. 整体认识"></a>二. 整体认识</h3><h4 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://brightloong.github.io/images/source-code/threadLocal/threadLocal.png" alt="threadLocal UML"></p><p>ThreadLocal中的嵌套内部类ThreadLocalMap，这个类本质上是一个map，和HashMap之类的实现相似，依然是key-value的形式，其中有一个内部类Entry，其中key可以看做是ThreadLocal实例，但是其本质是持有ThreadLocal实例的弱引用（之后会详细说到）。</p><p>还是说ThreadLocalMap（下面是很大篇幅的阅读其源码，毕竟了解清楚了ThreadLocalMap的来龙去脉，ThreadLocal基本也就差不多了），在ThreadLocal中并没有对于ThreadLocalMap的引用，是的，ThreadLocalMap的引用在Thread类中，代码如下。每个线程在向ThreadLocal里塞值的时候，其实都是向自己所持有的ThreadLocalMap里塞入数据；读的时候同理，首先从自己线程中取出自己持有的ThreadLocalMap，然后再根据ThreadLocal引用作为key取出value，基于以上描述，ThreadLocal实现了变量的线程隔离（当然，毕竟变量其实都是从自己当前线程实例中取出来的）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span><br><span class="line"><span class="comment">     * by the ThreadLocal class. */</span></span><br><span class="line">    ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h4 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h4><p>根据理解，画出ThreadLocal原理图如下：<br><img src="https://brightloong.github.io/images/source-code/threadLocal/threadLocal_key.png" alt="原理图"></p><ul><li>首先，主线程定义的两个ThreadLocal变量，和两个子线程——线程A和线程B。</li><li>线程A和线程B分别持有一个ThreadLocalMap用于保存自己独立的副本，主线程的ThreadLocal中封装了get()和set()之类的方法。</li><li>在线程A和线程B中调用ThreadLocal的set方法，会首先通过getMap(Thread.currentThread)获得线程A或者是线程B持有的ThreadLocalMap,在调用map.put()方法，并将ThreadLocal作为key。</li><li>get()方法和set()方法原理类似，也是先获取当前调用线程的ThreadLocalMap,再从map中获取value，并将ThreadLocal作为key。</li></ul><h3 id="三-ThreadLocalMap源码分析"><a href="#三-ThreadLocalMap源码分析" class="headerlink" title="三. ThreadLocalMap源码分析"></a>三. ThreadLocalMap源码分析</h3><p>下面一步一步介绍ThreadLocalMap源码分析的相关源码，在分析ThreadLocalMap的同时，也会介绍与ThreadLocalMap关联的ThreadLocal中的方法（这样分析完ThreadLocalMap，ThreadLocal基本就搞定了），可能有些需要前后结合才能真正理解。</p><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始容量 —— 必须是2的冥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存放数据的table，Entry类的定义在下面分析</span></span><br><span class="line"><span class="comment"> * 同样，数组长度必须是2的冥。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组里面entrys的个数，可以用于判断table当前使用量是否超过负因子。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行扩容的阈值，表使用量大于它的时候进行扩容。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> threshold; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义为长度的2/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    threshold = len * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个值的含义已经在注释里面说了，就不再一一解释。</p><h4 id="存储结构——Entry"><a href="#存储结构——Entry" class="headerlink" title="存储结构——Entry"></a>存储结构——Entry</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Entry继承WeakReference，并且用ThreadLocal作为key.如果key为null</span></span><br><span class="line"><span class="comment"> * (entry.get() == null)表示key不再被引用，表示ThreadLocal对象被回收</span></span><br><span class="line"><span class="comment"> * 因此这时候entry也可以从table从清除。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">    Object value;</span><br><span class="line"></span><br><span class="line">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">        <span class="keyword">super</span>(k);</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Entry继承WeakReference,使用弱引用，可以将ThreadLocal对象的生命周期和线程生命周期解绑，持有对ThreadLocal的弱引用，可以使得ThreadLocal在没有其他强引用的时候被回收掉，这样可以避免因为线程得不到销毁导致ThreadLocal对象无法被回收。</p><p>关于WeakReference可以参考我之前的博客，<a href="https://brightloong.github.io/2018/05/27/%E5%85%B3%E4%BA%8EJava%E4%B8%AD%E7%9A%84WeakReference/">关于Java中的WeakReferencea</a>。</p><h4 id="ThreadLocalMap的set-方法和Hash映射"><a href="#ThreadLocalMap的set-方法和Hash映射" class="headerlink" title="ThreadLocalMap的set()方法和Hash映射"></a>ThreadLocalMap的set()方法和Hash映射</h4><p>要了解ThreadLocalMap中Hash映射的方式，首先从ThreadLocal的set()方法入手，逐层深入。</p><h5 id="ThreadLocal中的set"><a href="#ThreadLocal中的set" class="headerlink" title="ThreadLocal中的set()"></a>ThreadLocal中的set()</h5><p>先看看ThreadLocal中set()源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocal.ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThreadLocal.<span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> ThreadLocal.ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码很简单，获取当前线程，并获取当前线程的ThreadLocalMap实例（从getMap(Thread t)中很容易看出来）。</li><li>如果获取到的map实例不为空，调用map.set()方法，否则调用构造函数 ThreadLocal.ThreadLocalMap(this, firstValue)实例化map。</li></ul><p>可以看出来线程中的ThreadLocalMap使用的是延迟初始化，在第一次调用get()或者set()方法的时候才会进行初始化。下面来看看构造函数<code>ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue)</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">    <span class="comment">//初始化table</span></span><br><span class="line">    table = <span class="keyword">new</span> ThreadLocal.ThreadLocalMap.Entry[INITIAL_CAPACITY];</span><br><span class="line">    <span class="comment">//计算索引</span></span><br><span class="line">    <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//设置值</span></span><br><span class="line">    table[i] = <span class="keyword">new</span> ThreadLocal.ThreadLocalMap.Entry(firstKey, firstValue);</span><br><span class="line">    size = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//设置阈值</span></span><br><span class="line">    setThreshold(INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要说一下计算索引，<code>firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - 1)</code>。</p><ul><li>关于<code>&amp; (INITIAL_CAPACITY - 1)</code>,这是取模的一种方式，对于2的幂作为模数取模，用此代替<code>%(2^n)</code>。至于为什么可以这样这里不过多解释，原理很简单。</li><li>关于<code>firstKey.threadLocalHashCode</code>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode =</span><br><span class="line">        <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;</span><br></pre></td></tr></table></figure><p>定义了一个AtomicInteger类型，每次获取当前值并加上HASH_INCREMENT，<code>HASH_INCREMENT = 0x61c88647</code>,关于这个值和<code>斐波那契散列</code>有关，其原理这里不再深究，感兴趣可自行搜索，其主要目的就是为了让哈希码能均匀的分布在2的n次方的数组里, 也就是<code>Entry[] table</code>中。</p><p>在了解了上面的源码后，终于能进入正题了，下面开始进入ThreadLocalMap中的set()。</p><h5 id="ThreadLocalMap中的set"><a href="#ThreadLocalMap中的set" class="headerlink" title="ThreadLocalMap中的set()"></a>ThreadLocalMap中的set()</h5><p>ThreadLocalMap使用<code>线性探测法</code>来解决哈希冲突，线性探测法的地址增量di = 1, 2, … , m-1，其中，i为探测次数。该方法一次探测下一个地址，直到有空的地址后插入，若整个空间都找不到空余的地址，则产生溢出。假设当前table长度为16，也就是说如果计算出来key的hash值为14，如果table[14]上已经有值，并且其key与当前key不一致，那么就发生了hash冲突，这个时候将14加1得到15，取table[15]进行判断，这个时候如果还是冲突会回到0，取table[0],以此类推，直到可以插入。</p><p>按照上面的描述，<code>可以把table看成一个环形数组</code>。</p><p>先看一下线性探测相关的代码，从中也可以看出来table实际是一个环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**java</span></span><br><span class="line"><span class="comment">    /**</span></span><br><span class="line"><span class="comment">     * 获取环形数组的下一个索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((i + <span class="number">1</span> &lt; len) ? i + <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取环形数组的上一个索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">prevIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((i - <span class="number">1</span> &gt;= <span class="number">0</span>) ? i - <span class="number">1</span> : len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ThreadLocalMap的set()及其set()相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    <span class="comment">//计算索引，上面已经有说过。</span></span><br><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据获取到的索引进行循环，如果当前索引上的table[i]不为空，在没有return的情况下，</span></span><br><span class="line"><span class="comment">     * 就使用nextIndex()获取下一个（上面提到到线性探测法）。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (ThreadLocal.ThreadLocalMap.Entry e = tab[i];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">        <span class="comment">//table[i]上key不为空，并且和当前key相同，更新value</span></span><br><span class="line">        <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * table[i]上的key为空，说明被回收了（上面的弱引用中提到过）。</span></span><br><span class="line"><span class="comment">         * 这个时候说明改table[i]可以重新使用，用新的key-value将其替换,并删除其他无效的entry</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            replaceStaleEntry(key, value, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到为空的插入位置，插入值，在为空的位置插入需要对size进行加1操作</span></span><br><span class="line">    tab[i] = <span class="keyword">new</span> ThreadLocal.ThreadLocalMap.Entry(key, value);</span><br><span class="line">    <span class="keyword">int</span> sz = ++size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cleanSomeSlots用于清除那些e.get()==null，也就是table[index] != null &amp;&amp; table[index].get()==null</span></span><br><span class="line"><span class="comment">     * 之前提到过，这种数据key关联的对象已经被回收，所以这个Entry(table[index])可以被置null。</span></span><br><span class="line"><span class="comment">     * 如果没有清除任何entry,并且当前使用量达到了负载因子所定义(长度的2/3)，那么进行rehash()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">        rehash();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 替换无效entry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceStaleEntry</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">int</span> staleSlot)</span> </span>&#123;</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry e;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的无效entry的位置（staleSlot）,向前扫描</span></span><br><span class="line"><span class="comment">     * 一段连续的entry(这里的连续是指一段相邻的entry并且table[i] != null),</span></span><br><span class="line"><span class="comment">     * 直到找到一个无效entry，或者扫描完也没找到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> slotToExpunge = staleSlot;<span class="comment">//之后用于清理的起点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = prevIndex(staleSlot, len);</span><br><span class="line">         (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">         i = prevIndex(i, len))</span><br><span class="line">        <span class="keyword">if</span> (e.get() == <span class="keyword">null</span>)</span><br><span class="line">            slotToExpunge = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向后扫描一段连续的entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nextIndex(staleSlot, len);</span><br><span class="line">         (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">         i = nextIndex(i, len)) &#123;</span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果找到了key，将其与传入的无效entry替换，也就是与table[staleSlot]进行替换</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">            e.value = value;</span><br><span class="line"></span><br><span class="line">            tab[i] = tab[staleSlot];</span><br><span class="line">            tab[staleSlot] = e;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果向前查找没有找到无效entry，则更新slotToExpunge为当前值i</span></span><br><span class="line">            <span class="keyword">if</span> (slotToExpunge == staleSlot)</span><br><span class="line">                slotToExpunge = i;</span><br><span class="line">            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果向前查找没有找到无效entry，并且当前向后扫描的entry无效，则更新slotToExpunge为当前值i</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span> &amp;&amp; slotToExpunge == staleSlot)</span><br><span class="line">            slotToExpunge = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果没有找到key,也就是说key之前不存在table中</span></span><br><span class="line"><span class="comment">     * 就直接最开始的无效entry——tab[staleSlot]上直接新增即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    tab[staleSlot].value = <span class="keyword">null</span>;</span><br><span class="line">    tab[staleSlot] = <span class="keyword">new</span> ThreadLocal.ThreadLocalMap.Entry(key, value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * slotToExpunge != staleSlot,说明存在其他的无效entry需要进行清理。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (slotToExpunge != staleSlot)</span><br><span class="line">        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连续段清除</span></span><br><span class="line"><span class="comment"> * 根据传入的staleSlot,清理对应的无效entry——table[staleSlot],</span></span><br><span class="line"><span class="comment"> * 并且根据当前传入的staleSlot,向后扫描一段连续的entry(这里的连续是指一段相邻的entry并且table[i] != null),</span></span><br><span class="line"><span class="comment"> * 对可能存在hash冲突的entry进行rehash，并且清理遇到的无效entry.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> staleSlot key为null,需要无效entry所在的table中的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回下一个为空的solt的索引。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expungeStaleEntry</span><span class="params">(<span class="keyword">int</span> staleSlot)</span> </span>&#123;</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理无效entry，置空</span></span><br><span class="line">    tab[staleSlot].value = <span class="keyword">null</span>;</span><br><span class="line">    tab[staleSlot] = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//size减1，置空后table的被使用量减1</span></span><br><span class="line">    size--;</span><br><span class="line"></span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry e;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从staleSlot开始向后扫描一段连续的entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (i = nextIndex(staleSlot, len);</span><br><span class="line">         (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">         i = nextIndex(i, len)) &#123;</span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">        <span class="comment">//如果遇到key为null,表示无效entry，进行清理.</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            e.value = <span class="keyword">null</span>;</span><br><span class="line">            tab[i] = <span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果key不为null,计算索引</span></span><br><span class="line">            <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 计算出来的索引——h，与其现在所在位置的索引——i不一致，置空当前的table[i]</span></span><br><span class="line"><span class="comment">             * 从h开始向后线性探测到第一个空的slot，把当前的entry挪过去。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (h != i) &#123;</span><br><span class="line">                tab[i] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">while</span> (tab[h] != <span class="keyword">null</span>)</span><br><span class="line">                    h = nextIndex(h, len);</span><br><span class="line">                tab[h] = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下一个为空的solt的索引。</span></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启发式的扫描清除，扫描次数由传入的参数n决定</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i 从i向后开始扫描（不包括i，因为索引为i的Slot肯定为null）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 控制扫描次数，正常情况下为 log2(n) ，</span></span><br><span class="line"><span class="comment"> * 如果找到了无效entry，会将n重置为table的长度len,进行段清除。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * map.set()点用的时候传入的是元素个数，replaceStaleEntry()调用的时候传入的是table的长度len</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if any stale entries have been removed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">cleanSomeSlots</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        i = nextIndex(i, len);</span><br><span class="line">        ThreadLocal.ThreadLocalMap.Entry e = tab[i];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//重置n为len</span></span><br><span class="line">            n = len;</span><br><span class="line">            removed = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//依然调用expungeStaleEntry来进行无效entry的清除</span></span><br><span class="line">            i = expungeStaleEntry(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> ( (n &gt;&gt;&gt;= <span class="number">1</span>) != <span class="number">0</span>);<span class="comment">//无符号的右移动，可以用于控制扫描次数在log2(n)</span></span><br><span class="line">    <span class="keyword">return</span> removed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//全清理</span></span><br><span class="line">    expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * threshold = 2/3 * len</span></span><br><span class="line"><span class="comment">     * 所以threshold - threshold / 4 = 1en/2</span></span><br><span class="line"><span class="comment">     * 这里主要是因为上面做了一次全清理所以size减小，需要进行判断。</span></span><br><span class="line"><span class="comment">     * 判断的时候把阈值调低了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (size &gt;= threshold - threshold / <span class="number">4</span>)</span><br><span class="line">        resize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩容，扩大为原来的2倍（这样保证了长度为2的冥）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldLen = oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> newLen = oldLen * <span class="number">2</span>;</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry[] newTab = <span class="keyword">new</span> ThreadLocal.ThreadLocalMap.Entry[newLen];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldLen; ++j) &#123;</span><br><span class="line">        ThreadLocal.ThreadLocalMap.Entry e = oldTab[j];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">            <span class="comment">//虽然做过一次清理，但在扩容的时候可能会又存在key==null的情况。</span></span><br><span class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//这里试试将e.value设置为null</span></span><br><span class="line">                e.value = <span class="keyword">null</span>; <span class="comment">// Help the GC</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//同样适用线性探测来设置值。</span></span><br><span class="line">                <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">while</span> (newTab[h] != <span class="keyword">null</span>)</span><br><span class="line">                    h = nextIndex(h, newLen);</span><br><span class="line">                newTab[h] = e;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置新的阈值</span></span><br><span class="line">    setThreshold(newLen);</span><br><span class="line">    size = count;</span><br><span class="line">    table = newTab;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全清理，清理所有无效entry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expungeStaleEntries</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">        ThreadLocal.ThreadLocalMap.Entry e = tab[j];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">//使用连续段清理</span></span><br><span class="line">            expungeStaleEntry(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThreadLocalMap中的getEntry-及其相关"><a href="#ThreadLocalMap中的getEntry-及其相关" class="headerlink" title="ThreadLocalMap中的getEntry()及其相关"></a>ThreadLocalMap中的getEntry()及其相关</h4><p>同样的对于ThreadLocalMap中的getEntry()也从ThreadLocal的get()方法入手。</p><h5 id="ThreadLocal中的get"><a href="#ThreadLocal中的get" class="headerlink" title="ThreadLocal中的get()"></a>ThreadLocal中的get()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//同set方法类似获取对应线程中的ThreadLocalMap实例</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//为空返回初始化值</span></span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化设值的方法，可以被子类覆盖。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取初始化值，默认为null(如果没有子类进行覆盖)</span></span><br><span class="line">    T value = initialValue();</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">//不为空不用再初始化，直接调用set操作设值</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//第一次初始化，createMap在上面介绍set()的时候有介绍过。</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ThreadLocalMap中的getEntry"><a href="#ThreadLocalMap中的getEntry" class="headerlink" title="ThreadLocalMap中的getEntry()"></a>ThreadLocalMap中的getEntry()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ThreadLocal.ThreadLocalMap.<span class="function">Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据key计算索引，获取entry</span></span><br><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry e = table[i];</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过直接计算出来的key找不到对于的value的时候适用这个方法.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> ThreadLocal.ThreadLocalMap.<span class="function">Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="keyword">int</span> i, ThreadLocal.ThreadLocalMap.Entry e)</span> </span>&#123;</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">        <span class="keyword">if</span> (k == key)</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">//清除无效的entry</span></span><br><span class="line">            expungeStaleEntry(i);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//基于线性探测法向后扫描</span></span><br><span class="line">            i = nextIndex(i, len);</span><br><span class="line">        e = tab[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThreadLocalMap中的remove"><a href="#ThreadLocalMap中的remove" class="headerlink" title="ThreadLocalMap中的remove()"></a>ThreadLocalMap中的remove()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    <span class="comment">//计算索引</span></span><br><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//进行线性探测，查找正确的key</span></span><br><span class="line">    <span class="keyword">for</span> (ThreadLocal.ThreadLocalMap.Entry e = tab[i];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.get() == key) &#123;</span><br><span class="line">            <span class="comment">//调用weakrefrence的clear()清除引用</span></span><br><span class="line">            e.clear();</span><br><span class="line">            <span class="comment">//连续段清除</span></span><br><span class="line">            expungeStaleEntry(i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>remove()在有上面了解后可以说极为简单了，就是找到对应的table[],调用weakrefrence的clear()清除引用，然后再调用expungeStaleEntry()进行清除。</p><h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h3><p>分析完ThreadLocalMap，ThreadLocal的神秘面纱也就揭开了，所以不再赘述。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/source-code/threadLocal/threadLocal.jpg&quot; alt=&quot;threadLocal&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一. 简介&quot;&gt;&lt;/a&gt;一. 简介&lt;/h3&gt;&lt;p&gt;提醒篇幅较大需耐心。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;简介来自ThreadLocal类注释&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;ThreadLocal类提供了线程局部 (thread-local) 变量。这些变量与普通变量不同，每个线程都可以通过其 get 或 set方法来访问自己的独立初始化的变量副本。ThreadLocal 实例通常是类中的 private static 字段，它们希望将状态与某一个线程（例如，用户 ID 或事务 ID）相关联。
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://brightloong.github.io/tags/Java/"/>
    
      <category term="ThreadLocal" scheme="https://brightloong.github.io/tags/ThreadLocal/"/>
    
      <category term="源码分析" scheme="https://brightloong.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——观察者者模式</title>
    <link href="https://brightloong.github.io/2018/05/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/05/27/设计模式——观察者模式/</id>
    <published>2018-05-27T13:29:07.000Z</published>
    <updated>2018-05-27T13:30:53.366Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/observer/observer.jpg" alt="builder"></p><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一. 概述"></a>一. 概述</h3><p><code>观察者模式（Observer）</code> ，定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p><p>观察者模式，不论实现方式如何，需要具备最基本的Subject(被观察的主题)、Observer(观察者)，最后就是试用它们的Client(客户端)。<a id="more"></a></p><blockquote><p>观察者模式属于行为型模式。</p></blockquote><h3 id="二-UML类图解析"><a href="#二-UML类图解析" class="headerlink" title="二. UML类图解析"></a>二. UML类图解析</h3><p><img src="https://brightloong.github.io/images/design-pattern/observer/observer.png" alt="builder"></p><ul><li>Subject：被观察的主题，可以是一个抽象类或者接口，它把所有对观察者对象的引用保存在一个集合里，每个主题都可以有任何数量的观察者。抽象主题提供增加和移除观察者对象的方法。</li><li>Observer：抽象观察者，可以是一个抽象类或者接口，定义了一个update方法，在得到主题的通知时进行更新。</li><li>ConcreteObserverA、ConcreteObserverB：具体的观察者，实现观察者接口。</li><li>ConcreteSubject：具体主题，继承Subject，保存主题相关的一些状态。</li></ul><h3 id="三-代码实现"><a href="#三-代码实现" class="headerlink" title="三. 代码实现"></a>三. 代码实现</h3><p>打仗的时候，当哨兵观察到敌方来袭会通知所有士兵做好迎敌准备，士兵得到通知和进行准备。这里把哨兵通知当成一个主题，其他士兵（弓兵、骑兵、步兵等）在接到通知的时候作出相应的准备。</p><h4 id="观察者接口——Soldier"><a href="#观察者接口——Soldier" class="headerlink" title="观察者接口——Soldier"></a>观察者接口——Soldier</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Soldier</span> </span>&#123;</span><br><span class="line">    <span class="comment">//视具体情况，可以传入适当的参数，甚至可以单独定义一个消息类</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象主题——Sentinel"><a href="#抽象主题——Sentinel" class="headerlink" title="抽象主题——Sentinel"></a>抽象主题——Sentinel</h4><p>主题是使用抽象类还是接口根据情况而定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 哨兵,在有敌人入侵的时候通知其他士兵（弓兵、骑兵、步兵）准备迎战。</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Sentinel</span> </span>&#123;</span><br><span class="line">    <span class="comment">//持有的观察者集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Soldier&gt; soldiers = <span class="keyword">new</span> ArrayList&lt;Soldier&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加观察者.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> soldier</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSoldier</span><span class="params">(Soldier soldier)</span> </span>&#123;</span><br><span class="line">        soldiers.add(soldier);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除观察者.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> soldier</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeSoldier</span><span class="params">(Soldier soldier)</span> </span>&#123;</span><br><span class="line">        soldiers.remove(soldier);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知所有观察者.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifySoldier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Soldier soldier : soldiers) &#123;</span><br><span class="line">            soldier.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体主题——BraveSentinel"><a href="#具体主题——BraveSentinel" class="headerlink" title="具体主题——BraveSentinel"></a>具体主题——BraveSentinel</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BraveSentinel</span> <span class="keyword">extends</span> <span class="title">Sentinel</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**哨兵的名字*/</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**通知消息*/</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体观察者"><a href="#具体观察者" class="headerlink" title="具体观察者"></a>具体观察者</h4><p>弓兵</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Archer</span> <span class="keyword">implements</span> <span class="title">Soldier</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BraveSentinel sentinel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，传入观察的主题，因为主题和观察者是一对多的情况，</span></span><br><span class="line"><span class="comment">     * 所以这里直接传入具体的BraveSentinel而不是Sentinel,</span></span><br><span class="line"><span class="comment">     * 当然，这个视具体情况而来</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sentinel</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Archer</span><span class="params">(BraveSentinel sentinel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sentinel = sentinel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到哨兵"</span> + sentinel.getName() + <span class="string">"的通知："</span> + sentinel.getMsg());</span><br><span class="line">        System.out.println(<span class="string">"弓兵布阵"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>骑兵</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 骑兵</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cavalry</span> <span class="keyword">implements</span> <span class="title">Soldier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BraveSentinel sentinel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cavalry</span><span class="params">(BraveSentinel sentinel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sentinel = sentinel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"收到哨兵"</span> + sentinel.getName() + <span class="string">"的通知："</span> + sentinel.getMsg());</span><br><span class="line">        System.out.println(<span class="string">"骑兵上马布阵"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端调用和输出"><a href="#客户端调用和输出" class="headerlink" title="客户端调用和输出"></a>客户端调用和输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BraveSentinel sentinel = <span class="keyword">new</span> BraveSentinel();</span><br><span class="line">        sentinel.addSoldier(<span class="keyword">new</span> Archer(sentinel));</span><br><span class="line">        sentinel.addSoldier(<span class="keyword">new</span> Cavalry(sentinel));</span><br><span class="line"></span><br><span class="line">        sentinel.setName(<span class="string">"小二郎"</span>);</span><br><span class="line">        sentinel.setMsg(<span class="string">"敌方十万大军来袭"</span>);</span><br><span class="line">        sentinel.notifySoldier();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">收到哨兵小二郎的通知：敌方十万大军来袭</span><br><span class="line">弓兵布阵</span><br><span class="line">收到哨兵小二郎的通知：敌方十万大军来袭</span><br><span class="line">骑兵上马布阵</span><br></pre></td></tr></table></figure><h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h3><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>当一个对象发生变化，同时其他对象需要因此而改变，并且它不知道具体有多少个对象会因此改变。</li><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li><li>需要建立一个触发链</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>实现了观察者和被观察者的解耦，让耦合的双方都依赖于抽象，而不是依赖具体。从而使得各自的变化都不会影响另一边的变化。</li><li>可以方便的增加新的观察者和主题，方便扩展。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>观察者的增加会导致通知所花费时间。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/observer/observer.jpg&quot; alt=&quot;builder&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一. 概述&quot;&gt;&lt;/a&gt;一. 概述&lt;/h3&gt;&lt;p&gt;&lt;code&gt;观察者模式（Observer）&lt;/code&gt; ，定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。&lt;/p&gt;
&lt;p&gt;观察者模式，不论实现方式如何，需要具备最基本的Subject(被观察的主题)、Observer(观察者)，最后就是试用它们的Client(客户端)。
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于Java中的WeakReference</title>
    <link href="https://brightloong.github.io/2018/05/27/%E5%85%B3%E4%BA%8EJava%E4%B8%AD%E7%9A%84WeakReference/"/>
    <id>https://brightloong.github.io/2018/05/27/关于Java中的WeakReference/</id>
    <published>2018-05-27T03:13:46.000Z</published>
    <updated>2018-05-27T03:26:01.380Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/source-code/reference/WeakReference.jpg" alt="WeakReference"></p><h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h3><p>在看ThreadLocal源码的时候，其中嵌套类ThreadLocalMap中的Entry继承了WeakReferenc，为了能搞清楚ThreadLocal，只能先了解下了WeakReferenc(是的，很多时候我了搞清楚一个东西，不得不往上追好几层，先搞清楚其所依赖的东西。)<a id="more"></a></p><p>下面进入正题，WeakReference如字面意思，弱引用， 当一个对象仅仅被weak reference（弱引用）指向, 而没有任何其他strong reference（强引用）指向的时候, 如果这时GC运行, 那么这个对象就会被回收，不论当前的内存空间是否足够，这个对象都会被回收。</p><h3 id="二-认识WeakReference类"><a href="#二-认识WeakReference类" class="headerlink" title="二. 认识WeakReference类"></a>二. 认识WeakReference类</h3><p>WeakReference继承Reference，其中只有两个构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakReference</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Reference</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakReference</span><span class="params">(T referent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(referent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakReference</span><span class="params">(T referent, ReferenceQueue&lt;? <span class="keyword">super</span> T&gt; q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(referent, q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>WeakReference(T referent)：referent就是被弱引用的对象（注意区分弱引用对象和被弱引用的对应，弱引用对象是指WeakReference的实例或者其子类的实例），比如有一个Apple实例apple，可以如下使用，并且通过get()方法来获取apple引用。也可以再创建一个继承WeakReference的类来对Apple进行弱引用，下面就会使用这种方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WeakReference&lt;Apple&gt; appleWeakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(apple);</span><br><span class="line">Apple apple2 = appleWeakReference.get();</span><br></pre></td></tr></table></figure></li><li><p>WeakReference(T referent, ReferenceQueue&lt;? super T&gt; q)：与上面的构造方法比较，多了个ReferenceQueue，在对象被回收后，会把弱引用对象，也就是WeakReference对象或者其子类的对象，放入队列ReferenceQueue中，注意不是被弱引用的对象，被弱引用的对象已经被回收了。</p></li></ul><h3 id="三-使用WeakReference"><a href="#三-使用WeakReference" class="headerlink" title="三. 使用WeakReference"></a>三. 使用WeakReference</h3><p>下面是使用继承WeakReference的方式来使用软引用，并且不使用ReferenceQueue。</p><h4 id="简单类Apple"><a href="#简单类Apple" class="headerlink" title="简单类Apple"></a>简单类Apple</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.lab.reference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Apple class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/5/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 覆盖finalize，在回收的时候会执行。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.finalize();</span><br><span class="line">        System.out.println(<span class="string">"Apple： "</span> + name + <span class="string">" finalize。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Apple&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span> + <span class="string">", hashCode:"</span> + <span class="keyword">this</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承WeakReference的Salad"><a href="#继承WeakReference的Salad" class="headerlink" title="继承WeakReference的Salad"></a>继承WeakReference的Salad</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.lab.reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Salad class</span></span><br><span class="line"><span class="comment"> * 继承WeakReference，将Apple作为弱引用。</span></span><br><span class="line"><span class="comment"> * 注意到时候回收的是Apple，而不是Salad</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/5/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Salad</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">Apple</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Salad</span><span class="params">(Apple apple)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(apple);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Clent调用和输出"><a href="#Clent调用和输出" class="headerlink" title="Clent调用和输出"></a>Clent调用和输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.lab.reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/5/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Salad salad = <span class="keyword">new</span> Salad(<span class="keyword">new</span> Apple(<span class="string">"红富士"</span>));</span><br><span class="line">        <span class="comment">//通过WeakReference的get()方法获取Apple</span></span><br><span class="line">        System.out.println(<span class="string">"Apple:"</span> + salad.get());</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//休眠一下，在运行的时候加上虚拟机参数-XX:+PrintGCDetails，输出gc信息，确定gc发生了。</span></span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果为空，代表被回收了</span></span><br><span class="line">        <span class="keyword">if</span> (salad.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"clear Apple。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Apple:Apple&#123;name=&apos;红富士&apos;&#125;, hashCode:1846274136</span><br><span class="line">[GC (System.gc()) [PSYoungGen: 3328K-&gt;496K(38400K)] 3328K-&gt;504K(125952K), 0.0035102 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </span><br><span class="line">[Full GC (System.gc()) [PSYoungGen: 496K-&gt;0K(38400K)] [ParOldGen: 8K-&gt;359K(87552K)] 504K-&gt;359K(125952K), [Metaspace: 2877K-&gt;2877K(1056768K)], 0.0067965 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">Apple： 红富士 finalize。</span><br><span class="line">clear Apple。</span><br></pre></td></tr></table></figure><h4 id="ReferenceQueue的使用"><a href="#ReferenceQueue的使用" class="headerlink" title="ReferenceQueue的使用"></a>ReferenceQueue的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.lab.reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.ref.Reference;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.ReferenceQueue;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Client2 class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/5/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReferenceQueue&lt;Apple&gt; appleReferenceQueue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">        WeakReference&lt;Apple&gt; appleWeakReference = <span class="keyword">new</span> WeakReference&lt;Apple&gt;(<span class="keyword">new</span> Apple(<span class="string">"青苹果"</span>), appleReferenceQueue);</span><br><span class="line">        WeakReference&lt;Apple&gt; appleWeakReference2 = <span class="keyword">new</span> WeakReference&lt;Apple&gt;(<span class="keyword">new</span> Apple(<span class="string">"毒苹果"</span>), appleReferenceQueue);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====gc调用前====="</span>);</span><br><span class="line">        Reference&lt;? extends Apple&gt; reference = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((reference = appleReferenceQueue.poll()) != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="comment">//不会输出，因为没有回收被弱引用的对象，并不会加入队列中</span></span><br><span class="line">            System.out.println(reference);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(appleWeakReference);</span><br><span class="line">        System.out.println(appleWeakReference2);</span><br><span class="line">        System.out.println(appleWeakReference.get());</span><br><span class="line">        System.out.println(appleWeakReference2.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====调用gc====="</span>);</span><br><span class="line">        System.gc();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====gc调用后====="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面两个输出为null,表示对象被回收了</span></span><br><span class="line">        System.out.println(appleWeakReference.get());</span><br><span class="line">        System.out.println(appleWeakReference2.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果，并且就是上面的appleWeakReference、appleWeakReference2，再次证明对象被回收了</span></span><br><span class="line">        Reference&lt;? extends Apple&gt; reference2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((reference2 = appleReferenceQueue.poll()) != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="comment">//如果使用继承的方式就可以包含其他信息了</span></span><br><span class="line">            System.out.println(<span class="string">"appleReferenceQueue中："</span> + reference2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">=====gc调用前=====</span><br><span class="line">java.lang.ref.WeakReference@6e0be858</span><br><span class="line">java.lang.ref.WeakReference@61bbe9ba</span><br><span class="line">Apple&#123;name=&apos;青苹果&apos;&#125;, hashCode:1627674070</span><br><span class="line">Apple&#123;name=&apos;毒苹果&apos;&#125;, hashCode:1360875712</span><br><span class="line">=====调用gc=====</span><br><span class="line">Apple： 毒苹果 finalize。</span><br><span class="line">Apple： 青苹果 finalize。</span><br><span class="line">=====gc调用后=====</span><br><span class="line">null</span><br><span class="line">null</span><br><span class="line">appleReferenceQueue中：java.lang.ref.WeakReference@6e0be858</span><br><span class="line">appleReferenceQueue中：java.lang.ref.WeakReference@61bbe9ba</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>可以看到在队列中（ReferenceQueue），调用gc之前是没有内容的，调用gc之后，对象被回收了，并且弱引用对象appleWeakReference和appleWeakReference2被放入了队列中。</p><p>关于其他三种引用，强引用、软引用、虚引用，可以参考<a href="http://www.cnblogs.com/gudi/p/6403953.html" target="_blank" rel="noopener">http://www.cnblogs.com/gudi/p/6403953.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/source-code/reference/WeakReference.jpg&quot; alt=&quot;WeakReference&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一. 简介&quot;&gt;&lt;/a&gt;一. 简介&lt;/h3&gt;&lt;p&gt;在看ThreadLocal源码的时候，其中嵌套类ThreadLocalMap中的Entry继承了WeakReferenc，为了能搞清楚ThreadLocal，只能先了解下了WeakReferenc(是的，很多时候我了搞清楚一个东西，不得不往上追好几层，先搞清楚其所依赖的东西。)
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://brightloong.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——建造者模式</title>
    <link href="https://brightloong.github.io/2018/05/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/05/24/设计模式——建造者模式/</id>
    <published>2018-05-24T14:21:05.000Z</published>
    <updated>2018-05-24T14:21:45.269Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/builder/builder.jpg" alt="builder"></p><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一. 概述"></a>一. 概述</h3><p><code>建造者模式（Builder）</code>，又叫生成器模式，它将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>建造者模式可以将一个产品的内部表象与产品的生成过程分割开来，使用建造者模式，用户就只需指定需要建造的类型就可以得到它们，二具体建造的过程和细节就不需要知道了。<a id="more"></a></p><p>建造者模式相比于工厂模式更加关注组成部分的装配细节和顺序。</p><blockquote><p>创建者模式属于创建型模式。</p></blockquote><h3 id="二-UML类图解析"><a href="#二-UML类图解析" class="headerlink" title="二. UML类图解析"></a>二. UML类图解析</h3><p>建造者模式的UML类图如下：</p><p><img src="https://brightloong.github.io/images/design-pattern/builder/builder.png" alt="builder"></p><ul><li>Builder：为创建一个Product对象的各个部件指定的抽象接口，buildPart()是对象组成部分构造的抽象方法，根据需求可以有多个组成部分的构造方法。</li><li>ConcreteBuilder：具体建造者，继承自Builder，构造和装配各个部件，getResult()返回构造后的实例。</li><li>Director：指挥者，持有一个Builder引用，调用具体的创建者的各个部件来创建对象，负责保证对象各部分完整创建或者按某种顺序创建 。</li><li>Product：产品，要创建的具体对象，一般来说是一个复杂的对象，包含多个组成部分。</li></ul><h3 id="三-代码实现"><a href="#三-代码实现" class="headerlink" title="三. 代码实现"></a>三. 代码实现</h3><p>这里把电脑作为一个产品，一般来说一个可以使用的台式电脑包括显示器、主机、键盘和鼠标，各个组成部分可以有不同的品牌、性能、型号等细节，下面就使用建造者模式来对电脑进行实现。</p><h4 id="产品类——Computer"><a href="#产品类——Computer" class="headerlink" title="产品类——Computer"></a>产品类——Computer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品类Computer，为了方便实现，所有组成均用String来表示。</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/24.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String displayer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 键盘</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String keyboard;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鼠标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String mouse;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDisplayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> displayer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisplayer</span><span class="params">(String displayer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.displayer = displayer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHost</span><span class="params">(String host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKeyboard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keyboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyboard</span><span class="params">(String keyboard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.keyboard = keyboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMouse</span><span class="params">(String mouse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mouse = mouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 覆盖toString方法.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Computer&#123;"</span> +</span><br><span class="line">                <span class="string">"displayer='"</span> + displayer + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", host='"</span> + host + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", keyboard='"</span> + keyboard + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", mouse='"</span> + mouse + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构建抽象——ComputerBuilder"><a href="#构建抽象——ComputerBuilder" class="headerlink" title="构建抽象——ComputerBuilder"></a>构建抽象——ComputerBuilder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/24.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildDisplay</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildHost</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildKeyBoard</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildMouse</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Computer <span class="title">getComputer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具体构建类——SuperComputerBuilder"><a href="#具体构建类——SuperComputerBuilder" class="headerlink" title="具体构建类——SuperComputerBuilder"></a>具体构建类——SuperComputerBuilder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/24.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperComputerBuilder</span> <span class="keyword">extends</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuperComputerBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer = <span class="keyword">new</span> Computer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setDisplayer(<span class="string">"37.5英寸显示器IPS曲面屏微边框防眩光4K屏幕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setHost(<span class="string">"i7-6950X/TiTANX 高端硬管水冷电脑六核游戏主机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildKeyBoard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setKeyboard(<span class="string">"猛禽竞技机械键盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setMouse(<span class="string">"逆天悬浮鼠标"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Computer <span class="title">getComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指挥者——ComputerDirector"><a href="#指挥者——ComputerDirector" class="headerlink" title="指挥者——ComputerDirector"></a>指挥者——ComputerDirector</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/24.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerDirector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ComputerBuilder computerBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerDirector</span><span class="params">(ComputerBuilder computerBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computerBuilder = computerBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computerBuilder.buildDisplay();</span><br><span class="line">        computerBuilder.buildHost();</span><br><span class="line">        computerBuilder.buildKeyBoard();</span><br><span class="line">        computerBuilder.buildMouse();</span><br><span class="line">        <span class="keyword">return</span> computerBuilder.getComputer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端调用和输出"><a href="#客户端调用和输出" class="headerlink" title="客户端调用和输出"></a>客户端调用和输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/24.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> ComputerDirector(<span class="keyword">new</span> SuperComputerBuilder()).build();</span><br><span class="line">        System.out.println(computer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Computer&#123;displayer=&apos;37.5英寸显示器IPS曲面屏微边框防眩光4K屏幕&apos;, host=&apos;i7-6950X/TiTANX 高端硬管水冷电脑六核游戏主机&apos;, keyboard=&apos;猛禽竞技机械键盘&apos;, mouse=&apos;逆天悬浮鼠标&apos;&#125;</span><br></pre></td></tr></table></figure><h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h3><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>用于创建一些复杂的对象，这些对象内部构建的顺序通常是稳定的，但对象内部的构建通常面临着复杂的变化。</li><li>当创建复杂的对象的算法应该独立于该对象的组成部分已经它们的装配方法时。</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>建造者模式使得建造代码与表示代码分离，隐藏了产品实现细节。</li><li>如果要改变一个产品的内部表示，只要再定义一个具体的建造者就可以了，方便扩展。</li><li>建造者模式通过指挥者可以控制组件建造顺序，能实现一定程度的细节把控，特别是那种生成的产品对象之间存在属性依赖的情况。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>如果产品多变，会生成大量的建造类，造成类膨胀。</li></ul><h3 id="五-扩展——构建器"><a href="#五-扩展——构建器" class="headerlink" title="五. 扩展——构建器"></a>五. 扩展——构建器</h3><p>在《Effective Java》一书中，第2条提到：</p><blockquote><p>遇到多个构造器参数时要考虑用构建器。</p></blockquote><p>当有多个参数的时候，客户端代码不仅难编写，也很难阅读，再有，客户端可能不清楚每个参数到底代表什么。</p><p>这里也使用到了Builder模式，不直接生成想要的对象，二是让客户端利用所有必要的参数调用Builder构造器，得到一个builder对象。然后客户端在builder对象上调用类似于setter的方法，来设置每个相关的可选参数。最后，客户端调用无参的build方法来生成不可变（相比较JavaBeans模式，也就是调用set方法来进行设值，这种方式可以生成不可变对象）的对象。下面的是具体的代码，来自《Effective Java》书上的列子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/24.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Required parameters</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Optional parameters - initialized to default values</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">            <span class="keyword">this</span>.servings = servings;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            calories = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            fat = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            sodium = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            carbohydrate = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        servingSize = builder.servingSize;</span><br><span class="line">        servings = builder.servings;</span><br><span class="line">        calories = builder.calories;</span><br><span class="line">        fat = builder.fat;</span><br><span class="line">        sodium = builder.sodium;</span><br><span class="line">        carbohydrate = builder.carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"NutritionFacts&#123;"</span> +</span><br><span class="line">                <span class="string">"servingSize="</span> + servingSize +</span><br><span class="line">                <span class="string">", servings="</span> + servings +</span><br><span class="line">                <span class="string">", calories="</span> + calories +</span><br><span class="line">                <span class="string">", fat="</span> + fat +</span><br><span class="line">                <span class="string">", sodium="</span> + sodium +</span><br><span class="line">                <span class="string">", carbohydrate="</span> + carbohydrate +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用和输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/24.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NutritionFacts cocaCola = <span class="keyword">new</span> NutritionFacts.Builder(<span class="number">240</span>,<span class="number">8</span>)</span><br><span class="line">                .calories(<span class="number">100</span>).sodium(<span class="number">35</span>)</span><br><span class="line">                .carbohydrate(<span class="number">27</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(cocaCola);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NutritionFacts&#123;servingSize=240, servings=8, calories=100, fat=0, sodium=35, carbohydrate=27&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/builder/builder.jpg&quot; alt=&quot;builder&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一. 概述&quot;&gt;&lt;/a&gt;一. 概述&lt;/h3&gt;&lt;p&gt;&lt;code&gt;建造者模式（Builder）&lt;/code&gt;，又叫生成器模式，它将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。&lt;/p&gt;
&lt;p&gt;建造者模式可以将一个产品的内部表象与产品的生成过程分割开来，使用建造者模式，用户就只需指定需要建造的类型就可以得到它们，二具体建造的过程和细节就不需要知道了。
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——职责链模式</title>
    <link href="https://brightloong.github.io/2018/05/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/05/17/设计模式——职责链模式/</id>
    <published>2018-05-17T12:20:34.000Z</published>
    <updated>2018-05-17T14:21:20.895Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/chain/chain.jpg" alt="chain"></p><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一. 概述"></a>一. 概述</h3><p><code>职责链模式（Chain of Responsibility）</code>：使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止<a id="more"></a>（个人认为并不一定非要满足这种情况，也可以是每个对象可以处理请求的一部分，或者是下一个处理对象需要上一个处理对象首先完成一些工作，将请求沿链一步一步传递，知道请求最终处理完成，既同时兼顾请求处理和请求转发，当然这个仅仅是个人理解，可能不正确，还请谅解）。</p><p>使用职责链模式，发起请求的客户端并不用知道是链中的哪一个对象最终处理了这个请求，所以这样系统的更改可以在不影响客户端的情况下动态地重新组织和分配责任。</p><blockquote><p>职责链模式属于行为型模式。</p></blockquote><h3 id="二-UML类图解析"><a href="#二-UML类图解析" class="headerlink" title="二. UML类图解析"></a>二. UML类图解析</h3><p>职责链模式的UML类图如下：</p><p><img src="https://brightloong.github.io/images/design-pattern/chain/chain.png" alt="chain"></p><ul><li>Handler：处理请求的抽象类，持有一个Handler引用作为后继者，setSuccessor(Handler handler)用于设置后继者；handleRequest(Request request)是处理请求的抽象方法，Request是具体的请求，按照自己的需求定义，可以简单的基本类型，集合类，也可以是自定义的类，等待子类具体实现。</li><li>ConcreteHandler1、ConcreteHandler2：具体处理者类，处理客户端请求，也可以访问后继者，按照职责链模式的定义，要么处理请求，要么转发请求，不存在两者同时兼顾的行为。</li></ul><h3 id="三-代码实现"><a href="#三-代码实现" class="headerlink" title="三. 代码实现"></a>三. 代码实现</h3><p>用向银行贷款作为例子，申请的贷款金额不同需要不同等级的银行人员进行授权。</p><h4 id="贷款请求类——LoanRequest"><a href="#贷款请求类——LoanRequest" class="headerlink" title="贷款请求类——LoanRequest"></a>贷款请求类——LoanRequest</h4><p>首先创建一个贷款请求，具有基本的贷款金额和贷款人信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.chain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 贷款请求类</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoanRequest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**贷款金额*/</span></span><br><span class="line">    <span class="keyword">private</span> Long loanAmount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**贷款人姓名*/</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loanAmount</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoanRequest</span><span class="params">(Long loanAmount, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loanAmount = loanAmount;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getLoanAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loanAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoanAmount</span><span class="params">(Long loanAmount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loanAmount = loanAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象处理接口——BankStaff"><a href="#抽象处理接口——BankStaff" class="headerlink" title="抽象处理接口——BankStaff"></a>抽象处理接口——BankStaff</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.chain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求处理抽象类.</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BankStaff</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**持有的后继者的引用*/</span></span><br><span class="line">    <span class="keyword">private</span> BankStaff nextBankStaff;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**设置后继者*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextBankStaff</span><span class="params">(BankStaff bankStaff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextBankStaff = bankStaff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**获取后继者*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BankStaff <span class="title">getNextBankStaff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.nextBankStaff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**抽象处理方法，等待子类实现*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleLoan</span><span class="params">(LoanRequest request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="银行柜员实现——BankTeller"><a href="#银行柜员实现——BankTeller" class="headerlink" title="银行柜员实现——BankTeller"></a>银行柜员实现——BankTeller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.chain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTeller</span> <span class="keyword">extends</span> <span class="title">BankStaff</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoan</span><span class="params">(LoanRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getLoanAmount() &lt;= <span class="number">20000</span>) &#123;</span><br><span class="line">            System.out.println(request.getName() + <span class="string">"申请贷款："</span> + request.getLoanAmount() + <span class="string">"元，"</span> + <span class="string">"由银行柜员处理。"</span> );</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getNextBankStaff() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            getNextBankStaff().handleLoan(request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"无法处理的贷款请求。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="银行经理实现——BankManager"><a href="#银行经理实现——BankManager" class="headerlink" title="银行经理实现——BankManager"></a>银行经理实现——BankManager</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.chain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankManager</span> <span class="keyword">extends</span> <span class="title">BankStaff</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoan</span><span class="params">(LoanRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getLoanAmount() &lt;= <span class="number">100000</span>) &#123;</span><br><span class="line">            System.out.println(request.getName() + <span class="string">"申请贷款："</span> + request.getLoanAmount() + <span class="string">"元，"</span> + <span class="string">"由银行经理处理。"</span> );</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getNextBankStaff() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            getNextBankStaff().handleLoan(request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"无法处理的贷款请求。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="银行行长实现——BankPresident"><a href="#银行行长实现——BankPresident" class="headerlink" title="银行行长实现——BankPresident"></a>银行行长实现——BankPresident</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.chain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankPresident</span> <span class="keyword">extends</span> <span class="title">BankStaff</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoan</span><span class="params">(LoanRequest request)</span> </span>&#123;</span><br><span class="line">        System.out.println(request.getName() + <span class="string">"申请贷款："</span> + request.getLoanAmount() + <span class="string">"元，"</span> + <span class="string">"由银行行长处理。"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端调用和输出"><a href="#客户端调用和输出" class="headerlink" title="客户端调用和输出"></a>客户端调用和输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.chain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/17.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构造职责链</span></span><br><span class="line">        BankStaff bankTeller = <span class="keyword">new</span> BankTeller();</span><br><span class="line">        BankStaff bankManager = <span class="keyword">new</span> BankManager();</span><br><span class="line">        BankStaff bankPresident = <span class="keyword">new</span> BankPresident();</span><br><span class="line">        bankTeller.setNextBankStaff(bankManager);</span><br><span class="line">        bankManager.setNextBankStaff(bankPresident);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造请求</span></span><br><span class="line">        LoanRequest request = <span class="keyword">new</span> LoanRequest(<span class="number">10000L</span>, <span class="string">"小明"</span>);</span><br><span class="line">        bankTeller.handleLoan(request);</span><br><span class="line"></span><br><span class="line">        LoanRequest request2 = <span class="keyword">new</span> LoanRequest(<span class="number">200000L</span>, <span class="string">"老王"</span>);</span><br><span class="line">        bankTeller.handleLoan(request2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小明申请贷款：10000元，由银行柜员处理。</span><br><span class="line">老王申请贷款：200000元，由银行行长处理。</span><br></pre></td></tr></table></figure><h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h3><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 </li><li>在不明确接收者的情况下，向多个对象中的一个处理提交一个请求。 </li><li>可动态指定一组对象处理请求。</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>实现了请求发送者和接收者的解耦，降低了耦合度。</li><li>方便扩展，可以方便的增加请求处理类。</li><li>可以动态的设置请求处理类的顺序，比较灵活。</li><li>接收者和发送者都没有对方的明确信息，且链中的对象自己也并不知道链的结构。结果是职责链可简化对象的相互连接，它们仅需要保持一个指向后继者的引用。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>请求有可能到了链的末端都得不到处理，或者因为没有正确配置而得不到处理。</li><li>如果要配置比较复杂的链会导致性能受到影响，并且难于调试，易于出错</li></ul><p>参考：<a href="http://www.runoob.com/design-pattern/chain-of-responsibility-pattern.html" target="_blank" rel="noopener">http://www.runoob.com/design-pattern/chain-of-responsibility-pattern.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/chain/chain.jpg&quot; alt=&quot;chain&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一. 概述&quot;&gt;&lt;/a&gt;一. 概述&lt;/h3&gt;&lt;p&gt;&lt;code&gt;职责链模式（Chain of Responsibility）&lt;/code&gt;：使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——策略模式</title>
    <link href="https://brightloong.github.io/2018/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/05/06/设计模式——策略模式/</id>
    <published>2018-05-06T12:43:09.000Z</published>
    <updated>2018-05-06T13:16:56.959Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/strategy/Strategy.jpg" alt="strategy"></p><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一. 概述"></a>一. 概述</h3><p>考虑如下情景，超市搞打折活动，对于消费额度不同提供不同的折扣，比如：满200打9折，满400打8折之类的；或者旅行出游的情景，可以考虑骑自行车，坐汽车、火车、飞机等等。<a id="more"></a></p><p>如何实现上面描述的情景，当然最直接想到的是使用if…else进行判断，执行不同的操作，但是如果在你实现完后有添加了其他的活动或者出行方式呢，这个时候你需要在客户端直接修改代码。</p><p>当然，也可能想到之前提到过的工厂模式，但是工厂模式主要是解决对象的创建问题，而打折方式，出行方式这种行为都属于一系列的算法，如何让算法和对象分开来，使得算法可以独立于调用它的客户端变化就是策略模式解决的问题。</p><p><code>策略模式(Strategy)</code> 定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化，不会影响到使用算法的客户。</p><blockquote><p>策略模式属于对象的行为模式。</p></blockquote><h3 id="二-UML类图解析"><a href="#二-UML类图解析" class="headerlink" title="二. UML类图解析"></a>二. UML类图解析</h3><p>策略模式的UML图如下所示：</p><p><img src="https://brightloong.github.io/images/design-pattern/strategy/strategy.png" alt="strategy"></p><ul><li>IStrategy：策略接口类，定义所有支持的算法的公共接口。（如果算法存在公共的实现逻辑，可以采用抽象类，以继承的方式实现算法，可以把公共代码移到父类，避免代码重复）</li><li>StrategyA、StrategyB：具体策略类，封装了具体的算法或行为，实现IStategy。</li><li>Context：Context上下文，其中定义一个方法来进行配置，维护一个对IStrategy的引用。</li></ul><h3 id="三-代码实现"><a href="#三-代码实现" class="headerlink" title="三. 代码实现"></a>三. 代码实现</h3><p>就用上面提到的旅游出行来作为具体的场景用代码进行实现。</p><h4 id="策略接口——ITravelStrategy"><a href="#策略接口——ITravelStrategy" class="headerlink" title="策略接口——ITravelStrategy"></a>策略接口——ITravelStrategy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITravelStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="策略实现——AirPlaneStrategy"><a href="#策略实现——AirPlaneStrategy" class="headerlink" title="策略实现——AirPlaneStrategy"></a>策略实现——AirPlaneStrategy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirPlaneStrategy</span> <span class="keyword">implements</span> <span class="title">ITravelStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"坐飞机出游。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="策略实现——TrainStrategy"><a href="#策略实现——TrainStrategy" class="headerlink" title="策略实现——TrainStrategy"></a>策略实现——TrainStrategy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainStrategy</span> <span class="keyword">implements</span> <span class="title">ITravelStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"坐火车出游。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="上下文环境类——TravelContext"><a href="#上下文环境类——TravelContext" class="headerlink" title="上下文环境类——TravelContext"></a>上下文环境类——TravelContext</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TravelContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ITravelStrategy travelStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TravelContext</span><span class="params">(ITravelStrategy travelStrategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.travelStrategy = travelStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        travelStrategy.travel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端调用——Tourist"><a href="#客户端调用——Tourist" class="headerlink" title="客户端调用——Tourist"></a>客户端调用——Tourist</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tourist</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TravelContext travelContext = <span class="keyword">new</span> TravelContext(<span class="keyword">new</span> AirPlaneStrategy());</span><br><span class="line">        travelContext.travel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">坐飞机出游。</span><br></pre></td></tr></table></figure><h3 id="四-扩展"><a href="#四-扩展" class="headerlink" title="四. 扩展"></a>四. 扩展</h3><p>在上面的客户端调用中，发现需要客户端了解所有的策略实现，并且需要客户端自己判断使用哪一种策略，如果想将这个判断从客户端移走，这个时候可以将策略模式和简单工厂模式进行结合，修改后的TravelContext如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TravelContextFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ITravelStrategy travelStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里的参数最好用枚举进行定义，这样不会出现传入不存在的参数.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> travelType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TravelContextFactory</span><span class="params">(String travelType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"airPlaen"</span>.equals(travelType)) &#123;</span><br><span class="line">            travelStrategy = <span class="keyword">new</span> AirPlaneStrategy();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"train"</span>.equals(travelType)) &#123;</span><br><span class="line">            travelStrategy = <span class="keyword">new</span> TrainStrategy();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不支持的策略"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        travelStrategy.travel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五-使用场景"><a href="#五-使用场景" class="headerlink" title="五.使用场景"></a>五.使用场景</h3><ol><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li><li>一个系统需要动态地在几种算法中选择一种，需要在不同情况下使用不同的策略(算法)，或者策略还可能在未来用其它方式来实现。</li><li>对客户隐藏具体策略(算法)的实现细节，彼此完全独立。</li><li>出现同一抽象类有多个子类，并且使用判断逻辑if-else之类的来判断选择具体子类。</li></ol><h3 id="六-总结"><a href="#六-总结" class="headerlink" title="六. 总结"></a>六. 总结</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>上面提到了，并不一定要使用策略接口，也可以使用抽象类，恰当使用继承可以把公共的代码移到父类里面，从而避免代码重复。</li><li>具有良好的扩展性，新增算法只用添加策略实现。</li><li>不同算法之间可以自由切换。</li><li>使用策略模式可以避免使用多重条件(if-else)语句。</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。策略模式将责任交给了客户端去承担。</li><li>随着策略的不断增加，将产生越来越多的策略类，导致了类膨胀。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/strategy/Strategy.jpg&quot; alt=&quot;strategy&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一. 概述&quot;&gt;&lt;/a&gt;一. 概述&lt;/h3&gt;&lt;p&gt;考虑如下情景，超市搞打折活动，对于消费额度不同提供不同的折扣，比如：满200打9折，满400打8折之类的；或者旅行出游的情景，可以考虑骑自行车，坐汽车、火车、飞机等等。
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——工厂模式</title>
    <link href="https://brightloong.github.io/2018/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/05/05/设计模式——工厂模式/</id>
    <published>2018-05-05T09:43:58.000Z</published>
    <updated>2018-05-05T13:38:44.116Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/factory/factory.jpg" alt="factory"></p><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h3><p><code>工厂模式（Factory Pattern）</code>是 Java 中最常用的设计模式之一，其通过提供对象创建工厂，将创建对象的具体过程屏蔽起来，使调用的客户端不用关心具体的对象创建过程，提高了灵活性。<a id="more"></a></p><blockquote><p>工厂模式属于创建型模式。</p></blockquote><p>工厂模式根据抽象层的不用，可以分为以下三类：</p><ol><li>简单工厂模式</li><li>工厂方法模式</li><li>抽象工厂模式</li></ol><p>其中“简单工厂模式”并不属于设计模式的一种，通俗的说是一种编程经验。</p><h3 id="二-简单工厂模式"><a href="#二-简单工厂模式" class="headerlink" title="二. 简单工厂模式"></a>二. 简单工厂模式</h3><p>简单工厂模式是工厂对象根据传入的参数不同，创建不同的对象实例。</p><h4 id="UML类图解析"><a href="#UML类图解析" class="headerlink" title="UML类图解析"></a>UML类图解析</h4><p><img src="https://brightloong.github.io/images/design-pattern/factory/SimpleFactory.png" alt="SimpleFactory"></p><ul><li>Product：产品接口，也可以是抽象类。</li><li>ProductA，ProductB：具体产品实现。</li><li>Factory：根据传入的参数创建具体的产品的工厂，供客户端调用。</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="图形接口定义"><a href="#图形接口定义" class="headerlink" title="图形接口定义"></a>图形接口定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="图形实现——Circle"><a href="#图形实现——Circle" class="headerlink" title="图形实现——Circle"></a>图形实现——Circle</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shap</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"it is a circle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="图形实现——Square"><a href="#图形实现——Square" class="headerlink" title="图形实现——Square"></a>图形实现——Square</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"it is a square"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h5><p>关于工厂，最简单的是传入一个参数，使用 if, else或者case做条件判断返回不同的产品实现，也可以使用反射的方法，来消除这些判断条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleShapFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shap <span class="title">create</span><span class="params">(String shapType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"circle"</span>.equals(shapType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"square"</span>.equals(shapType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以使用这种方式消除if之类的条件判断</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Shap <span class="title">create</span><span class="params">(Class&lt;T&gt; clz)</span> </span>&#123;</span><br><span class="line">        Shap shap = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            shap = (Shap) clz.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shap shap = <span class="keyword">new</span> SimpleShapFactory().create(<span class="string">"circle"</span>);</span><br><span class="line">        <span class="keyword">if</span> (shap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            shap.draw();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Shap shap1 = <span class="keyword">new</span> SimpleShapFactory().create(Square.class);</span><br><span class="line">        <span class="keyword">if</span> (shap1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            shap1.draw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">it is a circle</span><br><span class="line">it is a square</span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>隐藏了具体的对象创建细节，提高了灵活性。</li><li>便于扩展，添加新的产品时候只需要添加一个新的产品类，修改工厂。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>每添加一个新的产品都要修改工厂类在其中添加判断分支（如果没有用反射的方式），违反了开放-封闭原则。</li><li>如果添加的产品过多会导致类膨胀。</li></ul><h3 id="三-工厂方法模式"><a href="#三-工厂方法模式" class="headerlink" title="三. 工厂方法模式"></a>三. 工厂方法模式</h3><p>工厂方法模式除了对产品类的抽象外，又添加了对工厂的抽象，不再在工厂中进行调用逻辑的判断处理，而是将这个判断放在了客户端。工厂方法针对每一产品都提供一个工厂类，不同的工厂创建不同的产品实例。</p><h4 id="UML类图解析-1"><a href="#UML类图解析-1" class="headerlink" title="UML类图解析"></a>UML类图解析</h4><p><img src="https://brightloong.github.io/images/design-pattern/factory/factoryMethod.png" alt="factoryMethod"></p><p>工厂方法模式和简单工厂类似，不同的就是这里对工厂进行了抽象，有了一个抽象的工厂角色——AbstarctFactory。</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>产品实现和简单工厂模式的一样，这里不再给出。</p><h5 id="AbstractFactory——FactoryMethod"><a href="#AbstractFactory——FactoryMethod" class="headerlink" title="AbstractFactory——FactoryMethod"></a>AbstractFactory——FactoryMethod</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span>  <span class="title">FactoryMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span>  Shap <span class="title">createShap</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="FactoryA——CircleFactory"><a href="#FactoryA——CircleFactory" class="headerlink" title="FactoryA——CircleFactory"></a>FactoryA——CircleFactory</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleFactory</span> <span class="keyword">extends</span> <span class="title">FactoryMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shap <span class="title">createShap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="FactoryB——SquareFactory"><a href="#FactoryB——SquareFactory" class="headerlink" title="FactoryB——SquareFactory"></a>FactoryB——SquareFactory</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SquareFactory</span> <span class="keyword">extends</span> <span class="title">FactoryMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shap <span class="title">createShap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="客户端调用-1"><a href="#客户端调用-1" class="headerlink" title="客户端调用"></a>客户端调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shap shap = <span class="keyword">new</span> SquareFactory().createShap();</span><br><span class="line">        shap.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it is a square</span><br></pre></td></tr></table></figure><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>拥有简单工厂模式的优点。</li><li>具有简单工厂模式的优点，并且再此基础上满足了开放-封闭原则，系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了。这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>随着产品类的增加，要提供与其对应的子类，系统中类个数成对增加，在一定程度上增加了系统的复杂性。</li></ul><h3 id="四-抽象工厂模式"><a href="#四-抽象工厂模式" class="headerlink" title="四. 抽象工厂模式"></a>四. 抽象工厂模式</h3><p>上面说道的简单工厂和工厂模式都只能创建一个产品实例，抽象工厂提供了生成多产品的功能。这里很多地方提到了<strong>产品族</strong> 的说法，比如生产面包的工厂不止生产面包，还会生产饼干、糖果之类的。</p><h4 id="UML类图解析-2"><a href="#UML类图解析-2" class="headerlink" title="UML类图解析"></a>UML类图解析</h4><p><img src="https://brightloong.github.io/images/design-pattern/factory/AbstractFactory.png" alt="factoryMethod"></p><p>这里有ProductA和ProductB两个产品抽象，并且分别有两个具体实现，抽象工厂AbstractFactory和之前不同的是这里提供了两个生产产品的方法——crateProductA和crateProductB。</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>在之前Shap产品的基础上增加Colro产品，具体代码如下：</p><h5 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Color实现——Red"><a href="#Color实现——Red" class="headerlink" title="Color实现——Red"></a>Color实现——Red</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"it is red."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Color实现——Green"><a href="#Color实现——Green" class="headerlink" title="Color实现——Green"></a>Color实现——Green</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Green</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"it is green"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抽象工厂——-AbstractFactory"><a href="#抽象工厂——-AbstractFactory" class="headerlink" title="抽象工厂——  AbstractFactory"></a>抽象工厂——  AbstractFactory</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> Color <span class="title">createColor</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> Shape <span class="title">createShape</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="工厂实现1"><a href="#工厂实现1" class="headerlink" title="工厂实现1"></a>工厂实现1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedCircleFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Shap <span class="title">createShap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Color <span class="title">createColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Red();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="工厂实现2"><a href="#工厂实现2" class="headerlink" title="工厂实现2"></a>工厂实现2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenSquareFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Shap <span class="title">createShap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Color <span class="title">createColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Green();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="客户端调用-2"><a href="#客户端调用-2" class="headerlink" title="客户端调用"></a>客户端调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/5/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractFactory factory = <span class="keyword">new</span> RedCircleFactory();</span><br><span class="line">        Shap shap = factory.createShap();</span><br><span class="line">        Color color = factory.createColor();</span><br><span class="line">        shap.draw();</span><br><span class="line">        color.fill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">it is a circle</span><br><span class="line">it is red.</span><br></pre></td></tr></table></figure><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul><li>支持了不同类型的产品，更加灵活。</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul><li>缺点很明显，类膨胀越来越厉害。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/factory/factory.jpg&quot; alt=&quot;factory&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一.概述&quot;&gt;&lt;/a&gt;一.概述&lt;/h3&gt;&lt;p&gt;&lt;code&gt;工厂模式（Factory Pattern）&lt;/code&gt;是 Java 中最常用的设计模式之一，其通过提供对象创建工厂，将创建对象的具体过程屏蔽起来，使调用的客户端不用关心具体的对象创建过程，提高了灵活性。
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——装饰器模式</title>
    <link href="https://brightloong.github.io/2018/04/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/04/22/设计模式——装饰器模式/</id>
    <published>2018-04-22T09:43:58.000Z</published>
    <updated>2018-04-22T11:36:16.138Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/decorator/decorator.jpg" alt="decorator"></p><h3 id="一-概述"><a href="#一-概述" class="headerlink" title="一. 概述"></a>一. 概述</h3><p><code>装饰器模式（Decorator）</code>,动态地给一个对象添加一些额外的职责，就增加功能来说，装饰器模式比生成子类更为灵活；它允许向一个现有的对象添加新的功能，同时又不改变其结构。<a id="more"></a></p><blockquote><p>装饰器模式属于结构型模式。</p></blockquote><h3 id="二-UML类图解析"><a href="#二-UML类图解析" class="headerlink" title="二. UML类图解析"></a>二. UML类图解析</h3><p>装饰器模式的UML类图如下：</p><p><img src="https://brightloong.github.io/images/design-pattern/decorator/decorator.png" alt="decorator"></p><ul><li>Component：接口，定义一个抽象接口，真实对象和装饰对象具有相同的接口，以便动态的添加职责。</li><li>ConcreteComponent：具体的对象。</li><li>Decorator：装饰类，继承了Component,从外类来扩展Component类的功能，并且持有一个构建引用，进行请求转发。</li><li>ConcreteDecorator：具体装饰类，用于给实际对象添加职责。</li></ul><h3 id="三-代码实现"><a href="#三-代码实现" class="headerlink" title="三. 代码实现"></a>三. 代码实现</h3><p>现在考虑这样一个场景，现在有一个煎饼摊，人们去买煎饼（Pancake）,有些人要加火腿（Ham）的，有些人要加鸡蛋（Egg）的，有些人要加生菜（Lettuce）的，当然土豪可能有啥全给加上^_^。用上述的装饰器模式来进行编码。</p><h4 id="1-定义煎饼接口IPancake"><a href="#1-定义煎饼接口IPancake" class="headerlink" title="1. 定义煎饼接口IPancake"></a>1. 定义煎饼接口IPancake</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个煎饼接口</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPancake</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义烹饪的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-定义具体的煎饼Pancake"><a href="#2-定义具体的煎饼Pancake" class="headerlink" title="2. 定义具体的煎饼Pancake"></a>2. 定义具体的煎饼Pancake</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体的煎饼对象，可用其他装饰类进行动态扩展。</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pancake</span> <span class="keyword">implements</span> <span class="title">IPancake</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"的煎饼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-定义抽象装饰类PancakeDecorator"><a href="#3-定义抽象装饰类PancakeDecorator" class="headerlink" title="3. 定义抽象装饰类PancakeDecorator"></a>3. 定义抽象装饰类PancakeDecorator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现接口的抽象装饰类，建议设置成abstract.</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="class"><span class="keyword">class</span> <span class="title">PancakeDecorator</span> <span class="keyword">implements</span> <span class="title">IPancake</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***/</span></span><br><span class="line">    <span class="keyword">private</span> IPancake pancake;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PancakeDecorator</span><span class="params">(IPancake pancake)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pancake = pancake;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.pancake != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pancake.cook();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-具体装饰类EggDecorator"><a href="#4-具体装饰类EggDecorator" class="headerlink" title="4. 具体装饰类EggDecorator"></a>4. 具体装饰类EggDecorator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对煎饼加鸡蛋的装饰类，继承PancakeDecorator，覆盖cook操作</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EggDecorator</span> <span class="keyword">extends</span> <span class="title">PancakeDecorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EggDecorator</span><span class="params">(IPancake pancake)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 覆盖cook方法，加入自身的实现，并且调用父类的cook方法，也就是构造函数中</span></span><br><span class="line"><span class="comment">     * EggDecorator(IPancake pancake)，这里传入的pancake的cook操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加了一个鸡蛋，"</span>);</span><br><span class="line">        <span class="keyword">super</span>.cook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-具体装饰类HamDecorator"><a href="#5-具体装饰类HamDecorator" class="headerlink" title="5. 具体装饰类HamDecorator"></a>5. 具体装饰类HamDecorator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对煎饼加火腿的装饰类，继承PancakeDecorator，覆盖cook操作</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HamDecorator</span> <span class="keyword">extends</span> <span class="title">PancakeDecorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HamDecorator</span><span class="params">(IPancake pancake)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 覆盖cook方法，加入自身的实现，并且调用父类的cook方法，也就是构造函数中</span></span><br><span class="line"><span class="comment">     * EggDecorator(IPancake pancake)，这里传入的pancake的cook操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加了一根火腿，"</span>);</span><br><span class="line">        <span class="keyword">super</span>.cook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-具体装饰类LettuceDecorator"><a href="#6-具体装饰类LettuceDecorator" class="headerlink" title="6. 具体装饰类LettuceDecorator"></a>6. 具体装饰类LettuceDecorator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对煎饼加生菜的装饰类，继承PancakeDecorator，覆盖cook操作</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LettuceDecorator</span> <span class="keyword">extends</span> <span class="title">PancakeDecorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LettuceDecorator</span><span class="params">(IPancake pancake)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 覆盖cook方法，加入自身的实现，并且调用父类的cook方法，也就是构造函数中</span></span><br><span class="line"><span class="comment">     * EggDecorator(IPancake pancake)，这里传入的pancake的cook操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加了一颗生菜，"</span>);</span><br><span class="line">        <span class="keyword">super</span>.cook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-客户端调用以及结果"><a href="#7-客户端调用以及结果" class="headerlink" title="7. 客户端调用以及结果"></a>7. 客户端调用以及结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.brightloong.design.decorator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用客户端</span></span><br><span class="line"><span class="comment"> * Created by BrightLoong on 2018/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"=========我是土豪都给我加上==========="</span>);</span><br><span class="line">        IPancake pancake = <span class="keyword">new</span> Pancake();</span><br><span class="line">        IPancake pancakeWithEgg = <span class="keyword">new</span> EggDecorator(pancake);</span><br><span class="line">        IPancake pancakeWithEggAndHam = <span class="keyword">new</span> HamDecorator(pancakeWithEgg);</span><br><span class="line">        IPancake panckeWithEggAndHamAndLettuce = <span class="keyword">new</span> LettuceDecorator(pancakeWithEggAndHam);</span><br><span class="line">        panckeWithEggAndHamAndLettuce.cook();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"==========我是程序猿，加两个鸡蛋补补=============="</span>);</span><br><span class="line">        IPancake pancake2 = <span class="keyword">new</span> Pancake();</span><br><span class="line">        IPancake pancakeWithEgg2 = <span class="keyword">new</span> EggDecorator(pancake2);</span><br><span class="line">        IPancake pancakeWithTwoEgg = <span class="keyword">new</span> EggDecorator(pancakeWithEgg2);</span><br><span class="line">        pancakeWithTwoEgg.cook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">=========我是土豪都给我加上===========</span><br><span class="line">加了一颗生菜，</span><br><span class="line">加了一根火腿，</span><br><span class="line">加了一个鸡蛋，</span><br><span class="line">的煎饼</span><br><span class="line">==========我是程序猿，加两个鸡蛋补补==============</span><br><span class="line">加了一个鸡蛋，</span><br><span class="line">加了一个鸡蛋，</span><br><span class="line">的煎饼</span><br></pre></td></tr></table></figure><h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h3><p>关于装饰器模式的使用，在我看来主要有一下几点需要注意的</p><ul><li>抽象装饰器和具体被装饰的对象实现同一个接口</li><li>抽象装饰器里面要持有接口对象，以便请求传递</li><li>具体装饰器覆盖抽象装饰器方法并用super进行调用，传递请求</li></ul><h4 id="1-适用场景"><a href="#1-适用场景" class="headerlink" title="1. 适用场景"></a>1. 适用场景</h4><ul><li>扩展一个类的功能。</li><li>动态添加功能，动态撤销。</li></ul><h4 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h4><ul><li>装饰类和被装饰类都只关心自身的核心业务，实现了解耦。</li><li>方便动态的扩展功能，且提供了比继承更多的灵活性。</li></ul><h4 id="3-缺点"><a href="#3-缺点" class="headerlink" title="3. 缺点"></a>3. 缺点</h4><ul><li>如果功能扩展过多，势必产生大量的类。</li><li>多层装饰比较复杂。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/decorator/decorator.jpg&quot; alt=&quot;decorator&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一. 概述&quot;&gt;&lt;/a&gt;一. 概述&lt;/h3&gt;&lt;p&gt;&lt;code&gt;装饰器模式（Decorator）&lt;/code&gt;,动态地给一个对象添加一些额外的职责，就增加功能来说，装饰器模式比生成子类更为灵活；它允许向一个现有的对象添加新的功能，同时又不改变其结构。
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——单例模式</title>
    <link href="https://brightloong.github.io/2018/04/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/04/15/设计模式——单例模式/</id>
    <published>2018-04-15T09:43:58.000Z</published>
    <updated>2018-04-16T14:55:59.385Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/Singleton/Singleton.jpg" alt="Singleton"></p><blockquote><p>单例模式属于创建模型。</p></blockquote><p>单例模式，是设计模式中比较简单而又最常用的模式之一。通过单例模式可以保证系统中，应用该模式的类只有一个类实例。<a id="more"></a>例如，一个系统中可以存在多个打印任务，但是只能有一个正在工作的任务；一个系统只能有一个窗口管理器或文件系统；一个系统只能有一个计时工具或ID(序号)生成器。</p><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>单例模式(<code>Singleton Pattern</code>)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p><p>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1. 饿汉式"></a>1. 饿汉式</h4><p>饿汉式提供了线程安全的单例，但是不支持懒加载，在第一次加载类到内存中时就会初始化（所以称之为饿汉，不管怎么样，先初始化了再说）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式单例模式.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 全局唯一实例. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-非线程安全懒汉式"><a href="#2-非线程安全懒汉式" class="headerlink" title="2. 非线程安全懒汉式"></a>2. 非线程安全懒汉式</h4><p>相对饿汉式，懒汉式提供了再需要时候初始化的方式，以下是非线程安全的实现方式，不建议使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非线程安全的懒汉式.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过懒加载的方式获取实例，但是非线程安全.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Singleton实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-低效的线程安全懒汉式——使用synchronized"><a href="#3-低效的线程安全懒汉式——使用synchronized" class="headerlink" title="3. 低效的线程安全懒汉式——使用synchronized"></a>3. 低效的线程安全懒汉式——使用synchronized</h4><p>使用synchronized进行同步，虽然保证了线程安全，但是并不高效，比较单例模式只有在第一次创建的时候会存在线程安全问题，而不需要在创建单例后在以后的每一次调用还要进行同步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 低效的线程安全的懒汉式.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 synchronized 关键字来保证线程安全，也是懒加载的方式来获取实例.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Singleton实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-双重校验锁线程安全懒汉式"><a href="#4-双重校验锁线程安全懒汉式" class="headerlink" title="4. 双重校验锁线程安全懒汉式"></a>4. 双重校验锁线程安全懒汉式</h4><p>相对上面的同步方法，双重校验使用同步块解决线程安全问题。两次检查instance == null，一次是在同步块外，一次是在同步快内。为什么在同步块内还要检验一次，因为可能会有多个线程一起进入同步块外的if，如果在同步块内不进行二次检验的话就会生成多个实例了。</p><blockquote><p>注：受限于Jdk5以前的Java内存模型，仍然会有bug，Java5及之后才能正常达到单例效果。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重校验锁线程安全懒汉式.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过'双重校验锁'来更高效的保证线程安全，也是懒加载的方式来获取实例.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Singleton实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-枚举式"><a href="#5-枚举式" class="headerlink" title="5. 枚举式"></a>5. 枚举式</h4><p><code>《Effective Java》</code>一书中推荐使用枚举来实现单例模式，该方式简单可自由序列化；保证只有一个实例（即使使用反射机制也无法多次实例化一个枚举量），但是不支持懒加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举方式的单例.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-静态内部类"><a href="#6-静态内部类" class="headerlink" title="6. 静态内部类"></a>6. 静态内部类</h4><p>使用JVM本身机制保证了线程安全问题，其只有显式通过调用getInstance方法时，才会装载SingletonHolder类，从而实例化instance；同时读取实例的时候不会进行同步，没有性能缺陷，也不依赖JDK版本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过使用静态内部类的方式来实现懒加载且线程安全的创建单例.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态内部类.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">SingletonHolder</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过懒加载的方式获取Singleton唯一实例的方法.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Singleton实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是对单例模式的简单介绍，单例模式非常简单，其他的优缺点之类的不再赘述。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/Singleton/Singleton.jpg&quot; alt=&quot;Singleton&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;单例模式属于创建模型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;单例模式，是设计模式中比较简单而又最常用的模式之一。通过单例模式可以保证系统中，应用该模式的类只有一个类实例。
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——命令模式</title>
    <link href="https://brightloong.github.io/2018/01/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/01/09/设计模式——命令模式/</id>
    <published>2018-01-09T09:46:21.000Z</published>
    <updated>2018-03-25T05:02:55.729Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/command/command.jpeg" alt="command"></p><h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h3><p><strong>命令模式</strong> ，将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对<code>请求排队</code>或<code>记录请求日志</code>，以及支持撤销的操作。<a id="more"></a></p><p>命令模式的特点是对命令进行了封装，将请求的具体操作封装成命令对象，用户无需知道具体需要执行什么样的操作逻辑，只用调用对应的命令即可，实现了用户请求和请求实现的解耦，方便扩展。</p><h3 id="二-模式结构解析"><a href="#二-模式结构解析" class="headerlink" title="二. 模式结构解析"></a>二. 模式结构解析</h3><h4 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://brightloong.github.io/images/design-pattern/command/command.png" alt="UML图"></p><ul><li>Client(客户端)：确定命令接收者，并创建具体的命令。</li><li>Invoker(命令发起者)：发起命令执行请求</li><li>ICommand(命令抽象接口)：声明的命令抽象接口，具有execute()方法。</li><li>ConcreteCommand(命令接口的具体实现)：实现命令接口，实现具体的execute()方法，负责调用命令接收者进行命令执行。</li><li>Receiver(命令接受者)：接收请求并执行，具体的请求实现，<u>这里的任何类都有可能成为一个命令接收者。</u></li></ul><h3 id="三-简单命令模式代码实现"><a href="#三-简单命令模式代码实现" class="headerlink" title="三. 简单命令模式代码实现"></a>三. 简单命令模式代码实现</h3><h4 id="1-ICommand命令接口定义"><a href="#1-ICommand命令接口定义" class="headerlink" title="1. ICommand命令接口定义"></a>1. ICommand命令接口定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-ConcreteCommand具体命令实现"><a href="#2-ConcreteCommand具体命令实现" class="headerlink" title="2. ConcreteCommand具体命令实现"></a>2. ConcreteCommand具体命令实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.ICommand;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.Receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.command.core.simple.ICommand#execute()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteCommand发送命令给接给命令接收者！"</span>);</span><br><span class="line">        receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Receiver具体的命令接收者实现"><a href="#3-Receiver具体的命令接收者实现" class="headerlink" title="3. Receiver具体的命令接收者实现"></a>3. Receiver具体的命令接收者实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Receiver接收到命令并执行！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Invoker命令调用者"><a href="#4-Invoker命令调用者" class="headerlink" title="4. Invoker命令调用者"></a>4. Invoker命令调用者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ICommand command;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the command</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICommand <span class="title">getCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(ICommand command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"命令请求者Invoker发起命令！"</span>);</span><br><span class="line">        <span class="keyword">this</span>.command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Client客户端测试代码和结果"><a href="#5-Client客户端测试代码和结果" class="headerlink" title="5. Client客户端测试代码和结果"></a>5. Client客户端测试代码和结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.impl.ConcreteCommand;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">        ICommand command = <span class="keyword">new</span> ConcreteCommand(receiver);</span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">        invoker.setCommand(command);</span><br><span class="line">        invoker.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令请求者Invoker发起命令！</span><br><span class="line">ConcreteCommand发送命令给接给命令接收者！</span><br><span class="line">Receiver接收到命令并执行！</span><br></pre></td></tr></table></figure><h3 id="四-宏命令的代码实现"><a href="#四-宏命令的代码实现" class="headerlink" title="四. 宏命令的代码实现"></a>四. 宏命令的代码实现</h3><p>宏命令，就是又多条命令组成一个命令，是一个命令的组合。实现如下</p><h4 id="1-新增宏命令抽象定义IMacroCommand"><a href="#1-新增宏命令抽象定义IMacroCommand" class="headerlink" title="1. 新增宏命令抽象定义IMacroCommand"></a>1. 新增宏命令抽象定义IMacroCommand</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.macro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.ICommand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMacroCommand</span> <span class="keyword">extends</span> <span class="title">ICommand</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ICommand command)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ICommand command)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-宏命令具体实现MacroCommandImpl"><a href="#2-宏命令具体实现MacroCommandImpl" class="headerlink" title="2. 宏命令具体实现MacroCommandImpl"></a>2. 宏命令具体实现MacroCommandImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.macro.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.macro.IMacroCommand;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.ICommand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacroCommandImpl</span> <span class="keyword">implements</span> <span class="title">IMacroCommand</span></span>&#123;</span><br><span class="line">    List&lt;ICommand&gt; commands = <span class="keyword">new</span> ArrayList&lt;ICommand&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.command.core.simple.ICommand#execute()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ICommand command : commands) &#123;</span><br><span class="line">            command.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.command.core.macro.IMacroCommand#add(brightloong.github.io.command.core.simple.ICommand)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ICommand command)</span> </span>&#123;</span><br><span class="line">        commands.add(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.command.core.macro.IMacroCommand#remove(brightloong.github.io.command.core.simple.ICommand)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ICommand command)</span> </span>&#123;</span><br><span class="line">        commands.remove(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Receiver新增方法"><a href="#3-Receiver新增方法" class="headerlink" title="3. Receiver新增方法"></a>3. Receiver新增方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Receiver接收到命令并执行！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大河向东流，天上的形象参北斗..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大吉大利，今晚吃鸡。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-新增命令PlayGameCommand和SingCommand"><a href="#4-新增命令PlayGameCommand和SingCommand" class="headerlink" title="4. 新增命令PlayGameCommand和SingCommand"></a>4. 新增命令PlayGameCommand和SingCommand</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.ICommand;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.Receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayGameCommand</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlayGameCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.command.core.simple.ICommand#execute()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        receiver.playGame();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.ICommand;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.Receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingCommand</span> <span class="keyword">implements</span> <span class="title">ICommand</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.command.core.simple.ICommand#execute()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        receiver.sing();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-修改客户端Client以及输出结果展示"><a href="#5-修改客户端Client以及输出结果展示" class="headerlink" title="5. 修改客户端Client以及输出结果展示"></a>5. 修改客户端Client以及输出结果展示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.command.core.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.macro.IMacroCommand;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.macro.impl.MacroCommandImpl;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.impl.PlayGameCommand;</span><br><span class="line"><span class="keyword">import</span> brightloong.github.io.command.core.simple.impl.SingCommand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">        ICommand singCommand = <span class="keyword">new</span> SingCommand(receiver);</span><br><span class="line">        ICommand playGameCommand = <span class="keyword">new</span> PlayGameCommand(receiver);</span><br><span class="line">        </span><br><span class="line">        IMacroCommand macroCommand = <span class="keyword">new</span> MacroCommandImpl();</span><br><span class="line">        macroCommand.add(singCommand);</span><br><span class="line">        macroCommand.add(playGameCommand);</span><br><span class="line">        </span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">        invoker.setCommand(macroCommand);</span><br><span class="line">        </span><br><span class="line">        invoker.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令请求者Invoker发起命令！</span><br><span class="line">大河向东流，天上的形象参北斗...</span><br><span class="line">大吉大利，今晚吃鸡。</span><br></pre></td></tr></table></figure><h3 id="五-使用场景"><a href="#五-使用场景" class="headerlink" title="五. 使用场景"></a>五. 使用场景</h3><h4 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1. 应用场景"></a>1. 应用场景</h4><ul><li>使用命令模式作为”CallBack”在面向对象系统中的替代。”CallBack”讲的便是先将一个函数登记上，然后在以后调用此函数。</li><li>需要在不同的时间指定请求、将请求排队。一个命令对象和原先的请求发出者可以有不同的生命期。换言之，原先的请求发出者可能已经不在了，而命令对象本身仍然是活动的。这时命令的接收者可以是在本地，也可以在网络的另外一个地址。命令对象可以在串形化之后传送到另外一台机器上去。</li><li>系统需要支持命令的撤消(undo)。命令对象可以把状态存储起来，等到客户端需要撤销命令所产生的效果时，可以调用undo()方法，把命令所产生的效果撤销掉。命令对象还可以提供redo()方法，以供客户端在需要时，再重新实施命令效果。</li><li>如果一个系统要将系统中所有的数据更新到日志里，以便在系统崩溃时，可以根据日志里读回所有的数据更新命令，重新调用Execute()方法一条一条执行这些命令，从而恢复系统在崩溃前所做的数据更新。</li></ul><h4 id="2-具体场景"><a href="#2-具体场景" class="headerlink" title="2. 具体场景"></a>2. 具体场景</h4><ul><li><strong>Multi-level undo（多级undo操作）</strong> </li></ul><p>如果系统需要实现多级回退操作，这时如果所有用户的操作都以command对象的形式实现，系统可以简单地用stack来保存最近执行的命令，如果用户需要执行undo操作，系统只需简单地popup一个最近的 command对象然后执行它的undo()方法既可。</p><ul><li><strong>Transactional behavior（原子事务行为）</strong> </li></ul><p>借助command模式，可以简单地实现一个具有原子事务的行为。当一个事务失败时，往往需要回退到执行前的状态，可以借助command对象保存这种状态，简单地处理回退操作。</p><ul><li><strong>Progress bars（状态条）</strong></li></ul><p>假如系统需要按顺序执行一系列的命令操作，如果每个command对象都提供一个 getEstimatedDuration()方法，那么系统可以简单地评估执行状态并显示出合适的状态条。 </p><ul><li><strong>Wizards（导航）</strong> </li></ul><p>通常一个使用多个wizard页面来共同完成一个简单动作。一个自然的方法是使用一个command对象来封装wizard过程，该command对象在第一个wizard页面显示时被创建，每个wizard页面接收用户输入并设置到该command对象中，当最后一个wizard页面用户按下“Finish”按钮时，可以简单地触发一个事件调用execute()方法执行整个动作。通过这种方法，command类不包含任何跟用户界面有关的代码，可以分离用户界面与具体的处理逻辑。 </p><ul><li><strong>GUI buttons and menu items（GUI按钮与菜单条等等）</strong> </li></ul><p>Swing系统里，用户可以通过工具条按钮，菜单按钮执行命令，可以用command对象来封装命令的执行。</p><ul><li><strong>Thread pools（线程池）</strong></li></ul><p>通常一个典型的线程池实现类可能有一个名为addTask()的public方法，用来添加一项工作任务到任务队列中。该任务队列中的所有任务可以用command对象来封装，通常这些command对象会实现一个通用的接口比如java.lang.Runnable。</p><ul><li><strong>Macro recording（宏纪录）</strong></li></ul><p>可以用command对象来封装用户的一个操作，这样系统可以简单通过队列保存一系列的command对象的状态就可以记录用户的连续操作。这样通过执行队列中的command对象，就可以完成”Play back”操作了。</p><ul><li><strong>Networking</strong> </li></ul><p>通过网络发送command命令到其他机器上运行。</p><ul><li><strong>Parallel Processing（并发处理）</strong></li></ul><p>当一个调用共享某个资源并被多个线程并发处理时。</p><h3 id="六-优缺点"><a href="#六-优缺点" class="headerlink" title="六. 优缺点"></a>六. 优缺点</h3><h4 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h4><ul><li><strong>更松散的耦合</strong></li></ul><p>命令模式使得发起命令的对象——客户端，和具体实现命令的对象——接收者对象完全解耦，也就是说发起命令的对象完全不知道具体实现对象是谁，也不知道如何实现。</p><ul><li><strong>更动态的控制</strong></li></ul><p>命令模式把请求封装起来，可以动态地对它进行参数化、队列化和日志化等操作，从而使得系统更灵活。</p><ul><li><strong>很自然的复合命令</strong></li></ul><p>命令模式中的命令对象能够很容易地组合成复合命令，也就是宏命令，从而使系统操作更简单，功能更强大。</p><ul><li><strong>更好的扩展性</strong></li></ul><p>由于发起命令的对象和具体的实现完全解耦，因此扩展新的命令就很容易，只需要实现新的命令对象，然后在装配的时候，把具体的实现对象设置到命令对象中，然后就可以使用这个命令对象，已有的实现完全不用变化。</p><h4 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h4><ul><li>同样的和大部分设计模式一样，会增加系统的复杂性，这里主要指的是类的数量的增加。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.cnblogs.com/java-my-life/archive/2012/06/01/2526972.html" target="_blank" rel="noopener">http://www.cnblogs.com/java-my-life/archive/2012/06/01/2526972.html</a></li><li><a href="http://blog.csdn.net/zdsicecoco/article/details/51332440" target="_blank" rel="noopener">http://blog.csdn.net/zdsicecoco/article/details/51332440</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/command/command.jpeg&quot; alt=&quot;command&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一. 简介&quot;&gt;&lt;/a&gt;一. 简介&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;命令模式&lt;/strong&gt; ，将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对&lt;code&gt;请求排队&lt;/code&gt;或&lt;code&gt;记录请求日志&lt;/code&gt;，以及支持撤销的操作。
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式——模板方法模式</title>
    <link href="https://brightloong.github.io/2018/01/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://brightloong.github.io/2018/01/09/设计模式——模板方法模式/</id>
    <published>2018-01-09T09:43:58.000Z</published>
    <updated>2018-01-10T02:33:44.527Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/design-pattern/templateMethod/template.jpg" alt="template"></p><blockquote><p>模板方法属于行为型模式</p></blockquote><a id="more"></a><h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h3><p><strong>模板方法模式：</strong>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该<code>算法的某些特定步骤</code>。</p><p>准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。</p><p>模板方法模式是基于集成的代码复用的模式。</p><h3 id="二-UML类图"><a href="#二-UML类图" class="headerlink" title="二. UML类图"></a>二. UML类图</h3><p><img src="https://brightloong.github.io/images/design-pattern/templateMethod/templateMethod.png" alt="UML图"></p><ul><li>AbstractTemplate(抽象模板)：<ul><li>templateMethod()：模板方法，可能实现了部分逻辑，并调用abstractMethod()方法，将其他实现延迟到子类中去实现。</li><li>abstractMethod()：抽象操作方法，子类集成并实现。</li></ul></li><li>ConcreteTemplate1(抽象模板具体实现1)：实现父类定义的一个或多个抽象方法(也可以不是抽象方法，可以是一个钩子方法，钩子方法可以让子类决定是否对算法的不同点进行挂钩)。</li><li>Client(客户端)：调用具体的模板实现</li></ul><h3 id="三-代码实现"><a href="#三-代码实现" class="headerlink" title="三. 代码实现"></a>三. 代码实现</h3><h4 id="1-AbstractTemplate抽象模板类"><a href="#1-AbstractTemplate抽象模板类" class="headerlink" title="1. AbstractTemplate抽象模板类"></a>1. AbstractTemplate抽象模板类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractTemplate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMehtod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始连接，连接成功..."</span>);</span><br><span class="line">        abstracMethod();</span><br><span class="line">        System.out.println(<span class="string">"断开连接，释放资源..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstracMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-concreteTemplate1抽象模板类具体实现1"><a href="#2-concreteTemplate1抽象模板类具体实现1" class="headerlink" title="2. concreteTemplate1抽象模板类具体实现1"></a>2. concreteTemplate1抽象模板类具体实现1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteTemplate1</span> <span class="keyword">extends</span> <span class="title">AbstractTemplate</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.template.AbstractTemplate#abstracMethod()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abstracMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询用户表...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-concreteTemplate2抽象模板类具体实现2"><a href="#3-concreteTemplate2抽象模板类具体实现2" class="headerlink" title="3. concreteTemplate2抽象模板类具体实现2"></a>3. concreteTemplate2抽象模板类具体实现2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteTemplate2</span> <span class="keyword">extends</span> <span class="title">AbstractTemplate</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> brightloong.github.io.template.AbstractTemplate#abstracMethod()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abstracMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询商品表..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Client客户端调用测试代码和结果"><a href="#4-Client客户端调用测试代码和结果" class="headerlink" title="4. Client客户端调用测试代码和结果"></a>4. Client客户端调用测试代码和结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> brightloong.github.io.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractTemplate template = <span class="keyword">new</span> ConcreteTemplate1();</span><br><span class="line">        template.templateMehtod();</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">        AbstractTemplate template2 = <span class="keyword">new</span> ConcreteTemplate2();</span><br><span class="line">        template2.templateMehtod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">开始连接，连接成功...</span><br><span class="line">查询用户表....</span><br><span class="line">断开连接，释放资源...</span><br><span class="line"></span><br><span class="line">开始连接，连接成功...</span><br><span class="line">查询商品表...</span><br><span class="line">断开连接，释放资源...</span><br></pre></td></tr></table></figure><h3 id="四-使用场景"><a href="#四-使用场景" class="headerlink" title="四. 使用场景"></a>四. 使用场景</h3><ul><li>某些方法中使用了相同的代码或者方法造成代码重复。</li><li>控制子类扩展，子类必须遵守一定的算法规则。</li><li>HttpServlet就是典型的应用，其中service()方法作为模板方法，而doPost()和doGet()等方法就是可以被子类实现的具体方法。</li></ul><h3 id="五-优缺点"><a href="#五-优缺点" class="headerlink" title="五. 优缺点"></a>五. 优缺点</h3><h4 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h4><ul><li>可以将公共代码行为进行提取，以达到复用的目的。</li><li>子类实现算法的某些细节，有助于算法的扩展。</li><li>通过一个父类调用子类实现的操作，通过子类扩展增加新的行为，符合“开放-封闭原则”。</li></ul><h4 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2. 缺点"></a>2. 缺点</h4><ul><li>每个不同的实现都需要定义一个子类，这会导致类的个数的增加，设计更加抽象。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/design-pattern/templateMethod/template.jpg&quot; alt=&quot;template&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;模板方法属于行为型模式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://brightloong.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://brightloong.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>简介UML类图</title>
    <link href="https://brightloong.github.io/2017/10/18/%E7%AE%80%E4%BB%8BUML%E7%B1%BB%E5%9B%BE/"/>
    <id>https://brightloong.github.io/2017/10/18/简介UML类图/</id>
    <published>2017-10-18T08:56:32.000Z</published>
    <updated>2017-10-18T09:05:47.917Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/UML/title.png" alt="all"><br>UML全称<strong>Unified Modeling Language </strong>又称统一建模语言或标准建模语言。我们再学习各种框架或者设计模式之类的时候经常会看到UML类图，这里将UML类图一些基本点做一个记录。<a id="more"></a></p><blockquote><p>在文章中所涉及到的UML类图是使用<a href="https://staruml.en.softonic.com/" target="_blank" rel="noopener">starUML</a>工具创建，使用其他工具创建会有所不同。</p></blockquote><h3 id="总体印象"><a href="#总体印象" class="headerlink" title="总体印象"></a>总体印象</h3><p><img src="https://brightloong.github.io/images/UML/all.png" alt="all"></p><p>上面的UML类图基本展示了UML类图的大部分元素，以及类与类之间的关系，下面将对其一一进行解释。</p><h3 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h3><p><img src="https://brightloong.github.io/images/UML/note.png" alt="note"></p><p>UML类图注解的表示方法，如上右半部所示。</p><h3 id="类结构表示"><a href="#类结构表示" class="headerlink" title="类结构表示"></a>类结构表示</h3><p><img src="https://brightloong.github.io/images/UML/class.png" alt="class"><img src="https://brightloong.github.io/images/UML/interface.png" alt="interface"></p><p>类的表示方法如图，一般分为三层，从上到下依次为类名、属性和方法。接口表示和类的表示类似，只是在上面标明了是interface（这只是表示接口的一种方式，并且不同的工具展现方式可能不同，还有一种棒棒糖的形式，就是一个圆加一条竖线，并不常见，所以也不过多介绍），并且这里我隐藏了属性层。如果是抽象类，在使用starUML工具创建的时候类名会以斜线表示。关于类的表示有以下几点：</p><ul><li>+：public，-：private，#：protected</li><li>属性冒号后的内容表示属性的类型</li><li>方法冒号后的内容表示属性的返回值</li><li>类型说明并不是必须的</li></ul><h3 id="类关系表示"><a href="#类关系表示" class="headerlink" title="类关系表示"></a>类关系表示</h3><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p><img src="https://brightloong.github.io/images/UML/realization.png" alt="realization"></p><p>实现(Realization)，用一个带空心三角箭头的虚线来表示。用来表示接口和实现类的关系。比如：Plane(飞机)和Car(汽车)都实现了接口IVehicle(交通工具)。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p><img src="https://brightloong.github.io/images/UML/generalization.png" alt="Generalization"></p><p>继承(Generalization，也称为泛化关系)，用一个带空心三角箭头的实线来表示。表示父类与子类之间的关系。比如：Trunck(卡车)和Bus(公交车)都继承自父类Car(汽车)。</p><h4 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h4><p>关联(Association)，关联关系分为以下几种</p><ul><li>自关联：用一头带箭头的实线表示，自己指向自己</li><li>单向关联：用一头带箭头的实线表示，箭头指向被关联类</li><li>双向关联：用一条实线表示，或者使用双箭头</li></ul><p>关联关系表示类与类之间的联系，是同一层次上的关系，<strong>它不像依赖关系具有偶然性和临时性</strong>。一般情况是关联类引用被关联类作为全局变量。如下Human持有Name。</p><p>大多数的关联关系都是单向的。</p><p><img src="https://brightloong.github.io/images/UML/Association.png" alt="Association"></p><p><img src="https://brightloong.github.io/images/UML/DirectedAssociation.png" alt="DirectedAssociation"></p><h4 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h4><p><img src="https://brightloong.github.io/images/UML/aggregation.png" alt="class"></p><p>聚合(Aggregation)，用一头是空心菱形的直线表示(有些时候是一头为空心菱形，一头为箭头的实线)。聚合也是关联关系的一种，是<strong>整体和部分</strong>之间的关系，也就是has-a的关系(很多地方has-a，contains-a已经比较混乱，我理解上来看是has-a)，整体包含部分，但是部分脱离整体后依然可以单独存在。如上：Car(汽车)包含Engine(引擎)，但是Engine脱离了Car依然可以独立存在。</p><h4 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h4><p><img src="https://brightloong.github.io/images/UML/composotion.png" alt="Composition"></p><p>组合(Composition)，用一头是实心菱形的直线表示(有些时候是一头为实心菱形，一头为箭头的实线)。组合同样是一种关联关系，也同样是<strong>整体和部分之间的关系</strong>，我把它理解为contains-a的关系。<strong>和聚合的区别在于，部分脱离整体和无法单独存在，整体和部分具有相同的生命周期，整体不存在了，部分也就消失了。</strong>如上：Human(人类)包含Head(头)和Body(身体)，头和身体并不能单独存在。</p><h4 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h4><p><img src="https://brightloong.github.io/images/UML/Dependecy.png" alt="(Dependency"></p><p>依赖(Dependency)，用一头带箭头的虚线表示。表示类与类之间，一个类依赖于另一个类的定义。被依赖类的变化将会引起依赖类的变化。在java中依赖关系通常体现为，一个类使用另一个类作为局部变量，方法参数或静态方法调用，表示为use-a。如上，Engine的方法startEngine()方法使用Gasoline(汽油)作为参数，可能是调用了Gasoline中的burn()方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/UML/title.png&quot; alt=&quot;all&quot;&gt;&lt;br&gt;UML全称&lt;strong&gt;Unified Modeling Language &lt;/strong&gt;又称统一建模语言或标准建模语言。我们再学习各种框架或者设计模式之类的时候经常会看到UML类图，这里将UML类图一些基本点做一个记录。
    
    </summary>
    
      <category term="UML" scheme="https://brightloong.github.io/categories/UML/"/>
    
    
      <category term="UML" scheme="https://brightloong.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>使用树形结构保存实体</title>
    <link href="https://brightloong.github.io/2017/10/09/%E4%BD%BF%E7%94%A8%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E4%BF%9D%E5%AD%98%E5%AE%9E%E4%BD%93/"/>
    <id>https://brightloong.github.io/2017/10/09/使用树形结构保存实体/</id>
    <published>2017-10-09T02:31:07.000Z</published>
    <updated>2018-01-10T02:35:00.190Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4651321-2f5eac27cb0f0107.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tree"></p><p>之前在项目需要实现一个功能——将xml文件映射成实体，然后对映射的实体进行逻辑处理，最后保存到数据库中；由于xml结构的数据是结构化的数据，所以需要保证保存的数据具有正确的主外键关联。<a id="more"></a>如下所示，是一个需要保存到数据库的xml文件。当映射成对应的实体school和student的时候，我们需要知道“school-one”下面有哪些学生，“school-two”下面有哪些学生，这个时候想到了使用树形结构来保存实体，让实体之间依然存在关联关系。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">school-inf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">msg</span>&gt;</span>2017-10-1XX省学校信息总汇<span class="tag">&lt;/<span class="name">msg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">schools</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">school</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>school-one<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span>Rose<span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span>Jon<span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">school</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>school-two<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span>Alisa<span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">schools</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">school-inf</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="树形工具"><a href="#树形工具" class="headerlink" title="树形工具"></a>树形工具</h2><p>以下是树形工具类的实现，包含了树形节点类和树形结构类，由于代码中注释已经比较全面，所以不做过多的说明。</p><h3 id="树形节点类BeanTreeNode-java"><a href="#树形节点类BeanTreeNode-java" class="headerlink" title="树形节点类BeanTreeNode.java"></a>树形节点类BeanTreeNode.java</h3><p>每一个节点对应一个实体，节点包含了实体信息，为了保证实体之间的关联关系，需要留有父节点信息，所有的子节点信息。由此推断出，节点的主要成员有</p><ul><li>父节点信息</li><li>所有子节点信息</li><li>当前实体信息</li></ul><p>为了方便操作，我还多增加了id和pid（parent id）,以及节点类型（nodeType）。对id的相关操作我并没有添加，如果需要可以自行添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体树形结构点</span></span><br><span class="line"><span class="comment"> * BeanTreeNode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanTreeNode</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**标识id*/</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**父id标识，为了方便获取冗余出来*/</span></span><br><span class="line">    <span class="keyword">private</span> String pid;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**父节点*/</span></span><br><span class="line">    <span class="keyword">private</span> BeanTreeNode parentNode;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**节点类型*/</span></span><br><span class="line">    <span class="keyword">private</span> String nodeType;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**节点值*/</span></span><br><span class="line">    <span class="keyword">private</span> Object bean;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**子节点*/</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;BeanTreeNode&gt; childNodes;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentNode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> childNodes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanTreeNode</span><span class="params">(BeanTreeNode parentNode, String nodeType, Object bean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentNode = parentNode;</span><br><span class="line">        <span class="keyword">this</span>.nodeType = nodeType;</span><br><span class="line">        <span class="keyword">this</span>.bean = bean;</span><br><span class="line">        <span class="keyword">this</span>.childNodes = <span class="keyword">new</span> ArrayList&lt;BeanTreeNode&gt;();</span><br><span class="line">        <span class="keyword">this</span>.id = UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span> (parentNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.pid = parentNode.getId();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the nodeType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNodeType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nodeType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType the nodeType to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNodeType</span><span class="params">(String nodeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nodeType = nodeType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the parentNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanTreeNode <span class="title">getParentNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentNode the parentNode to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentNode</span><span class="params">(BeanTreeNode parentNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentNode = parentNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean the bean to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBean</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bean = bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the childNodes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;BeanTreeNode&gt; <span class="title">getChildNodes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> childNodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> childNodes the childNodes to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildNodes</span><span class="params">(List&lt;BeanTreeNode&gt; childNodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.childNodes = childNodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id the id to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the pid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid the pid to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPid</span><span class="params">(String pid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pid = pid;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否具有子节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true or false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">haveChild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !CollectionUtils.isEmpty(childNodes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树形结构类BeanTree-java"><a href="#树形结构类BeanTree-java" class="headerlink" title="树形结构类BeanTree.java"></a>树形结构类BeanTree.java</h3><p>BeanTree.java里面包含了如下的一些常用操作：</p><ul><li>返回根节点</li><li>返回最后添加节点</li><li>判断是否具有子节点</li><li>添加节点</li><li>移动节点到其他节点下</li><li>获取对应nodeType的所有节点或实体</li><li>根据实体获取节点</li><li>获取父节点</li><li>转化为map结构</li></ul><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体树形结构</span></span><br><span class="line"><span class="comment"> * BeanTree</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BrightLoong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanTree</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**根节点*/</span></span><br><span class="line">    <span class="keyword">private</span> BeanTreeNode root;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最新添加的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BeanTreeNode currentNode;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the currentNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanTreeNode <span class="title">getCurrentNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanTreeNode <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断节点是否有子节点.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 要判断的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true or false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">haveChild</span><span class="params">(BeanTreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CollectionUtils.isEmpty(node.getChildNodes());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在父节点上面添加节点，并返回天添加的节点.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentNode 父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean 要添加的bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType 节点类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回包含bean的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanTreeNode <span class="title">addNode</span><span class="params">(BeanTreeNode parentNode, Object bean, String nodeType)</span> </span>&#123;</span><br><span class="line">        BeanTreeNode node;</span><br><span class="line">        <span class="keyword">if</span> (bean == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有父节点说明为root根节点</span></span><br><span class="line">        <span class="keyword">if</span> (parentNode == <span class="keyword">null</span>) &#123;</span><br><span class="line">            node = root = <span class="keyword">new</span> BeanTreeNode(<span class="keyword">null</span>, nodeType, bean);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//创建子节点，并添加到父节点上</span></span><br><span class="line">            node = <span class="keyword">new</span> BeanTreeNode(parentNode, nodeType, bean);</span><br><span class="line">            parentNode.getChildNodes().add(node);</span><br><span class="line">        &#125;</span><br><span class="line">        currentNode = node;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将当期bean-sBean,以及sBean下的子Bean，挂到dBean下</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sBean 源Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dBean 目的父Bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeTo</span><span class="params">(Object sBean, Object dBean)</span> </span>&#123;</span><br><span class="line">        BeanTreeNode sNode = getNodeByBean(sBean);</span><br><span class="line">        BeanTreeNode dNode = getNodeByBean(dBean);</span><br><span class="line">        removeTo(sNode, dNode);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将当期node-sNode,以及sNode下的子Node，挂到dNode下</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sNode 源node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dNode 目的父node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeTo</span><span class="params">(BeanTreeNode sNode, BeanTreeNode dNode)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从当前父节点移除sNode</span></span><br><span class="line">        sNode.getParentNode().getChildNodes().remove(sNode);</span><br><span class="line">        <span class="comment">//将sNode移到dNode下</span></span><br><span class="line">        dNode.getChildNodes().add(sNode);</span><br><span class="line">        <span class="comment">//修改sNode的父Id和父节点</span></span><br><span class="line">        sNode.setPid(dNode.getId());</span><br><span class="line">        sNode.setParentNode(dNode);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取父bean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean 子bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回父bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getParentBean</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNodeByBean(bean).getParentNode().getBean();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的bean获取bean下面对应类型的子bean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean 当前bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType 节点类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 子bean的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getBeanListByBeanAndNodeType</span><span class="params">(Object bean, String nodeType)</span> </span>&#123;</span><br><span class="line">        BeanTreeNode node = getNodeByBean(bean);</span><br><span class="line">        <span class="keyword">return</span> getBeanListByNodeType(node, nodeType);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的bean获取包含bean的Node节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 当前node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean 要查找的bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> node节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanTreeNode <span class="title">getNodeByBean</span><span class="params">(BeanTreeNode node, Object bean)</span> </span>&#123;</span><br><span class="line">        BeanTreeNode resultNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.getBean().equals(bean)) &#123;</span><br><span class="line">            resultNode = node;</span><br><span class="line">            <span class="keyword">return</span> resultNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (BeanTreeNode tempNode : node.getChildNodes()) &#123;</span><br><span class="line">                resultNode = getNodeByBean(tempNode, bean);</span><br><span class="line">                <span class="keyword">if</span> (resultNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultNode;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的bean获取root节点下包含bean的Node节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean 要查找的bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> node节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanTreeNode <span class="title">getNodeByBean</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNodeByBean(root, bean);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据节点类型返回当前节点下对应节点类型的bean的list集合.</span></span><br><span class="line"><span class="comment">     * 默认如果当前节点满足类型，那么当前节点不会存在相同类型的子节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 当前节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType 节点类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getBeanListByNodeType</span><span class="params">(BeanTreeNode node, String nodeType)</span> </span>&#123;</span><br><span class="line">        List&lt;T&gt; beanList = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">        <span class="keyword">if</span> (node.getNodeType().equals(nodeType)) &#123;</span><br><span class="line">            beanList.add((T)node.getBean());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (BeanTreeNode tempNode : node.getChildNodes()) &#123;</span><br><span class="line">                beanList.addAll((Collection&lt;? extends T&gt;) getBeanListByNodeType(tempNode, nodeType));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据节点类型返回根节点下对应节点类型的bean的list集合.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType 节点类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getBeanListByNodeType</span><span class="params">(String nodeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanListByNodeType(root, nodeType);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从root节点开始获取对应nodeType的node.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType 节点类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> nodeType类型的节点集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;BeanTreeNode&gt; <span class="title">getNodeListByNodeType</span><span class="params">(String nodeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNodeListByNodeType(root, nodeType);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从node节点开始获取对应nodeType的node.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node node节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType 节点类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> nodeType类型的节点集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;BeanTreeNode&gt; <span class="title">getNodeListByNodeType</span><span class="params">(BeanTreeNode node, String nodeType)</span> </span>&#123;</span><br><span class="line">        List&lt;BeanTreeNode&gt; nodeList = <span class="keyword">new</span> ArrayList&lt;BeanTreeNode&gt;();</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nodeList;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nodeType.equals(node.getNodeType())) &#123;</span><br><span class="line">            nodeList.add(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (BeanTreeNode tempNode : node.getChildNodes()) &#123;</span><br><span class="line">                nodeList.addAll(getNodeListByNodeType(tempNode, nodeType));  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> nodeList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将树形结构转化为map.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, List&lt;Object&gt;&gt; toMap() &#123;</span><br><span class="line">        <span class="keyword">return</span> toMap(root);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对应节点及其子节点转化为map.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 树节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转化后的map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, List&lt;Object&gt;&gt; toMap(BeanTreeNode node) &#123;</span><br><span class="line">        Map&lt;String, List&lt;Object&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;String, List&lt;Object&gt;&gt;();</span><br><span class="line">        toMap(node, map);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的nodeType删除对应的节点以及其所有子节点.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNodeByNodeType</span><span class="params">(String nodeType)</span> </span>&#123;</span><br><span class="line">        delNodeByNodeType(root, nodeType);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除node节点下，类型为nodeType的节点和所有子节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodeType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNodeByNodeType</span><span class="params">(BeanTreeNode node, String nodeType)</span> </span>&#123;</span><br><span class="line">        List&lt;BeanTreeNode&gt; nodeList = getNodeListByNodeType(node, nodeType);</span><br><span class="line">        <span class="keyword">for</span> (BeanTreeNode beanTreeNode : nodeList) &#123;</span><br><span class="line">            beanTreeNode.getParentNode().getChildNodes().remove(beanTreeNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从树结构里面删除bean和相关node.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delNodeByBean</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">        BeanTreeNode node = getNodeByBean(bean);</span><br><span class="line">        BeanTreeNode parentNode = node.getParentNode();</span><br><span class="line">        List&lt;BeanTreeNode&gt; childNodes = parentNode.getChildNodes();</span><br><span class="line">        Iterator&lt;BeanTreeNode&gt; it = childNodes.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            BeanTreeNode beanTreeNode = it.next();</span><br><span class="line">            <span class="keyword">if</span> (node == beanTreeNode) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据class返回对应的beanList.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> beanList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;Object&gt; <span class="title">getBeanListByClass</span><span class="params">(Class&lt;T&gt; cls)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanListByClass(root, cls);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据class返回对应的beanList.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> beanList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;Object&gt; <span class="title">getBeanListByClass</span><span class="params">(BeanTreeNode node, Class&lt;T&gt; cls)</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; beanList = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        Object bean = node.getBean();</span><br><span class="line">        <span class="keyword">if</span> (cls.isAssignableFrom(bean.getClass())) &#123;</span><br><span class="line">            beanList.add(bean);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;BeanTreeNode&gt; childNodes = node.getChildNodes();</span><br><span class="line">        <span class="keyword">for</span> (BeanTreeNode beanTreeNode : childNodes) &#123;</span><br><span class="line">            beanList.addAll(getBeanListByClass(beanTreeNode, cls));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对应节点及其子节点转化为map.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 树节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 用来保存结果的map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">toMap</span><span class="params">(BeanTreeNode node, Map&lt;String, List&lt;Object&gt;&gt; map)</span> </span>&#123;</span><br><span class="line">        String key = node.getNodeType();</span><br><span class="line">        Object bean = node.getBean();</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            map.get(key).add(bean);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">            list.add(bean);</span><br><span class="line">            map.put(key, list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (BeanTreeNode tempNode : node.getChildNodes()) &#123;</span><br><span class="line">            toMap(tempNode, map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试树形工具"><a href="#测试树形工具" class="headerlink" title="测试树形工具"></a>测试树形工具</h2><p>使用上面的xml进行测试，这里就不再做xml映射，假设存在上面xml所示的所有实体，“school-one”和“school-two”以及5个student，看看能否构造出想要的结构，测试类代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolInf</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SchoolInf</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">School</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SchoolInf schoolInf = <span class="keyword">new</span> SchoolInf(<span class="string">"2017-10-1XX省学校信息总汇"</span>);</span><br><span class="line">        School school_one = <span class="keyword">new</span> School(<span class="string">"school-one"</span>);</span><br><span class="line">        School school_two = <span class="keyword">new</span> School(<span class="string">"school-two"</span>);</span><br><span class="line">        Student Jack = <span class="keyword">new</span> Student(<span class="string">"Jack"</span>);</span><br><span class="line">        Student Rose = <span class="keyword">new</span> Student(<span class="string">"Rose"</span>);</span><br><span class="line">        Student Jon = <span class="keyword">new</span> Student(<span class="string">"Jon"</span>);</span><br><span class="line">        Student Bob = <span class="keyword">new</span> Student(<span class="string">"Bob"</span>);</span><br><span class="line">        Student Alisa = <span class="keyword">new</span> Student(<span class="string">"Alisa"</span>);</span><br><span class="line">        </span><br><span class="line">        BeanTree tree = <span class="keyword">new</span> BeanTree();</span><br><span class="line">        BeanTreeNode root = tree.addNode(<span class="keyword">null</span>, schoolInf, <span class="string">"root"</span>);</span><br><span class="line">        BeanTreeNode school_node1 = tree.addNode(root, school_one, <span class="string">"school"</span>);</span><br><span class="line">        BeanTreeNode school_node2 = tree.addNode(root, school_two, <span class="string">"school"</span>);</span><br><span class="line">        tree.addNode(school_node1, Jack, <span class="string">"root"</span>);</span><br><span class="line">        tree.addNode(school_node1, Rose, <span class="string">"root"</span>);</span><br><span class="line">        tree.addNode(school_node1, Jon, <span class="string">"root"</span>);</span><br><span class="line">        tree.addNode(school_node2, Bob, <span class="string">"root"</span>);</span><br><span class="line">        tree.addNode(school_node2, Alisa, <span class="string">"root"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过调试观察树结构变量“tree”的值如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/4651321-37255cc2797dd405.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p><p>可以看出来能够构造出正确的结构，BeanTree中其他的一些方法这里就不在一一测试了。</p><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><ul><li>2018/1/10，在BeanTree中添加更多的操作方法。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4651321-2f5eac27cb0f0107.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;tree&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前在项目需要实现一个功能——将xml文件映射成实体，然后对映射的实体进行逻辑处理，最后保存到数据库中；由于xml结构的数据是结构化的数据，所以需要保证保存的数据具有正确的主外键关联。
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://brightloong.github.io/tags/Java/"/>
    
      <category term="树形结构" scheme="https://brightloong.github.io/tags/%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java项目间通过文件调用方法工具（frequest）</title>
    <link href="https://brightloong.github.io/2017/09/19/Java%E9%A1%B9%E7%9B%AE%E9%97%B4%E9%80%9A%E8%BF%87%E6%96%87%E4%BB%B6%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E5%B7%A5%E5%85%B7/"/>
    <id>https://brightloong.github.io/2017/09/19/Java项目间通过文件调用方法工具/</id>
    <published>2017-09-19T13:07:28.000Z</published>
    <updated>2017-10-09T02:33:28.412Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://travis-ci.org/BrightLoong/frequest" target="_blank" rel="noopener"><img src="https://travis-ci.org/BrightLoong/frequest.svg?branch=master" alt="Build Status"></a> <a href="http://search.maven.org/#artifactdetails%7Cio.github.brightloong%7Cfrequest%7C1.0%7Cjar" target="_blank" rel="noopener"><img src="https://img.shields.io/maven-central/v/io.github.brightloong/frequest.svg" alt="Maven Central"></a> <a href="http://www.javadoc.io/doc/io.github.brightloong/frequest" target="_blank" rel="noopener"><img src="http://www.javadoc.io/badge/io.github.brightloong/frequest.svg" alt="Javadocs"></a> <a href="http://www.apache.org/licenses/LICENSE-2.0.txt" target="_blank" rel="noopener"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="Hex.pm"></a></p><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h2><p>frequest：这是一个用JAVA编写的，可以通过文件进行方法调用请求传输的工具。</p><p>项目gitgub地址：<a href="https://github.com/BrightLoong/frequest" target="_blank" rel="noopener">https://github.com/BrightLoong/frequest</a></p><a id="more"></a><h2 id="二-背景"><a href="#二-背景" class="headerlink" title="二.背景"></a>二.背景</h2><p>之前在项目中遇到一下的需求，如图所示: 甲处要访问部署在乙处的服务serverB(因为数据库在乙处)，不过因为一些限制原因导致甲乙两地的网络不通。但是甲乙两地之间有一个文件传输的系统仅仅可以进行文件的传输交换。</p><p>基于以上的条件，考虑在甲地也搭建一个同样的服务serverA（A和B相同，并都加入对请求的处理），。但是过滤它对service层的调用，将方法调用放入文件中（也就是请求文件中），然后将文件发送到乙地对应目录（文件发送的功能并不由这两个系统负责）。serverB将解析文件的请求，调用对应方法，并将结果也存到文件中发送到甲的服务器serveA处，实现请求的响应。</p><p>这里把拦截本地方法调用，生请求文件，等待远端返回结果和远端响应文件请求并将结果生成问文件的功能抽取出来，并对这部分功能进行了提炼重构，修改了一些问题，形成了工具frquest(file-request)。</p><p><img src="https://brightloong.github.io/images/frequest-背景.png" alt="项目背景"></p><h2 id="三-具体思路"><a href="#三-具体思路" class="headerlink" title="三.具体思路"></a>三.具体思路</h2><p><img src="https://brightloong.github.io/images/frequest-思路.png" alt="实现思路"></p><p><strong>甲：本地服务，需要点去远端服务乙</strong></p><p><strong>乙：远端服务，可自己访问自己，亦可以接收甲的请求</strong></p><ul><li>甲处发起请求，调用了方法，使用aspectj对方法调用进行拦截</li><li>对拦截到的方法进行解析，记录下调用方法名，参数，类，接口等信息，并将信息放入传输bean生成json字符串，写入到文件</li><li>把生成的请求文件发送到指定目录，并等待远端返回结果</li><li>……</li><li>乙远端扫描到请求文件，开始远端方法调用</li><li>对文件进行解析，反过来转为json字符串，再转为传输Bean，从中获取方法名，参数等信息，进行一定的处理。使用反射（invok）调用方法，把得到的结果放入传输Bean中，转为json字符串放入结果文件，发送到指定目录</li><li>……</li><li>甲检测到结果文件，转为json字符串，再转为传输Bean，获取结果信息。</li></ul><h2 id="四-使用"><a href="#四-使用" class="headerlink" title="四. 使用"></a>四. 使用</h2><p>可在java项目中使用。</p><h3 id="1-引用"><a href="#1-引用" class="headerlink" title="1. 引用"></a>1. 引用</h3><ul><li>直接下载jar包，下载地址<a href="http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22frequest%22" target="_blank" rel="noopener">http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22frequest%22</a></li></ul><ul><li><p>使用maven的方式引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.brightloong<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>frequest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>注：</strong>如果是java项目需要继承aspectj环境，如果是集成了spring的web项目需要开启aspectj支持</p></blockquote><h3 id="2-配置发送接收文件的目录"><a href="#2-配置发送接收文件的目录" class="headerlink" title="2. 配置发送接收文件的目录"></a>2. 配置发送接收文件的目录</h3><p>请求端的发送目录是指拦截请求生成的请求文件，接收目录是指发送请求后等待接收的结果文件的目录。</p><p>远端的发送目录是值生成的结果文件的发送目录，接收目录是指扫描请求端的请求文件的目录。</p><p>项目中使用了xml配置的方式，格式如下。</p><blockquote><p><strong>注：本工具不负责文件的传输，所以如果想用该工具在本机做测试，可以把远端和请求端的send-path和receive-path交替配置</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">send-path</span>&gt;</span>d:\send<span class="tag">&lt;/<span class="name">send-path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">receive-path</span>&gt;</span>d:\receive<span class="tag">&lt;/<span class="name">receive-path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--远端可以配置多个config，可能会有多个请求端需要同一个远端响应,请求端配置多个也默认只取第一个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">send-path</span>&gt;</span>d:\send<span class="tag">&lt;/<span class="name">send-path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">receive-path</span>&gt;</span>d:\receive<span class="tag">&lt;/<span class="name">receive-path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configs</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-请求端（被拦截端）配置"><a href="#3-请求端（被拦截端）配置" class="headerlink" title="3. 请求端（被拦截端）配置"></a>3. 请求端（被拦截端）配置</h3><ul><li><p>同样首先需要配置收发文件目录（也就是上面说的xml）</p></li><li><p>如果是简单的java项目可使用下面的方式启动。</p><ul><li>继承<code>ServiceProxyInterceptor</code>并且实现<code>serviceAroundImpl()</code>方法</li><li>在实现方法类调用父类的serviceAround()</li><li>标注上<code>@Around</code>注解</li><li>在Around里面加入切入点，<code>PointConstants.POINT_SERVICE</code>是在工具中定义的一个切入点，也就是对具有自定义注解 <code>@ServiceProxy</code>的方法进行拦截，也可以定义自己的切入点。</li><li>启动frequest功能，如下mian()方法中前两行代码所示。</li><li>如下，如果要对say()方法进行拦截，则加上 <code>@ServiceProxy</code>注解(前提是你使用了定义的切入点<code>PointConstants.POINT_SERVICE</code>，并且要保证请求端和远端拥有相同的方法，包括方法所在的类和包)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">ServiceProxyInterceptor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Around</span>(PointConstants.POINT_SERVICE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">serviceAroundImpl</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.serviceAround(proceedingJoinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ServiceProxy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//setIsRemote(false),设置为请求端，并设置xml的目录。</span></span><br><span class="line">        NormalConfig.getInstance().setXmlConfigPath(<span class="string">"com/test/xml/config.xml"</span>).setIsRemote(<span class="keyword">false</span>);</span><br><span class="line">       <span class="comment">//开启frequest功能</span></span><br><span class="line">        StartEngine.start();</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        System.out.println(test.say(<span class="string">"hello"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-远端（相应文件请求端）配置"><a href="#4-远端（相应文件请求端）配置" class="headerlink" title="4. 远端（相应文件请求端）配置"></a>4. 远端（相应文件请求端）配置</h3><ul><li><p>同样首先需要配置收发文件目录（也就是上面说的xml）</p></li><li><p>如果是简单的java项目可使用下面的方式启动。如果是web项目，同样也是调用mian()方法中的两行代码，保证其能在合适的地方进行调用，启动功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Start</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//setIsRemote(true),设置为远端，并设置xml的目录。</span></span><br><span class="line">        NormalConfig.getInstance().setIsRemote(<span class="keyword">true</span>).setXmlConfigPath(<span class="string">"com/test/xml/config.xml"</span>);</span><br><span class="line">       <span class="comment">//开启frequest功能</span></span><br><span class="line">        StartEngine.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><p>​</p></li></ul><h3 id="5-其他配置"><a href="#5-其他配置" class="headerlink" title="5. 其他配置"></a>5. 其他配置</h3><p>下面的配置具有默认值，所以不进行配置也是可以的。</p><ul><li>sleepTime：休眠时间，单位ms，扫描文件变动的间隔时间和等待远端返回结果的每次等待时间，默认是100ms。</li><li>waitCount：请求端等待远端返回结果的次数，每次间隔时间为sleepTime，所以总共等待时间为waitCount*sleepTime(ms)。默认等待次数是300次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置休眠时间sleepTime,设置等待结果次数300次</span></span><br><span class="line"> NormalConfig.getInstance().setSleepTime(<span class="number">100</span>).setWaitCount(<span class="number">300</span>);</span><br></pre></td></tr></table></figure><h2 id="五-LICENSE"><a href="#五-LICENSE" class="headerlink" title="五.  LICENSE"></a>五.  LICENSE</h2><p>遵循Apache License 2.0</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://travis-ci.org/BrightLoong/frequest&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://travis-ci.org/BrightLoong/frequest.svg?branch=master&quot; alt=&quot;Build Status&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://search.maven.org/#artifactdetails%7Cio.github.brightloong%7Cfrequest%7C1.0%7Cjar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/maven-central/v/io.github.brightloong/frequest.svg&quot; alt=&quot;Maven Central&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://www.javadoc.io/doc/io.github.brightloong/frequest&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;http://www.javadoc.io/badge/io.github.brightloong/frequest.svg&quot; alt=&quot;Javadocs&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0.txt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/hexpm/l/plug.svg&quot; alt=&quot;Hex.pm&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一.简介&quot;&gt;&lt;/a&gt;一.简介&lt;/h2&gt;&lt;p&gt;frequest：这是一个用JAVA编写的，可以通过文件进行方法调用请求传输的工具。&lt;/p&gt;
&lt;p&gt;项目gitgub地址：&lt;a href=&quot;https://github.com/BrightLoong/frequest&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/BrightLoong/frequest&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://brightloong.github.io/tags/java/"/>
    
      <category term="frequest" scheme="https://brightloong.github.io/tags/frequest/"/>
    
  </entry>
  
  <entry>
    <title>数组-&gt;JSON字符串-&gt;数组过程中的问题</title>
    <link href="https://brightloong.github.io/2017/09/03/%E6%95%B0%E7%BB%84-JSON%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%95%B0%E7%BB%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://brightloong.github.io/2017/09/03/数组-JSON字符串-数组过程中的问题/</id>
    <published>2017-09-03T10:07:28.000Z</published>
    <updated>2017-10-09T02:33:43.250Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/json.jpg" alt="json"></p><p>之前在使用 <code>alibaba的fastjson</code>做数组的相关转换操作的时候遇到一些问题，这里把遇到的问题以及如何解决的记录如下。<a id="more"></a></p><h2 id="一-转换过程中的问题"><a href="#一-转换过程中的问题" class="headerlink" title="一. 转换过程中的问题"></a>一. 转换过程中的问题</h2><p>话不多说，先上代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个String数组</span></span><br><span class="line">        String[][] stringArray = <span class="keyword">new</span> String[][]&#123;&#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>&#125;,&#123;<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>&#125;&#125;;</span><br><span class="line">        <span class="comment">//使用fastjson转为json字符串</span></span><br><span class="line">        String jsonString = JSON.toJSONString(stringArray);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析json字符串后输出class发现是jsonArray的。</span></span><br><span class="line">        Object array = JSON.parse(jsonString);</span><br><span class="line">        System.out.println(array.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Before class:class [[Ljava.lang.String;</span><br><span class="line">[["1","2","3"],["4","5","6"]]</span><br><span class="line">After class:class com.alibaba.fastjson.JSONArray</span><br></pre></td></tr></table></figure><p>遇到的问题如上，把一个数组转为json字符串后，再使用用JSON.parse()转换回来，获取到的class类型却是JSONArray的。</p><p>当然你也可以用很简单的办法把他给转换成需要的String二维数组。不过我的需求是：</p><ol><li>只知道是个数组，知道到数组的原始Class类型(如果是<code>String[][]</code>知道是<code>String.class</code>)</li><li>不知道是几维数组，也不知道最开始传入的数组的长度</li><li>在拿到从Json字符串转换回来的object的时候，必须要使用原始类型(比如是<code>String[][]</code>,那么转换回来的object，使用<code>object.getClass()</code>应该得到<code>[[Ljava.lang.String</code>)，否则无法使用。</li></ol><p>为了解决上述问题，在网上查阅各种资料无果，最后突然想到查询<code>数组的反射</code>，找到了<code>java.lang.reflect.Array</code>这个包，下面对这个包里面的一些使用做一个简单的介绍。</p><h2 id="二-关于java-lang-reflect-Array"><a href="#二-关于java-lang-reflect-Array" class="headerlink" title="二. 关于java.lang.reflect.Array"></a>二. 关于java.lang.reflect.Array</h2><p>同样先上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一维数组.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls 数组基本类型Class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 创建数组长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 创建的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">creatOneDimArray</span><span class="params">(Class cls, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(cls, length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建多维数组.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls 数组基本类型Class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dims 维度信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 创建的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">creatMultiDimsArray</span><span class="params">(Class cls, <span class="keyword">int</span>[] dims)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(cls, dims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数组的长度和class信息.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 使用Array.newInstance()创建的array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 长度和class信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getArrayInfo</span><span class="params">(Object array)</span> </span>&#123;</span><br><span class="line">        Class cls = array.getClass();</span><br><span class="line">        <span class="comment">//只会返回第一维度的长度，比如String[1][2][3]返回1，String[3][4]返回3</span></span><br><span class="line">        <span class="keyword">int</span> length = Array.getLength(array);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CLASS:"</span> + cls + <span class="string">"-----"</span> + <span class="string">"LENGTH:"</span> + length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建长度为10的一维String数组</span></span><br><span class="line">        Object oneArray = creatOneDimArray(String.class, <span class="number">10</span>);</span><br><span class="line">        System.out.println(getArrayInfo(oneArray));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个[2,3,4]的二维String数组</span></span><br><span class="line">        <span class="keyword">int</span>[] dims = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        Object threeArray = creatMultiDimsArray(String.class,dims);</span><br><span class="line">        System.out.println(getArrayInfo(threeArray));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//**************************</span></span><br><span class="line">        <span class="comment">//*      数组赋值操作      *</span></span><br><span class="line">        <span class="comment">//**************************</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//---------1.强制转换赋值</span></span><br><span class="line">        ((String[])oneArray)[<span class="number">1</span>] = <span class="string">"hello"</span>;</span><br><span class="line">        ((String[])oneArray)[<span class="number">9</span>] = <span class="string">" world"</span>;</span><br><span class="line">        System.out.println(((String[])oneArray)[<span class="number">1</span>] + ((String[])oneArray)[<span class="number">9</span>]);</span><br><span class="line"></span><br><span class="line">        ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">2</span>][<span class="number">3</span>] = <span class="string">"hello"</span>;</span><br><span class="line">        ((String[][][])threeArray)[<span class="number">0</span>][<span class="number">1</span>][<span class="number">3</span>] = <span class="string">" java"</span>;</span><br><span class="line">        System.out.println(((String[][][])threeArray)[<span class="number">1</span>][<span class="number">2</span>][<span class="number">3</span>] + ((String[][][])threeArray)[<span class="number">0</span>][<span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//--------2.使用Array.set()进行赋值操作</span></span><br><span class="line">        <span class="comment">//使用Array.get()可以获取到下一维的值，比如三维的获取到二维</span></span><br><span class="line">        <span class="comment">//获取三维中index=1的二维数组，Strign[1][][]。</span></span><br><span class="line">        Object two = Array.get(threeArray,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//从输出可以看到获取到的是一个二维数组</span></span><br><span class="line">        System.out.println(<span class="string">"CLASS:"</span> + two.getClass());</span><br><span class="line">        <span class="comment">//对String[1][0][]赋值</span></span><br><span class="line">        Array.set(two,<span class="number">0</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"this"</span>,<span class="string">" is"</span>,<span class="string">" a"</span>,<span class="string">" test"</span>&#125;);</span><br><span class="line">        System.out.println(((String[][][])threeArray)[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] + ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">                + ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">0</span>][<span class="number">2</span>] + ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">0</span>][<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再获取一维String[1][1][]</span></span><br><span class="line">        Object one = Array.get(two,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"CLASS:"</span> + one.getClass());</span><br><span class="line"></span><br><span class="line">        Array.set(one,<span class="number">0</span>,<span class="string">"my"</span>);</span><br><span class="line">        Array.set(one,<span class="number">1</span>,<span class="string">" name"</span>);</span><br><span class="line">        Array.set(one,<span class="number">2</span>,<span class="string">" is"</span>);</span><br><span class="line">        Array.set(one,<span class="number">3</span>,<span class="string">" brightloong"</span>);</span><br><span class="line">        System.out.println(((String[][][])threeArray)[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] + ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">                + ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">1</span>][<span class="number">2</span>] + ((String[][][])threeArray)[<span class="number">1</span>][<span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CLASS:class [Ljava.lang.String;-----LENGTH:10</span><br><span class="line">CLASS:class [[[Ljava.lang.String;-----LENGTH:2</span><br><span class="line">hello world</span><br><span class="line">hello java</span><br><span class="line">CLASS:class [[Ljava.lang.String;</span><br><span class="line">this is a test</span><br><span class="line">CLASS:class [Ljava.lang.String;</span><br><span class="line">my name is brightloong</span><br></pre></td></tr></table></figure><p>这里已经在上述代码中做了大部分的注释，这里也不在详细介绍，主要说一下几个方法的作用。</p><ul><li><code>Array.newInstance(Class&lt;?&gt; componentType, int length)</code>和<code>Array.newInstance(Class&lt;?&gt; componentType, int... dimensions)</code>第一个用于创建传入类型的长度为length的一维数组，第二个可以用于创建传入类型的多维数组，维度和长度由传入的第二个参数决定。</li><li><code>Array.get(Object array, int index)</code>用于获取传入的数组array的index下的内容。</li><li><code>Array.set(Object array, int index, Object value)</code>用于对传入的数组array的index进行赋值，赋值为value，具体使用见上述的代码。</li></ul><h2 id="三-如何解决转换问题"><a href="#三-如何解决转换问题" class="headerlink" title="三. 如何解决转换问题"></a>三. 如何解决转换问题</h2><p>在具备了以上的了解后，再来解决所遇到的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonArrayToArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个String数组</span></span><br><span class="line">        String[][] stringArray = <span class="keyword">new</span> String[][]&#123;&#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>&#125;,&#123;<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>&#125;&#125;;</span><br><span class="line">        <span class="comment">//使用fastjson转为json字符串</span></span><br><span class="line">        String jsonString = JSON.toJSONString(stringArray);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析json字符串后输出class发现是jsonArray的。</span></span><br><span class="line">        Object array = JSON.parse(jsonString);</span><br><span class="line">        System.out.println(array.getClass());</span><br><span class="line"></span><br><span class="line">        Object realArray = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            realArray = getArrayInstanceByClassAndArg(String.class, array);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        parseJsonArray(array, realArray);</span><br><span class="line">        System.out.println(realArray.getClass());</span><br><span class="line">        System.out.println(realArray.getClass().equals(String[][].class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析jsonArray还原为最开始的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o 解析后的类型是jsonArray的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 实际要组装的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">parseJsonArray</span><span class="params">(Object o, Object array)</span> </span>&#123;</span><br><span class="line">        parseJsonArray(o, array, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用递归调用，解析jsonArray还原为最开始的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o 解析后的类型是jsonArray的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 实际要组装的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastArray 上一个array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">parseJsonArray</span><span class="params">(Object o, Object array, Object lastArray, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        JSONArray tempArray;</span><br><span class="line">        <span class="comment">//如果class不是JSONArray，使用Array.set()赋值</span></span><br><span class="line">        <span class="keyword">if</span> (!o.getClass().equals(JSONArray.class)) &#123;</span><br><span class="line">            Array.set(lastArray,index , o);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是JSONArray,继续继续循环递归调用</span></span><br><span class="line">        tempArray = (JSONArray)o;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tempArray.size(); i++) &#123;</span><br><span class="line">            Object arrayTemp = Array.get(array, i);</span><br><span class="line">            parseJsonArray(tempArray.get(i), arrayTemp, array, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据class和传入的解析后的类型是jsonArray的参数，获取对应维度和大小的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls Class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> argValue  解析后的类型是jsonArray的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">getArrayInstanceByClassAndArg</span><span class="params">(Class cls, Object argValue)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Object temp = argValue;</span><br><span class="line">        JSONArray tempArray;</span><br><span class="line">        List&lt;Integer&gt; dimsInf = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">//获取jsonArray对应的数组维度和长度</span></span><br><span class="line">        <span class="keyword">while</span> (temp.getClass().equals(JSONArray.class)) &#123;</span><br><span class="line">            tempArray = (JSONArray)temp;</span><br><span class="line">            dimsInf.add(tempArray.size());</span><br><span class="line">            temp = tempArray.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dims = <span class="keyword">new</span> <span class="keyword">int</span>[dimsInf.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimsInf.size(); i++) &#123;</span><br><span class="line">            dims[i] = dimsInf.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回对应的数组</span></span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(cls, dims);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[["1","2","3"],["4","5","6"]]</span><br><span class="line">class com.alibaba.fastjson.JSONArray</span><br><span class="line">class [[Ljava.lang.String;</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>可以看到最后被将转换后的Class为JSONArray的结果在转换为最初的数组类型，<code>String[][]</code>，由最后<code>realArray.getClass().equals(String[][].class)</code>返回结果<code>true</code>也可以得到确实转换正确了。具体的解析方法可以看上面的parseJsonArray()方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/json.jpg&quot; alt=&quot;json&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前在使用 &lt;code&gt;alibaba的fastjson&lt;/code&gt;做数组的相关转换操作的时候遇到一些问题，这里把遇到的问题以及如何解决的记录如下。
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://brightloong.github.io/tags/java/"/>
    
      <category term="JSONArray转数组" scheme="https://brightloong.github.io/tags/JSONArray%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Apache Commons FileUpload</title>
    <link href="https://brightloong.github.io/2017/07/24/Apache-Commons-FileUpload/"/>
    <id>https://brightloong.github.io/2017/07/24/Apache-Commons-FileUpload/</id>
    <published>2017-07-24T02:44:54.000Z</published>
    <updated>2017-10-09T02:33:56.199Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://brightloong.github.io/images/upload.jpg" alt="文件上传"><br>Apache Commons FileUpload是用于解析上传文件的包。这里将其一些简单的特性和使用进行一个大概的介绍。<a id="more"></a></p><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h2><p>用于解析上传的文件，”Form-based File Upload in HTML”。也就是说,如果使用POST方法提交HTTP请求,并且使用内容类型<strong><em><code>“multipart / form-data”</code></em></strong>,则FileUpload可以解析该请求。</p><h2 id="二-简单使用"><a href="#二-简单使用" class="headerlink" title="二.简单使用"></a>二.简单使用</h2><h3 id="1-满足的条件"><a href="#1-满足的条件" class="headerlink" title="1.满足的条件"></a>1.满足的条件</h3><ul><li>form表单使用POST请求,并且form表单的内容格式要定义成multipart/form-data格式</li><li><p>form表单内，要添加空间<code>&lt;input type=&quot;file&quot; name=&quot;&quot;&gt;</code>或者其他的比如：Uploadify插件</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">action</span>=<span class="string">"fup.cgi"</span>&gt;</span></span><br><span class="line">  File to upload: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upfile"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  Notes about the file: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"note"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Press"</span>&gt;</span> to upload the file!</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-具体使用"><a href="#2-具体使用" class="headerlink" title="2.具体使用"></a>2.具体使用</h3></li><li>使用前判断是否有上传文件的请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check that we have a file upload request</span></span><br><span class="line"><span class="keyword">boolean</span> isMultipart = ServletFileUpload.isMultipartContent(request);</span><br></pre></td></tr></table></figure><ul><li>简单的例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a factory for disk-based file items</span></span><br><span class="line">DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure a repository (to ensure a secure temp location is used)，默认会放在System.getProperty("java.io.tmpdir")</span></span><br><span class="line">ServletContext servletContext = <span class="keyword">this</span>.getServletConfig().getServletContext();</span><br><span class="line">File repository = (File) servletContext.getAttribute(<span class="string">"javax.servlet.context.tempdir"</span>);</span><br><span class="line">factory.setRepository(repository);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new file upload handler</span></span><br><span class="line">ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse the request</span></span><br><span class="line">List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br></pre></td></tr></table></figure><ul><li>加入一些控制的例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a factory for disk-based file items</span></span><br><span class="line">DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set factory constraints</span></span><br><span class="line"><span class="comment">//默认为10k，小于这个值的会放在内容中，否则放在设置的disk路径下</span></span><br><span class="line">factory.setSizeThreshold(yourMaxMemorySize);</span><br><span class="line">factory.setRepository(yourTempDirectory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new file upload handler</span></span><br><span class="line">ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set overall request size constraint，最大上传文件</span></span><br><span class="line">upload.setSizeMax(yourMaxRequestSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse the request</span></span><br><span class="line">List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br></pre></td></tr></table></figure><p>也可以一并配置多个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a factory for disk-based file items</span></span><br><span class="line">DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory(yourMaxMemorySize, yourTempDirectory);</span><br></pre></td></tr></table></figure><ul><li>获取上传的文件信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Process a file upload</span></span><br><span class="line"><span class="keyword">if</span> (!item.isFormField()) &#123;</span><br><span class="line">    String fieldName = item.getFieldName();</span><br><span class="line">    String fileName = item.getName();</span><br><span class="line">    String contentType = item.getContentType();</span><br><span class="line">    <span class="keyword">boolean</span> isInMemory = item.isInMemory();</span><br><span class="line">    <span class="keyword">long</span> sizeInBytes = item.getSize();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>保存文件前获取文件的一些方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Process a file upload</span></span><br><span class="line"><span class="keyword">if</span> (writeToFile) &#123;</span><br><span class="line">    File uploadedFile = <span class="keyword">new</span> File(...);</span><br><span class="line">    item.write(uploadedFile);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    InputStream uploadedStream = item.getInputStream();</span><br><span class="line">    ...</span><br><span class="line">    uploadedStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OR</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Process a file upload in memory</span></span><br><span class="line"><span class="keyword">byte</span>[] data = item.get();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="三-清理文件"><a href="#三-清理文件" class="headerlink" title="三.清理文件"></a>三.清理文件</h2><p>仅仅适用于DiskFileItem,也就是说在上传前，文件被写入了临时文件，如果不再使用这些临时文件，则需要删除这些临时文件。DiskFileItemFactory有一个属性FileCleaningTracker，设置这个属性可以用来追踪删除临时文件。当这个临时文件不再被使用时将会被立即删除，更精确的说是这个文件对象被垃圾收集器回收时，FileCleaningTracker将启动收割者线程(reaper thread)自动删除这个临时文件。 为了确保这个<br>后台线程在它不再被需要时被停止，在 servlet 环境里，我们通过一个名叫 FileCleanerCleanup 的 s<br>ervlet 上下文监听器，在web应用关闭时调用FileCleaningTracker.exitWhenFinished()来终止收割机线<br>程。在servlet环境中，使用 <a href="http://commons.apache.org/proper/commons-fileupload/apidocs/org/apache/commons/fileupload/servlet/FileCleanerCleanup.html" target="_blank" rel="noopener">FileCleanerCleanup</a>,FileCleanerCleanup提供了FileCleaningTracker的一个实例，要让FileCleanerCleanup监听器工作，你需要在 web.xml 增加如下代码：。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">      org.apache.commons.fileupload.servlet.FileCleanerCleanup</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在使用FileCleanerCleanup,应该像下面这样创建DiskFileItemFactory<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DiskFileItemFactory <span class="title">newDiskFileItemFactory</span><span class="params">(ServletContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                         File repository)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//FileCleaningTracker类，这个类用于跟踪要删除的文件</span></span><br><span class="line">    FileCleaningTracker fileCleaningTracker</span><br><span class="line">        = FileCleanerCleanup.getFileCleaningTracker(context);</span><br><span class="line">    DiskFileItemFactory factory</span><br><span class="line">        = <span class="keyword">new</span> DiskFileItemFactory(DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD,</span><br><span class="line">                                  repository);</span><br><span class="line">    factory.setFileCleaningTracker(fileCleaningTracker);</span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="四-上传进度"><a href="#四-上传进度" class="headerlink" title="四.上传进度"></a>四.上传进度</h2><p>下面是一个创建进度监听的一个例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Create a progress listener</span></span><br><span class="line">ProgressListener progressListener = <span class="keyword">new</span> ProgressListener()&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">long</span> pBytesRead, <span class="keyword">long</span> pContentLength, <span class="keyword">int</span> pItems)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"We are currently reading item "</span> + pItems);</span><br><span class="line">       <span class="keyword">if</span> (pContentLength == -<span class="number">1</span>) &#123;</span><br><span class="line">           System.out.println(<span class="string">"So far, "</span> + pBytesRead + <span class="string">" bytes have been read."</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">"So far, "</span> + pBytesRead + <span class="string">" of "</span> + pContentLength</span><br><span class="line">                              + <span class="string">" bytes have been read."</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">upload.setProgressListener(progressListener);</span><br></pre></td></tr></table></figure></p><p>但是这样会存在问题，有可能会被频繁的调用而造成性能问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Create a progress listener</span></span><br><span class="line">ProgressListener progressListener = <span class="keyword">new</span> ProgressListener()&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">long</span> megaBytes = -<span class="number">1</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">long</span> pBytesRead, <span class="keyword">long</span> pContentLength, <span class="keyword">int</span> pItems)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">long</span> mBytes = pBytesRead / <span class="number">1000000</span>;</span><br><span class="line">       <span class="keyword">if</span> (megaBytes == mBytes) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       megaBytes = mBytes;</span><br><span class="line">       System.out.println(<span class="string">"We are currently reading item "</span> + pItems);</span><br><span class="line">       <span class="keyword">if</span> (pContentLength == -<span class="number">1</span>) &#123;</span><br><span class="line">           System.out.println(<span class="string">"So far, "</span> + pBytesRead + <span class="string">" bytes have been read."</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">"So far, "</span> + pBytesRead + <span class="string">" of "</span> + pContentLength</span><br><span class="line">                              + <span class="string">" bytes have been read."</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>如果想在页面展示，可以自己实现一个ProgressListener接口，将进度的相关信息放在session中。通过ajax之类的进行调用。具体可以参照<a href="http://blog.csdn.net/gxp_java/article/details/9013191" target="_blank" rel="noopener">博客– Common-FileUpload带进度条上传</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://brightloong.github.io/images/upload.jpg&quot; alt=&quot;文件上传&quot;&gt;&lt;br&gt;Apache Commons FileUpload是用于解析上传文件的包。这里将其一些简单的特性和使用进行一个大概的介绍。
    
    </summary>
    
      <category term="Java" scheme="https://brightloong.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="https://brightloong.github.io/tags/java/"/>
    
      <category term="apache commons" scheme="https://brightloong.github.io/tags/apache-commons/"/>
    
  </entry>
  
</feed>
